// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: database.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Database {

  /// <summary>Holder for reflection information generated from database.proto</summary>
  public static partial class DatabaseReflection {

    #region Descriptor
    /// <summary>File descriptor for database.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DatabaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5kYXRhYmFzZS5wcm90bxIIZGF0YWJhc2UaCmdhbWUucHJvdG8ijQEKD0Rh",
            "dGFiYXNlUmVxdWVzdBImCglxdWVyeVR5cGUYASABKA4yEy5kYXRhYmFzZS5R",
            "dWVyeVR5cGUSEwoLcXVlcnlQYXJhbTEYAiABKAkSEwoLcXVlcnlQYXJhbTIY",
            "AyABKAkSEwoLcXVlcnlQYXJhbTMYBCABKAkSEwoLcXVlcnlQYXJhbTQYBSAB",
            "KAki2AUKEERhdGFiYXNlUmVzcG9uc2USOwoUYXJlYVRyaWdnZXJUZWxlcG9y",
            "dHMYASADKAsyHS5kYXRhYmFzZS5BcmVhVHJpZ2dlclRlbGVwb3J0EjUKEWNy",
            "ZWF0dXJlR3JvdXBpbmdzGAIgAygLMhouZGF0YWJhc2UuQ3JlYXR1cmVHcm91",
            "cGluZxI0ChBjcmVhdHVyZU1vdmVtZW50GAMgAygLMhouZGF0YWJhc2UuQ3Jl",
            "YXR1cmVNb3ZlbWVudBJEChhjcmVhdHVyZU1vdmVtZW50VGVtcGxhdGUYBCAD",
            "KAsyIi5kYXRhYmFzZS5DcmVhdHVyZU1vdmVtZW50VGVtcGxhdGUSKQoLZ2Ft",
            "ZU9iamVjdHMYBSADKAsyFC5kYXRhYmFzZS5HYW1lT2JqZWN0EiUKCWNyZWF0",
            "dXJlcxgGIAMoCzISLmRhdGFiYXNlLkNyZWF0dXJlEkMKFWNyZWF0dXJlRXF1",
            "aXBUZW1wbGF0ZRgHIAEoCzIfLmRhdGFiYXNlLkNyZWF0dXJlRXF1aXBUZW1w",
            "bGF0ZUgAiAEBEjEKDGl0ZW1UZW1wbGF0ZRgIIAEoCzIWLmRhdGFiYXNlLkl0",
            "ZW1UZW1wbGF0ZUgBiAEBEjUKDm5wY1ZlbmRvckVudHJ5GAkgASgLMhguZGF0",
            "YWJhc2UuTnBjVmVuZG9yRW50cnlIAogBARIzCg1xdWVzdFRlbXBsYXRlGAog",
            "ASgLMhcuZGF0YWJhc2UuUXVlc3RUZW1wbGF0ZUgDiAEBEjkKEGNyZWF0dXJl",
            "VGVtcGxhdGUYCyABKAsyGi5kYXRhYmFzZS5DcmVhdHVyZVRlbXBsYXRlSASI",
            "AQFCGAoWX2NyZWF0dXJlRXF1aXBUZW1wbGF0ZUIPCg1faXRlbVRlbXBsYXRl",
            "QhEKD19ucGNWZW5kb3JFbnRyeUIQCg5fcXVlc3RUZW1wbGF0ZUITChFfY3Jl",
            "YXR1cmVUZW1wbGF0ZSKNAgoTQXJlYVRyaWdnZXJUZWxlcG9ydBIKCgJpZBgB",
            "IAEoBRIMCgRuYW1lGAIgASgJEhUKDXJlcXVpcmVkTGV2ZWwYAyABKA0SFAoM",
            "cmVxdWlyZWRJdGVtGAQgASgFEhUKDXJlcXVpcmVkSXRlbTIYBSABKAUSGQoR",
            "cmVxdWlyZWRRdWVzdERvbmUYBiABKAUSEQoJdGFyZ2V0TWFwGAcgASgNEiAK",
            "CHBvc2l0aW9uGAggASgLMg4uZ2FtZS5Qb3NpdGlvbhIZChF0YXJnZXRPcmll",
            "bnRhdGlvbhgJIAEoAhIYChBzdGF0dXNGYWlsZWRUZXh0GAogASgJEhMKC2Nv",
            "bmRpdGlvbklkGAsgASgFIpMECghDcmVhdHVyZRIMCgRndWlkGAEgASgDEgwK",
            "BG5hbWUYAiABKAkSCgoCaWQYAyABKAUSCwoDbWFwGAQgASgFEg4KBnpvbmVJ",
            "ZBgFIAEoBRIOCgZhcmVhSWQYBiABKAUSIAoIcG9zaXRpb24YByABKAsyDi5n",
            "YW1lLlBvc2l0aW9uEhMKC29yaWVudGF0aW9uGAggASgCEhgKEHNwYXduVGlt",
            "ZVNlY3NNaW4YCSABKAUSGAoQc3Bhd25UaW1lU2Vjc01heBgKIAEoBRIRCglz",
            "cGF3bkRpc3QYCyABKAISGQoRY3VycmVudFdheXBvaW50SWQYDCABKAUSEQoJ",
            "c3Bhd25UeXBlGA0gASgFEhMKC3Jlc3Bhd25UaW1lGA4gASgFEhQKDG1vdmVt",
            "ZW50VHlwZRgPIAEoBRIWCg53YW5kZXJEaXN0YW5jZRgQIAEoBRITCgtzZWFy",
            "Y2hSYW5nZRgRIAEoBRITCgtlcXVpcG1lbnRJZBgSIAEoBRISCgpzY3JpcHRO",
            "YW1lGBMgASgJEhAKCGNvbW1lbnRzGBQgASgJEhEKCXNwYXduTWFzaxgVIAEo",
            "BRIPCgdtb2RlbElkGBYgASgFEhcKD2N1cnJlbnRXYXlwb2ludBgXIAEoBRIR",
            "CgljdXJIZWFsdGgYGCABKAUSDwoHY3VyTWFuYRgZIAEoBRISCgpkZWF0aFN0",
            "YXRlGBogASgFImUKFUNyZWF0dXJlRXF1aXBUZW1wbGF0ZRINCgVlbnRyeRgB",
            "IAEoBRITCgtlcXVpcEVudHJ5MRgCIAEoBRITCgtlcXVpcEVudHJ5MhgDIAEo",
            "BRITCgtlcXVpcEVudHJ5MxgEIAEoBSI6ChBDcmVhdHVyZUdyb3VwaW5nEhIK",
            "CmxlYWRlckd1aWQYASABKAMSEgoKbWVtYmVyR3VpZBgCIAEoAyKZAQoQQ3Jl",
            "YXR1cmVNb3ZlbWVudBIKCgJpZBgBIAEoBRINCgVwb2ludBgCIAEoBRIgCghw",
            "b3NpdGlvbhgDIAEoCzIOLmdhbWUuUG9zaXRpb24SEwoLb3JpZW50YXRpb24Y",
            "BCABKAISEAoId2FpdFRpbWUYBSABKAUSEAoIc2NyaXB0SWQYBiABKAUSDwoH",
            "Y29tbWVudBgHIAEoCSK0AQoYQ3JlYXR1cmVNb3ZlbWVudFRlbXBsYXRlEg0K",
            "BWVudHJ5GAEgASgFEg4KBnBhdGhJZBgCIAEoBRINCgVwb2ludBgDIAEoBRIg",
            "Cghwb3NpdGlvbhgEIAEoCzIOLmdhbWUuUG9zaXRpb24SEwoLb3JpZW50YXRp",
            "b24YBSABKAISEAoId2FpdFRpbWUYBiABKAUSEAoIc2NyaXB0SWQYByABKAUS",
            "DwoHY29tbWVudBgIIAEoCSLtDQoQQ3JlYXR1cmVUZW1wbGF0ZRINCgVlbnRy",
            "eRgBIAEoAxIMCgRuYW1lGAIgASgJEg8KB3N1Yk5hbWUYAyABKAkSEAoIbWlu",
            "TGV2ZWwYBCABKA0SEAoIbWF4TGV2ZWwYBSABKA0SEAoIbW9kZWxJZDEYBiAB",
            "KAUSEAoIbW9kZWxJZDIYByABKAUSEAoIbW9kZWxJZDMYCCABKAUSEAoIbW9k",
            "ZWxJZDQYCSABKAUSDwoHZmFjdGlvbhgKIAEoBRINCgVzY2FsZRgLIAEoAhIO",
            "CgZmYW1pbHkYDCABKA0SFAoMY3JlYXR1cmVUeXBlGA0gASgNEhMKC2luaGFi",
            "aXRUeXBlGA4gASgNEhcKD3JlZ2VuZXJhdGVTdGF0cxgPIAEoDRIUCgxyYWNp",
            "YWxMZWFkZXIYECABKA0SEAoIbnBjRmxhZ3MYESABKAUSEQoJdW5pdEZsYWdz",
            "GBIgASgFEhQKDGR5bmFtaWNGbGFncxgTIAEoBRISCgpleHRyYUZsYWdzGBQg",
            "ASgFEhkKEWNyZWF0dXJlVHlwZUZsYWdzGBUgASgFEhEKCXNwZWVkV2FsaxgW",
            "IAEoAhIQCghzcGVlZFJ1bhgXIAEoAhIRCglkZXRlY3Rpb24YGCABKAUSEwoL",
            "Y2FsbEZvckhlbHAYGSABKAUSDwoHcHVyc3VpdBgaIAEoBRINCgVsZWFzaBgb",
            "IAEoBRIPCgd0aW1lb3V0GBwgASgFEhEKCXVuaXRDbGFzcxgdIAEoDRIMCgRy",
            "YW5rGB4gASgNEhgKEGhlYWx0aE11bHRpcGxpZXIYHyABKAISFwoPcG93ZXJN",
            "dWx0aXBsaWVyGCAgASgCEhgKEGRhbWFnZU11bHRpcGxpZXIYISABKAISFgoO",
            "ZGFtYWdlVmFyaWFuY2UYIiABKAISFwoPYXJtb3JNdWx0aXBsaWVyGCMgASgC",
            "EhwKFGV4cGVyaWVuY2VNdWx0aXBsaWVyGCQgASgCEhYKDm1pbkxldmVsSGVh",
            "bHRoGCUgASgFEhYKDm1heExldmVsSGVhbHRoGCYgASgFEhQKDG1pbkxldmVs",
            "TWFuYRgnIAEoBRIUCgxtYXhMZXZlbE1hbmEYKCABKAUSEwoLbWluTWVsZWVE",
            "bWcYKSABKAISEwoLbWF4TWVsZWVEbWcYKiABKAISFAoMbWluUmFuZ2VkRG1n",
            "GCsgASgCEhQKDG1heFJhbmdlZERtZxgsIAEoAhINCgVhcm1vchgtIAEoBRIY",
            "ChBtZWxlZUF0dGFja1Bvd2VyGC4gASgFEhkKEXJhbmdlZEF0dGFja1Bvd2Vy",
            "GC8gASgFEhsKE21lbGVlQmFzZUF0dGFja1RpbWUYMCABKAUSHAoUcmFuZ2Vk",
            "QmFzZUF0dGFja1RpbWUYMSABKAUSFAoMZGFtYWdlU2Nob29sGDIgASgNEhMK",
            "C21pbkxvb3RHb2xkGDMgASgFEhMKC21heExvb3RHb2xkGDQgASgFEg4KBmxv",
            "b3RJZBg1IAEoBRIYChBwaWNrcG9ja2V0TG9vdElkGDYgASgFEhYKDnNraW5u",
            "aW5nTG9vdElkGDcgASgFEhMKC2tpbGxDcmVkaXQxGDggASgFEhMKC2tpbGxD",
            "cmVkaXQyGDkgASgFEhoKEm1lY2hhbmljSW1tdW5lTWFzaxg6IAEoBRIYChBz",
            "Y2hvb2xJbW11bmVNYXNrGDsgASgFEkAKC3Jlc2lzdGFuY2VzGDwgAygLMisu",
            "ZGF0YWJhc2UuQ3JlYXR1cmVUZW1wbGF0ZS5SZXNpc3RhbmNlc0VudHJ5EhYK",
            "DnBldFNwZWxsRGF0YUlkGEIgASgFEhQKDG1vdmVtZW50VHlwZRhDIAEoDRIT",
            "Cgt0cmFpbmVyVHlwZRhEIAEoDRIUCgx0cmFpbmVyU3BlbGwYRSABKAUSFAoM",
            "dHJhaW5lckNsYXNzGEYgASgNEhMKC3RyYWluZXJSYWNlGEcgASgNEhkKEXRy",
            "YWluZXJUZW1wbGF0ZUlkGEggASgFEhgKEHZlbmRvclRlbXBsYXRlSWQYSSAB",
            "KAUSFAoMZ29zc2lwTWVudUlkGEogASgFEh0KFWludGVyYWN0aW9uUGF1c2VU",
            "aW1lchhLIAEoBRIeChZ2aXNpYmlsaXR5RGlzdGFuY2VUeXBlGEwgASgNEhMK",
            "C2NvcnBzZURlY2F5GE0gASgFEhEKCXNwZWxsTGlzdBhOIAEoBRIbChNlcXVp",
            "cG1lbnRUZW1wbGF0ZUlkGE8gASgFEhAKCGNpdmlsaWFuGFAgASgNEg4KBmFp",
            "TmFtZRhRIAEoCRISCgpzY3JpcHROYW1lGFIgASgJGjIKEFJlc2lzdGFuY2Vz",
            "RW50cnkSCwoDa2V5GAEgASgNEg0KBXZhbHVlGAIgASgNOgI4ASKiAgoKR2Ft",
            "ZU9iamVjdBIMCgRndWlkGAEgASgDEgoKAmlkGAIgASgFEgsKA21hcBgDIAEo",
            "BRIRCglzcGF3bk1hc2sYBCABKA0SIAoIcG9zaXRpb24YBSABKAsyDi5nYW1l",
            "LlBvc2l0aW9uEhMKC29yaWVudGF0aW9uGAYgASgCEhEKCXJvdGF0aW9uMBgH",
            "IAEoAhIRCglyb3RhdGlvbjEYCCABKAISEQoJcm90YXRpb24yGAkgASgCEhEK",
            "CXJvdGF0aW9uMxgKIAEoAhIYChBzcGF3blRpbWVTZWNzTWluGAsgASgFEhgK",
            "EHNwYXduVGltZVNlY3NNYXgYDCABKAUSFAoMYW5pbVByb2dyZXNzGA0gASgN",
            "Eg0KBXN0YXRlGA4gASgNIuISCgxJdGVtVGVtcGxhdGUSDQoFZW50cnkYASAB",
            "KAUSDQoFcGF0Y2gYAiABKAUSDQoFY2xhc3MYAyABKAUSEAoIc3ViY2xhc3MY",
            "BCABKAUSDAoEbmFtZRgFIAEoCRIRCglkaXNwbGF5SWQYBiABKAUSDwoHcXVh",
            "bGl0eRgHIAEoBRINCgVmbGFncxgIIAEoBRIQCghidXlDb3VudBgJIAEoBRIQ",
            "CghidXlQcmljZRgKIAEoBRIRCglzZWxsUHJpY2UYCyABKAUSFQoNaW52ZW50",
            "b3J5VHlwZRgMIAEoBRIWCg5hbGxvd2FibGVDbGFzcxgNIAEoBRIVCg1hbGxv",
            "d2FibGVSYWNlGA4gASgFEhEKCWl0ZW1MZXZlbBgPIAEoBRIVCg1yZXF1aXJl",
            "ZExldmVsGBAgASgFEhUKDXJlcXVpcmVkU2tpbGwYESABKAUSGQoRcmVxdWly",
            "ZWRTa2lsbFJhbmsYEiABKAUSFQoNcmVxdWlyZWRTcGVsbBgTIAEoBRIZChFy",
            "ZXF1aXJlZEhvbm9yUmFuaxgUIAEoBRIYChByZXF1aXJlZENpdHlSYW5rGBUg",
            "ASgFEiEKGXJlcXVpcmVkUmVwdXRhdGlvbkZhY3Rpb24YFiABKAUSHgoWcmVx",
            "dWlyZWRSZXB1dGF0aW9uUmFuaxgXIAEoBRIQCghtYXhDb3VudBgYIAEoBRIR",
            "CglzdGFja2FibGUYGSABKAUSFgoOY29udGFpbmVyU2xvdHMYGiABKAUSMAoF",
            "c3RhdHMYGyADKAsyIS5kYXRhYmFzZS5JdGVtVGVtcGxhdGUuU3RhdHNFbnRy",
            "eRIPCgdkbWdNaW4xGC8gASgCEg8KB2RtZ01heDEYMCABKAISEAoIZG1nVHlw",
            "ZTEYMSABKAUSDwoHZG1nTWluMhgyIAEoAhIPCgdkbWdNYXgyGDMgASgCEhAK",
            "CGRtZ1R5cGUyGDQgASgFEg8KB2RtZ01pbjMYNSABKAISDwoHZG1nTWF4Mxg2",
            "IAEoAhIQCghkbWdUeXBlMxg3IAEoBRIPCgdkbWdNaW40GDggASgCEg8KB2Rt",
            "Z01heDQYOSABKAISEAoIZG1nVHlwZTQYOiABKAUSDwoHZG1nTWluNRg7IAEo",
            "AhIPCgdkbWdNYXg1GDwgASgCEhAKCGRtZ1R5cGU1GD0gASgFEg0KBWFybW9y",
            "GD4gASgFEjwKC3Jlc2lzdGFuY2VzGD8gAygLMicuZGF0YWJhc2UuSXRlbVRl",
            "bXBsYXRlLlJlc2lzdGFuY2VzRW50cnkSDQoFZGVsYXkYRSABKAUSEAoIYW1t",
            "b1R5cGUYRiABKAUSFgoOcmFuZ2VkTW9kUmFuZ2UYRyABKAISEAoIc3BlbGxJ",
            "ZDEYSCABKAUSFQoNc3BlbGxUcmlnZ2VyMRhJIAEoBRIVCg1zcGVsbENoYXJn",
            "ZXMxGEogASgFEhUKDXNwZWxsUHBtUmF0ZTEYSyABKAISFgoOc3BlbGxDb29s",
            "ZG93bjEYTCABKAUSFgoOc3BlbGxDYXRlZ29yeTEYTSABKAUSHgoWc3BlbGxD",
            "YXRlZ29yeUNvb2xkb3duMRhOIAEoBRIQCghzcGVsbElkMhhPIAEoBRIVCg1z",
            "cGVsbFRyaWdnZXIyGFAgASgFEhUKDXNwZWxsQ2hhcmdlczIYUSABKAUSFQoN",
            "c3BlbGxQcG1SYXRlMhhSIAEoAhIWCg5zcGVsbENvb2xkb3duMhhTIAEoBRIW",
            "Cg5zcGVsbENhdGVnb3J5MhhUIAEoBRIeChZzcGVsbENhdGVnb3J5Q29vbGRv",
            "d24yGFUgASgFEhAKCHNwZWxsSWQzGFYgASgFEhUKDXNwZWxsVHJpZ2dlcjMY",
            "VyABKAUSFQoNc3BlbGxDaGFyZ2VzMxhYIAEoBRIVCg1zcGVsbFBwbVJhdGUz",
            "GFkgASgCEhYKDnNwZWxsQ29vbGRvd24zGFogASgFEhYKDnNwZWxsQ2F0ZWdv",
            "cnkzGFsgASgFEh4KFnNwZWxsQ2F0ZWdvcnlDb29sZG93bjMYXCABKAUSEAoI",
            "c3BlbGxJZDQYXSABKAUSFQoNc3BlbGxUcmlnZ2VyNBheIAEoBRIVCg1zcGVs",
            "bENoYXJnZXM0GF8gASgFEhUKDXNwZWxsUHBtUmF0ZTQYYCABKAISFgoOc3Bl",
            "bGxDb29sZG93bjQYYSABKAUSFgoOc3BlbGxDYXRlZ29yeTQYYiABKAUSHgoW",
            "c3BlbGxDYXRlZ29yeUNvb2xkb3duNBhjIAEoBRIQCghzcGVsbElkNRhkIAEo",
            "BRIVCg1zcGVsbFRyaWdnZXI1GGUgASgFEhUKDXNwZWxsQ2hhcmdlczUYZiAB",
            "KAUSFQoNc3BlbGxQcG1SYXRlNRhnIAEoAhIWCg5zcGVsbENvb2xkb3duNRho",
            "IAEoBRIWCg5zcGVsbENhdGVnb3J5NRhpIAEoBRIeChZzcGVsbENhdGVnb3J5",
            "Q29vbGRvd241GGogASgFEg8KB2JvbmRpbmcYayABKAUSEwoLZGVzY3JpcHRp",
            "b24YbCABKAkSEAoIcGFnZVRleHQYbSABKAUSEgoKbGFuZ3VhZ2VJRBhuIAEo",
            "BRIUCgxwYWdlTWF0ZXJpYWwYbyABKAUSEgoKc3RhcnRRdWVzdBhwIAEoBRIO",
            "CgZsb2NrSWQYcSABKAUSEAoIbWF0ZXJpYWwYciABKAUSDgoGc2hlYXRoGHMg",
            "ASgFEhYKDnJhbmRvbVByb3BlcnR5GHQgASgFEg0KBWJsb2NrGHUgASgFEg8K",
            "B2l0ZW1TZXQYdiABKAUSFQoNbWF4RHVyYWJpbGl0eRh3IAEoBRIMCgRhcmVh",
            "GHggASgFEgsKA21hcBh5IAEoBRIRCgliYWdGYW1pbHkYeiABKAUSEgoKc2Ny",
            "aXB0TmFtZRh7IAEoCRIUCgxkaXNlbmNoYW50SUQYfCABKAUSEAoIZm9vZFR5",
            "cGUYfSABKAUSFAoMbWluTW9uZXlMb290GH4gASgFEhQKDG1heE1vbmV5TG9v",
            "dBh/IAEoBRIRCghkdXJhdGlvbhiAASABKAUSEwoKZXh0cmFGbGFncxiBASAB",
            "KAUSFwoOb3RoZXJUZWFtRW50cnkYggEgASgFGiwKClN0YXRzRW50cnkSCwoD",
            "a2V5GAEgASgNEg0KBXZhbHVlGAIgASgNOgI4ARoyChBSZXNpc3RhbmNlc0Vu",
            "dHJ5EgsKA2tleRgBIAEoDRINCgV2YWx1ZRgCIAEoDToCOAEihgEKDk5wY1Zl",
            "bmRvckVudHJ5Eg0KBWVudHJ5GAEgASgFEgwKBGl0ZW0YAiABKAUSEAoIbWF4",
            "Q291bnQYAyABKAUSEAoIaW5jclRpbWUYBCABKAUSDAoEc2xvdBgFIAEoBRIT",
            "Cgtjb25kaXRpb25JZBgGIAEoBRIQCghjb21tZW50cxgHIAEoCSLMGAoNUXVl",
            "c3RUZW1wbGF0ZRINCgVlbnRyeRgBIAEoBRIOCgZtZXRob2QYAiABKAUSEgoK",
            "em9uZU9yU29ydBgDIAEoBRIQCghtaW5MZXZlbBgEIAEoBRIQCghtYXhMZXZl",
            "bBgFIAEoBRISCgpxdWVzdExldmVsGAYgASgFEgwKBHR5cGUYByABKAUSFwoP",
            "cmVxdWlyZWRDbGFzc2VzGAggASgFEhUKDXJlcXVpcmVkUmFjZXMYCSABKAUS",
            "FQoNcmVxdWlyZWRTa2lsbBgKIAEoBRIaChJyZXF1aXJlZFNraWxsVmFsdWUY",
            "CyABKAUSGQoRcmVxdWlyZWRDb25kaXRpb24YDCABKAUSGwoTcmVwT2JqZWN0",
            "aXZlRmFjdGlvbhgNIAEoBRIZChFyZXBPYmplY3RpdmVWYWx1ZRgOIAEoBRId",
            "ChVyZXF1aXJlZE1pblJlcEZhY3Rpb24YDyABKAUSGwoTcmVxdWlyZWRNaW5S",
            "ZXBWYWx1ZRgQIAEoBRIdChVyZXF1aXJlZE1heFJlcEZhY3Rpb24YESABKAUS",
            "GwoTcmVxdWlyZWRNYXhSZXBWYWx1ZRgSIAEoBRIYChBzdWdnZXN0ZWRQbGF5",
            "ZXJzGBMgASgFEhEKCWxpbWl0VGltZRgUIAEoBRISCgpxdWVzdEZsYWdzGBUg",
            "ASgFEhQKDHNwZWNpYWxGbGFncxgWIAEoBRITCgtwcmV2UXVlc3RJZBgXIAEo",
            "BRITCgtuZXh0UXVlc3RJZBgYIAEoBRIWCg5leGNsdXNpdmVHcm91cBgZIAEo",
            "BRIcChRicmVhZGNydW1iRm9yUXVlc3RJZBgaIAEoBRIYChBuZXh0UXVlc3RJ",
            "bkNoYWluGBsgASgFEhEKCXNyY0l0ZW1JZBgcIAEoBRIUCgxzcmNJdGVtQ291",
            "bnQYHSABKAUSEAoIc3JjU3BlbGwYHiABKAUSDQoFdGl0bGUYHyABKAkSDwoH",
            "ZGV0YWlscxggIAEoCRISCgpvYmplY3RpdmVzGCEgASgJEhcKD29mZmVyUmV3",
            "YXJkVGV4dBgiIAEoCRIYChByZXF1ZXN0SXRlbXNUZXh0GCMgASgJEg8KB2Vu",
            "ZFRleHQYJCABKAkSFgoOb2JqZWN0aXZlVGV4dDEYJSABKAkSFgoOb2JqZWN0",
            "aXZlVGV4dDIYJiABKAkSFgoOb2JqZWN0aXZlVGV4dDMYJyABKAkSFgoOb2Jq",
            "ZWN0aXZlVGV4dDQYKCABKAkSEgoKcmVxSXRlbUlkMRgpIAEoBRISCgpyZXFJ",
            "dGVtSWQyGCogASgFEhIKCnJlcUl0ZW1JZDMYKyABKAUSEgoKcmVxSXRlbUlk",
            "NBgsIAEoBRIVCg1yZXFJdGVtQ291bnQxGC0gASgFEhUKDXJlcUl0ZW1Db3Vu",
            "dDIYLiABKAUSFQoNcmVxSXRlbUNvdW50MxgvIAEoBRIVCg1yZXFJdGVtQ291",
            "bnQ0GDAgASgFEhQKDHJlcVNvdXJjZUlkMRgxIAEoBRIUCgxyZXFTb3VyY2VJ",
            "ZDIYMiABKAUSFAoMcmVxU291cmNlSWQzGDMgASgFEhQKDHJlcVNvdXJjZUlk",
            "NBg0IAEoBRIXCg9yZXFTb3VyY2VDb3VudDEYNSABKAUSFwoPcmVxU291cmNl",
            "Q291bnQyGDYgASgFEhcKD3JlcVNvdXJjZUNvdW50Mxg3IAEoBRIXCg9yZXFT",
            "b3VyY2VDb3VudDQYOCABKAUSGgoScmVxQ3JlYXR1cmVPckdPSWQxGDkgASgF",
            "EhoKEnJlcUNyZWF0dXJlT3JHT0lkMhg6IAEoBRIaChJyZXFDcmVhdHVyZU9y",
            "R09JZDMYOyABKAUSGgoScmVxQ3JlYXR1cmVPckdPSWQ0GDwgASgFEh0KFXJl",
            "cUNyZWF0dXJlT3JHT0NvdW50MRg9IAEoBRIdChVyZXFDcmVhdHVyZU9yR09D",
            "b3VudDIYPiABKAUSHQoVcmVxQ3JlYXR1cmVPckdPQ291bnQzGD8gASgFEh0K",
            "FXJlcUNyZWF0dXJlT3JHT0NvdW50NBhAIAEoBRIVCg1yZXFTcGVsbENhc3Qx",
            "GEEgASgFEhUKDXJlcVNwZWxsQ2FzdDIYQiABKAUSFQoNcmVxU3BlbGxDYXN0",
            "MxhDIAEoBRIVCg1yZXFTcGVsbENhc3Q0GEQgASgFEhgKEHJhd0Nob2ljZUl0",
            "ZW1JZDEYRSABKAUSGAoQcmF3Q2hvaWNlSXRlbUlkMhhGIAEoBRIYChByYXdD",
            "aG9pY2VJdGVtSWQzGEcgASgFEhgKEHJhd0Nob2ljZUl0ZW1JZDQYSCABKAUS",
            "GAoQcmF3Q2hvaWNlSXRlbUlkNRhJIAEoBRIYChByYXdDaG9pY2VJdGVtSWQ2",
            "GEogASgFEhsKE3Jhd0Nob2ljZUl0ZW1Db3VudDEYSyABKAUSGwoTcmF3Q2hv",
            "aWNlSXRlbUNvdW50MhhMIAEoBRIbChNyYXdDaG9pY2VJdGVtQ291bnQzGE0g",
            "ASgFEhsKE3Jhd0Nob2ljZUl0ZW1Db3VudDQYTiABKAUSGwoTcmF3Q2hvaWNl",
            "SXRlbUNvdW50NRhPIAEoBRIbChNyYXdDaG9pY2VJdGVtQ291bnQ2GFAgASgF",
            "EhIKCnJhd0l0ZW1JZDEYUSABKAUSEgoKcmF3SXRlbUlkMhhSIAEoBRISCgpy",
            "YXdJdGVtSWQzGFMgASgFEhIKCnJhd0l0ZW1JZDQYVCABKAUSFQoNcmF3SXRl",
            "bUNvdW50MRhVIAEoBRIVCg1yYXdJdGVtQ291bnQyGFYgASgFEhUKDXJhd0l0",
            "ZW1Db3VudDMYVyABKAUSFQoNcmF3SXRlbUNvdW50NBhYIAEoBRIWCg5yYXdS",
            "ZXBGYWN0aW9uMRhZIAEoBRIWCg5yYXdSZXBGYWN0aW9uMhhaIAEoBRIWCg5y",
            "YXdSZXBGYWN0aW9uMxhbIAEoBRIWCg5yYXdSZXBGYWN0aW9uNBhcIAEoBRIW",
            "Cg5yYXdSZXBGYWN0aW9uNRhdIAEoBRIUCgxyYXdSZXBWYWx1ZTEYXiABKAUS",
            "FAoMcmF3UmVwVmFsdWUyGF8gASgFEhQKDHJhd1JlcFZhbHVlMxhgIAEoBRIU",
            "CgxyYXdSZXBWYWx1ZTQYYSABKAUSFAoMcmF3UmVwVmFsdWU1GGIgASgFEhUK",
            "DXJhd09yUmVxTW9uZXkYYyABKAUSGAoQcmF3TW9uZXlNYXhMZXZlbBhkIAEo",
            "DRIQCghyYXdTcGVsbBhlIAEoBRIUCgxyYXdTcGVsbENhc3QYZiABKAUSGQoR",
            "cmF3TWFpbFRlbXBsYXRlSWQYZyABKAUSGAoQcmF3TWFpbERlbGF5U2Vjcxho",
            "IAEoDRISCgpwb2ludE1hcElkGGkgASgFEg4KBnBvaW50WBhqIAEoAhIOCgZw",
            "b2ludFkYayABKAISEAoIcG9pbnRPcHQYbCABKA0SFQoNZGV0YWlsc0Vtb3Rl",
            "MRhtIAEoBRIVCg1kZXRhaWxzRW1vdGUyGG4gASgFEhUKDWRldGFpbHNFbW90",
            "ZTMYbyABKAUSFQoNZGV0YWlsc0Vtb3RlNBhwIAEoBRIaChJkZXRhaWxzRW1v",
            "dGVEZWxheTEYcSABKAUSGgoSZGV0YWlsc0Vtb3RlRGVsYXkyGHIgASgFEhoK",
            "EmRldGFpbHNFbW90ZURlbGF5MxhzIAEoBRIaChJkZXRhaWxzRW1vdGVEZWxh",
            "eTQYdCABKAUSFwoPaW5jb21wbGV0ZUVtb3RlGHUgASgFEhwKFGluY29tcGxl",
            "dGVFbW90ZURlbGF5GHYgASgFEhUKDWNvbXBsZXRlRW1vdGUYdyABKAUSGgoS",
            "Y29tcGxldGVFbW90ZURlbGF5GHggASgFEhkKEW9mZmVyUmV3YXJkRW1vdGUx",
            "GHkgASgFEhkKEW9mZmVyUmV3YXJkRW1vdGUyGHogASgFEhkKEW9mZmVyUmV3",
            "YXJkRW1vdGUzGHsgASgFEhkKEW9mZmVyUmV3YXJkRW1vdGU0GHwgASgFEh4K",
            "Fm9mZmVyUmV3YXJkRW1vdGVEZWxheTEYfSABKAUSHgoWb2ZmZXJSZXdhcmRF",
            "bW90ZURlbGF5Mhh+IAEoBRIeChZvZmZlclJld2FyZEVtb3RlRGVsYXkzGH8g",
            "ASgFEh8KFm9mZmVyUmV3YXJkRW1vdGVEZWxheTQYgAEgASgFEhQKC3N0YXJ0",
            "U2NyaXB0GIEBIAEoBRIXCg5jb21wbGV0ZVNjcmlwdBiCASABKAUqzgEKCVF1",
            "ZXJ5VHlwZRIPCgtHZXRJdGVtQnlJZBAAEh0KGUdldENyZWF0dXJlTW92ZW1l",
            "bnRCeUd1aWQQARIjCh9HZXRDcmVhdHVyZUdyb3VwaW5nQnlNZW1iZXJHdWlk",
            "EAISGwoXR2V0Q3JlYXR1cmVUZW1wbGF0ZUJ5SWQQAxIUChBHZXRDcmVhdHVy",
            "ZXNCeUlkEAQSFwoTR2V0Q3JlYXR1cmVzQnlNYXBJZBAFEiAKHEdldENyZWF0",
            "dXJlRXF1aXBUZW1wbGF0ZUJ5SWQQBmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Game.GameReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Database.QueryType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Database.DatabaseRequest), global::Database.DatabaseRequest.Parser, new[]{ "QueryType", "QueryParam1", "QueryParam2", "QueryParam3", "QueryParam4" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Database.DatabaseResponse), global::Database.DatabaseResponse.Parser, new[]{ "AreaTriggerTeleports", "CreatureGroupings", "CreatureMovement", "CreatureMovementTemplate", "GameObjects", "Creatures", "CreatureEquipTemplate", "ItemTemplate", "NpcVendorEntry", "QuestTemplate", "CreatureTemplate" }, new[]{ "CreatureEquipTemplate", "ItemTemplate", "NpcVendorEntry", "QuestTemplate", "CreatureTemplate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Database.AreaTriggerTeleport), global::Database.AreaTriggerTeleport.Parser, new[]{ "Id", "Name", "RequiredLevel", "RequiredItem", "RequiredItem2", "RequiredQuestDone", "TargetMap", "Position", "TargetOrientation", "StatusFailedText", "ConditionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Database.Creature), global::Database.Creature.Parser, new[]{ "Guid", "Name", "Id", "Map", "ZoneId", "AreaId", "Position", "Orientation", "SpawnTimeSecsMin", "SpawnTimeSecsMax", "SpawnDist", "CurrentWaypointId", "SpawnType", "RespawnTime", "MovementType", "WanderDistance", "SearchRange", "EquipmentId", "ScriptName", "Comments", "SpawnMask", "ModelId", "CurrentWaypoint", "CurHealth", "CurMana", "DeathState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Database.CreatureEquipTemplate), global::Database.CreatureEquipTemplate.Parser, new[]{ "Entry", "EquipEntry1", "EquipEntry2", "EquipEntry3" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Database.CreatureGrouping), global::Database.CreatureGrouping.Parser, new[]{ "LeaderGuid", "MemberGuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Database.CreatureMovement), global::Database.CreatureMovement.Parser, new[]{ "Id", "Point", "Position", "Orientation", "WaitTime", "ScriptId", "Comment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Database.CreatureMovementTemplate), global::Database.CreatureMovementTemplate.Parser, new[]{ "Entry", "PathId", "Point", "Position", "Orientation", "WaitTime", "ScriptId", "Comment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Database.CreatureTemplate), global::Database.CreatureTemplate.Parser, new[]{ "Entry", "Name", "SubName", "MinLevel", "MaxLevel", "ModelId1", "ModelId2", "ModelId3", "ModelId4", "Faction", "Scale", "Family", "CreatureType", "InhabitType", "RegenerateStats", "RacialLeader", "NpcFlags", "UnitFlags", "DynamicFlags", "ExtraFlags", "CreatureTypeFlags", "SpeedWalk", "SpeedRun", "Detection", "CallForHelp", "Pursuit", "Leash", "Timeout", "UnitClass", "Rank", "HealthMultiplier", "PowerMultiplier", "DamageMultiplier", "DamageVariance", "ArmorMultiplier", "ExperienceMultiplier", "MinLevelHealth", "MaxLevelHealth", "MinLevelMana", "MaxLevelMana", "MinMeleeDmg", "MaxMeleeDmg", "MinRangedDmg", "MaxRangedDmg", "Armor", "MeleeAttackPower", "RangedAttackPower", "MeleeBaseAttackTime", "RangedBaseAttackTime", "DamageSchool", "MinLootGold", "MaxLootGold", "LootId", "PickpocketLootId", "SkinningLootId", "KillCredit1", "KillCredit2", "MechanicImmuneMask", "SchoolImmuneMask", "Resistances", "PetSpellDataId", "MovementType", "TrainerType", "TrainerSpell", "TrainerClass", "TrainerRace", "TrainerTemplateId", "VendorTemplateId", "GossipMenuId", "InteractionPauseTimer", "VisibilityDistanceType", "CorpseDecay", "SpellList", "EquipmentTemplateId", "Civilian", "AiName", "ScriptName" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Database.GameObject), global::Database.GameObject.Parser, new[]{ "Guid", "Id", "Map", "SpawnMask", "Position", "Orientation", "Rotation0", "Rotation1", "Rotation2", "Rotation3", "SpawnTimeSecsMin", "SpawnTimeSecsMax", "AnimProgress", "State" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Database.ItemTemplate), global::Database.ItemTemplate.Parser, new[]{ "Entry", "Patch", "Class", "Subclass", "Name", "DisplayId", "Quality", "Flags", "BuyCount", "BuyPrice", "SellPrice", "InventoryType", "AllowableClass", "AllowableRace", "ItemLevel", "RequiredLevel", "RequiredSkill", "RequiredSkillRank", "RequiredSpell", "RequiredHonorRank", "RequiredCityRank", "RequiredReputationFaction", "RequiredReputationRank", "MaxCount", "Stackable", "ContainerSlots", "Stats", "DmgMin1", "DmgMax1", "DmgType1", "DmgMin2", "DmgMax2", "DmgType2", "DmgMin3", "DmgMax3", "DmgType3", "DmgMin4", "DmgMax4", "DmgType4", "DmgMin5", "DmgMax5", "DmgType5", "Armor", "Resistances", "Delay", "AmmoType", "RangedModRange", "SpellId1", "SpellTrigger1", "SpellCharges1", "SpellPpmRate1", "SpellCooldown1", "SpellCategory1", "SpellCategoryCooldown1", "SpellId2", "SpellTrigger2", "SpellCharges2", "SpellPpmRate2", "SpellCooldown2", "SpellCategory2", "SpellCategoryCooldown2", "SpellId3", "SpellTrigger3", "SpellCharges3", "SpellPpmRate3", "SpellCooldown3", "SpellCategory3", "SpellCategoryCooldown3", "SpellId4", "SpellTrigger4", "SpellCharges4", "SpellPpmRate4", "SpellCooldown4", "SpellCategory4", "SpellCategoryCooldown4", "SpellId5", "SpellTrigger5", "SpellCharges5", "SpellPpmRate5", "SpellCooldown5", "SpellCategory5", "SpellCategoryCooldown5", "Bonding", "Description", "PageText", "LanguageID", "PageMaterial", "StartQuest", "LockId", "Material", "Sheath", "RandomProperty", "Block", "ItemSet", "MaxDurability", "Area", "Map", "BagFamily", "ScriptName", "DisenchantID", "FoodType", "MinMoneyLoot", "MaxMoneyLoot", "Duration", "ExtraFlags", "OtherTeamEntry" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Database.NpcVendorEntry), global::Database.NpcVendorEntry.Parser, new[]{ "Entry", "Item", "MaxCount", "IncrTime", "Slot", "ConditionId", "Comments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Database.QuestTemplate), global::Database.QuestTemplate.Parser, new[]{ "Entry", "Method", "ZoneOrSort", "MinLevel", "MaxLevel", "QuestLevel", "Type", "RequiredClasses", "RequiredRaces", "RequiredSkill", "RequiredSkillValue", "RequiredCondition", "RepObjectiveFaction", "RepObjectiveValue", "RequiredMinRepFaction", "RequiredMinRepValue", "RequiredMaxRepFaction", "RequiredMaxRepValue", "SuggestedPlayers", "LimitTime", "QuestFlags", "SpecialFlags", "PrevQuestId", "NextQuestId", "ExclusiveGroup", "BreadcrumbForQuestId", "NextQuestInChain", "SrcItemId", "SrcItemCount", "SrcSpell", "Title", "Details", "Objectives", "OfferRewardText", "RequestItemsText", "EndText", "ObjectiveText1", "ObjectiveText2", "ObjectiveText3", "ObjectiveText4", "ReqItemId1", "ReqItemId2", "ReqItemId3", "ReqItemId4", "ReqItemCount1", "ReqItemCount2", "ReqItemCount3", "ReqItemCount4", "ReqSourceId1", "ReqSourceId2", "ReqSourceId3", "ReqSourceId4", "ReqSourceCount1", "ReqSourceCount2", "ReqSourceCount3", "ReqSourceCount4", "ReqCreatureOrGOId1", "ReqCreatureOrGOId2", "ReqCreatureOrGOId3", "ReqCreatureOrGOId4", "ReqCreatureOrGOCount1", "ReqCreatureOrGOCount2", "ReqCreatureOrGOCount3", "ReqCreatureOrGOCount4", "ReqSpellCast1", "ReqSpellCast2", "ReqSpellCast3", "ReqSpellCast4", "RawChoiceItemId1", "RawChoiceItemId2", "RawChoiceItemId3", "RawChoiceItemId4", "RawChoiceItemId5", "RawChoiceItemId6", "RawChoiceItemCount1", "RawChoiceItemCount2", "RawChoiceItemCount3", "RawChoiceItemCount4", "RawChoiceItemCount5", "RawChoiceItemCount6", "RawItemId1", "RawItemId2", "RawItemId3", "RawItemId4", "RawItemCount1", "RawItemCount2", "RawItemCount3", "RawItemCount4", "RawRepFaction1", "RawRepFaction2", "RawRepFaction3", "RawRepFaction4", "RawRepFaction5", "RawRepValue1", "RawRepValue2", "RawRepValue3", "RawRepValue4", "RawRepValue5", "RawOrReqMoney", "RawMoneyMaxLevel", "RawSpell", "RawSpellCast", "RawMailTemplateId", "RawMailDelaySecs", "PointMapId", "PointX", "PointY", "PointOpt", "DetailsEmote1", "DetailsEmote2", "DetailsEmote3", "DetailsEmote4", "DetailsEmoteDelay1", "DetailsEmoteDelay2", "DetailsEmoteDelay3", "DetailsEmoteDelay4", "IncompleteEmote", "IncompleteEmoteDelay", "CompleteEmote", "CompleteEmoteDelay", "OfferRewardEmote1", "OfferRewardEmote2", "OfferRewardEmote3", "OfferRewardEmote4", "OfferRewardEmoteDelay1", "OfferRewardEmoteDelay2", "OfferRewardEmoteDelay3", "OfferRewardEmoteDelay4", "StartScript", "CompleteScript" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum QueryType {
    [pbr::OriginalName("GetItemById")] GetItemById = 0,
    [pbr::OriginalName("GetCreatureMovementByGuid")] GetCreatureMovementByGuid = 1,
    [pbr::OriginalName("GetCreatureGroupingByMemberGuid")] GetCreatureGroupingByMemberGuid = 2,
    [pbr::OriginalName("GetCreatureTemplateById")] GetCreatureTemplateById = 3,
    [pbr::OriginalName("GetCreaturesById")] GetCreaturesById = 4,
    [pbr::OriginalName("GetCreaturesByMapId")] GetCreaturesByMapId = 5,
    [pbr::OriginalName("GetCreatureEquipTemplateById")] GetCreatureEquipTemplateById = 6,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DatabaseRequest : pb::IMessage<DatabaseRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DatabaseRequest> _parser = new pb::MessageParser<DatabaseRequest>(() => new DatabaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DatabaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Database.DatabaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseRequest(DatabaseRequest other) : this() {
      queryType_ = other.queryType_;
      queryParam1_ = other.queryParam1_;
      queryParam2_ = other.queryParam2_;
      queryParam3_ = other.queryParam3_;
      queryParam4_ = other.queryParam4_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseRequest Clone() {
      return new DatabaseRequest(this);
    }

    /// <summary>Field number for the "queryType" field.</summary>
    public const int QueryTypeFieldNumber = 1;
    private global::Database.QueryType queryType_ = global::Database.QueryType.GetItemById;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Database.QueryType QueryType {
      get { return queryType_; }
      set {
        queryType_ = value;
      }
    }

    /// <summary>Field number for the "queryParam1" field.</summary>
    public const int QueryParam1FieldNumber = 2;
    private string queryParam1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string QueryParam1 {
      get { return queryParam1_; }
      set {
        queryParam1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "queryParam2" field.</summary>
    public const int QueryParam2FieldNumber = 3;
    private string queryParam2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string QueryParam2 {
      get { return queryParam2_; }
      set {
        queryParam2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "queryParam3" field.</summary>
    public const int QueryParam3FieldNumber = 4;
    private string queryParam3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string QueryParam3 {
      get { return queryParam3_; }
      set {
        queryParam3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "queryParam4" field.</summary>
    public const int QueryParam4FieldNumber = 5;
    private string queryParam4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string QueryParam4 {
      get { return queryParam4_; }
      set {
        queryParam4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DatabaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DatabaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QueryType != other.QueryType) return false;
      if (QueryParam1 != other.QueryParam1) return false;
      if (QueryParam2 != other.QueryParam2) return false;
      if (QueryParam3 != other.QueryParam3) return false;
      if (QueryParam4 != other.QueryParam4) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (QueryType != global::Database.QueryType.GetItemById) hash ^= QueryType.GetHashCode();
      if (QueryParam1.Length != 0) hash ^= QueryParam1.GetHashCode();
      if (QueryParam2.Length != 0) hash ^= QueryParam2.GetHashCode();
      if (QueryParam3.Length != 0) hash ^= QueryParam3.GetHashCode();
      if (QueryParam4.Length != 0) hash ^= QueryParam4.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (QueryType != global::Database.QueryType.GetItemById) {
        output.WriteRawTag(8);
        output.WriteEnum((int) QueryType);
      }
      if (QueryParam1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(QueryParam1);
      }
      if (QueryParam2.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(QueryParam2);
      }
      if (QueryParam3.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(QueryParam3);
      }
      if (QueryParam4.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(QueryParam4);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (QueryType != global::Database.QueryType.GetItemById) {
        output.WriteRawTag(8);
        output.WriteEnum((int) QueryType);
      }
      if (QueryParam1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(QueryParam1);
      }
      if (QueryParam2.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(QueryParam2);
      }
      if (QueryParam3.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(QueryParam3);
      }
      if (QueryParam4.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(QueryParam4);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (QueryType != global::Database.QueryType.GetItemById) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) QueryType);
      }
      if (QueryParam1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryParam1);
      }
      if (QueryParam2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryParam2);
      }
      if (QueryParam3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryParam3);
      }
      if (QueryParam4.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryParam4);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DatabaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.QueryType != global::Database.QueryType.GetItemById) {
        QueryType = other.QueryType;
      }
      if (other.QueryParam1.Length != 0) {
        QueryParam1 = other.QueryParam1;
      }
      if (other.QueryParam2.Length != 0) {
        QueryParam2 = other.QueryParam2;
      }
      if (other.QueryParam3.Length != 0) {
        QueryParam3 = other.QueryParam3;
      }
      if (other.QueryParam4.Length != 0) {
        QueryParam4 = other.QueryParam4;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QueryType = (global::Database.QueryType) input.ReadEnum();
            break;
          }
          case 18: {
            QueryParam1 = input.ReadString();
            break;
          }
          case 26: {
            QueryParam2 = input.ReadString();
            break;
          }
          case 34: {
            QueryParam3 = input.ReadString();
            break;
          }
          case 42: {
            QueryParam4 = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QueryType = (global::Database.QueryType) input.ReadEnum();
            break;
          }
          case 18: {
            QueryParam1 = input.ReadString();
            break;
          }
          case 26: {
            QueryParam2 = input.ReadString();
            break;
          }
          case 34: {
            QueryParam3 = input.ReadString();
            break;
          }
          case 42: {
            QueryParam4 = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DatabaseResponse : pb::IMessage<DatabaseResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DatabaseResponse> _parser = new pb::MessageParser<DatabaseResponse>(() => new DatabaseResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DatabaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Database.DatabaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseResponse(DatabaseResponse other) : this() {
      areaTriggerTeleports_ = other.areaTriggerTeleports_.Clone();
      creatureGroupings_ = other.creatureGroupings_.Clone();
      creatureMovement_ = other.creatureMovement_.Clone();
      creatureMovementTemplate_ = other.creatureMovementTemplate_.Clone();
      gameObjects_ = other.gameObjects_.Clone();
      creatures_ = other.creatures_.Clone();
      creatureEquipTemplate_ = other.creatureEquipTemplate_ != null ? other.creatureEquipTemplate_.Clone() : null;
      itemTemplate_ = other.itemTemplate_ != null ? other.itemTemplate_.Clone() : null;
      npcVendorEntry_ = other.npcVendorEntry_ != null ? other.npcVendorEntry_.Clone() : null;
      questTemplate_ = other.questTemplate_ != null ? other.questTemplate_.Clone() : null;
      creatureTemplate_ = other.creatureTemplate_ != null ? other.creatureTemplate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseResponse Clone() {
      return new DatabaseResponse(this);
    }

    /// <summary>Field number for the "areaTriggerTeleports" field.</summary>
    public const int AreaTriggerTeleportsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Database.AreaTriggerTeleport> _repeated_areaTriggerTeleports_codec
        = pb::FieldCodec.ForMessage(10, global::Database.AreaTriggerTeleport.Parser);
    private readonly pbc::RepeatedField<global::Database.AreaTriggerTeleport> areaTriggerTeleports_ = new pbc::RepeatedField<global::Database.AreaTriggerTeleport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Database.AreaTriggerTeleport> AreaTriggerTeleports {
      get { return areaTriggerTeleports_; }
    }

    /// <summary>Field number for the "creatureGroupings" field.</summary>
    public const int CreatureGroupingsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Database.CreatureGrouping> _repeated_creatureGroupings_codec
        = pb::FieldCodec.ForMessage(18, global::Database.CreatureGrouping.Parser);
    private readonly pbc::RepeatedField<global::Database.CreatureGrouping> creatureGroupings_ = new pbc::RepeatedField<global::Database.CreatureGrouping>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Database.CreatureGrouping> CreatureGroupings {
      get { return creatureGroupings_; }
    }

    /// <summary>Field number for the "creatureMovement" field.</summary>
    public const int CreatureMovementFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Database.CreatureMovement> _repeated_creatureMovement_codec
        = pb::FieldCodec.ForMessage(26, global::Database.CreatureMovement.Parser);
    private readonly pbc::RepeatedField<global::Database.CreatureMovement> creatureMovement_ = new pbc::RepeatedField<global::Database.CreatureMovement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Database.CreatureMovement> CreatureMovement {
      get { return creatureMovement_; }
    }

    /// <summary>Field number for the "creatureMovementTemplate" field.</summary>
    public const int CreatureMovementTemplateFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Database.CreatureMovementTemplate> _repeated_creatureMovementTemplate_codec
        = pb::FieldCodec.ForMessage(34, global::Database.CreatureMovementTemplate.Parser);
    private readonly pbc::RepeatedField<global::Database.CreatureMovementTemplate> creatureMovementTemplate_ = new pbc::RepeatedField<global::Database.CreatureMovementTemplate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Database.CreatureMovementTemplate> CreatureMovementTemplate {
      get { return creatureMovementTemplate_; }
    }

    /// <summary>Field number for the "gameObjects" field.</summary>
    public const int GameObjectsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Database.GameObject> _repeated_gameObjects_codec
        = pb::FieldCodec.ForMessage(42, global::Database.GameObject.Parser);
    private readonly pbc::RepeatedField<global::Database.GameObject> gameObjects_ = new pbc::RepeatedField<global::Database.GameObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Database.GameObject> GameObjects {
      get { return gameObjects_; }
    }

    /// <summary>Field number for the "creatures" field.</summary>
    public const int CreaturesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Database.Creature> _repeated_creatures_codec
        = pb::FieldCodec.ForMessage(50, global::Database.Creature.Parser);
    private readonly pbc::RepeatedField<global::Database.Creature> creatures_ = new pbc::RepeatedField<global::Database.Creature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Database.Creature> Creatures {
      get { return creatures_; }
    }

    /// <summary>Field number for the "creatureEquipTemplate" field.</summary>
    public const int CreatureEquipTemplateFieldNumber = 7;
    private global::Database.CreatureEquipTemplate creatureEquipTemplate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Database.CreatureEquipTemplate CreatureEquipTemplate {
      get { return creatureEquipTemplate_; }
      set {
        creatureEquipTemplate_ = value;
      }
    }

    /// <summary>Field number for the "itemTemplate" field.</summary>
    public const int ItemTemplateFieldNumber = 8;
    private global::Database.ItemTemplate itemTemplate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Database.ItemTemplate ItemTemplate {
      get { return itemTemplate_; }
      set {
        itemTemplate_ = value;
      }
    }

    /// <summary>Field number for the "npcVendorEntry" field.</summary>
    public const int NpcVendorEntryFieldNumber = 9;
    private global::Database.NpcVendorEntry npcVendorEntry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Database.NpcVendorEntry NpcVendorEntry {
      get { return npcVendorEntry_; }
      set {
        npcVendorEntry_ = value;
      }
    }

    /// <summary>Field number for the "questTemplate" field.</summary>
    public const int QuestTemplateFieldNumber = 10;
    private global::Database.QuestTemplate questTemplate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Database.QuestTemplate QuestTemplate {
      get { return questTemplate_; }
      set {
        questTemplate_ = value;
      }
    }

    /// <summary>Field number for the "creatureTemplate" field.</summary>
    public const int CreatureTemplateFieldNumber = 11;
    private global::Database.CreatureTemplate creatureTemplate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Database.CreatureTemplate CreatureTemplate {
      get { return creatureTemplate_; }
      set {
        creatureTemplate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DatabaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DatabaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!areaTriggerTeleports_.Equals(other.areaTriggerTeleports_)) return false;
      if(!creatureGroupings_.Equals(other.creatureGroupings_)) return false;
      if(!creatureMovement_.Equals(other.creatureMovement_)) return false;
      if(!creatureMovementTemplate_.Equals(other.creatureMovementTemplate_)) return false;
      if(!gameObjects_.Equals(other.gameObjects_)) return false;
      if(!creatures_.Equals(other.creatures_)) return false;
      if (!object.Equals(CreatureEquipTemplate, other.CreatureEquipTemplate)) return false;
      if (!object.Equals(ItemTemplate, other.ItemTemplate)) return false;
      if (!object.Equals(NpcVendorEntry, other.NpcVendorEntry)) return false;
      if (!object.Equals(QuestTemplate, other.QuestTemplate)) return false;
      if (!object.Equals(CreatureTemplate, other.CreatureTemplate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= areaTriggerTeleports_.GetHashCode();
      hash ^= creatureGroupings_.GetHashCode();
      hash ^= creatureMovement_.GetHashCode();
      hash ^= creatureMovementTemplate_.GetHashCode();
      hash ^= gameObjects_.GetHashCode();
      hash ^= creatures_.GetHashCode();
      if (creatureEquipTemplate_ != null) hash ^= CreatureEquipTemplate.GetHashCode();
      if (itemTemplate_ != null) hash ^= ItemTemplate.GetHashCode();
      if (npcVendorEntry_ != null) hash ^= NpcVendorEntry.GetHashCode();
      if (questTemplate_ != null) hash ^= QuestTemplate.GetHashCode();
      if (creatureTemplate_ != null) hash ^= CreatureTemplate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      areaTriggerTeleports_.WriteTo(output, _repeated_areaTriggerTeleports_codec);
      creatureGroupings_.WriteTo(output, _repeated_creatureGroupings_codec);
      creatureMovement_.WriteTo(output, _repeated_creatureMovement_codec);
      creatureMovementTemplate_.WriteTo(output, _repeated_creatureMovementTemplate_codec);
      gameObjects_.WriteTo(output, _repeated_gameObjects_codec);
      creatures_.WriteTo(output, _repeated_creatures_codec);
      if (creatureEquipTemplate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreatureEquipTemplate);
      }
      if (itemTemplate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ItemTemplate);
      }
      if (npcVendorEntry_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(NpcVendorEntry);
      }
      if (questTemplate_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(QuestTemplate);
      }
      if (creatureTemplate_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CreatureTemplate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      areaTriggerTeleports_.WriteTo(ref output, _repeated_areaTriggerTeleports_codec);
      creatureGroupings_.WriteTo(ref output, _repeated_creatureGroupings_codec);
      creatureMovement_.WriteTo(ref output, _repeated_creatureMovement_codec);
      creatureMovementTemplate_.WriteTo(ref output, _repeated_creatureMovementTemplate_codec);
      gameObjects_.WriteTo(ref output, _repeated_gameObjects_codec);
      creatures_.WriteTo(ref output, _repeated_creatures_codec);
      if (creatureEquipTemplate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreatureEquipTemplate);
      }
      if (itemTemplate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ItemTemplate);
      }
      if (npcVendorEntry_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(NpcVendorEntry);
      }
      if (questTemplate_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(QuestTemplate);
      }
      if (creatureTemplate_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CreatureTemplate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += areaTriggerTeleports_.CalculateSize(_repeated_areaTriggerTeleports_codec);
      size += creatureGroupings_.CalculateSize(_repeated_creatureGroupings_codec);
      size += creatureMovement_.CalculateSize(_repeated_creatureMovement_codec);
      size += creatureMovementTemplate_.CalculateSize(_repeated_creatureMovementTemplate_codec);
      size += gameObjects_.CalculateSize(_repeated_gameObjects_codec);
      size += creatures_.CalculateSize(_repeated_creatures_codec);
      if (creatureEquipTemplate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureEquipTemplate);
      }
      if (itemTemplate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemTemplate);
      }
      if (npcVendorEntry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NpcVendorEntry);
      }
      if (questTemplate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuestTemplate);
      }
      if (creatureTemplate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureTemplate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DatabaseResponse other) {
      if (other == null) {
        return;
      }
      areaTriggerTeleports_.Add(other.areaTriggerTeleports_);
      creatureGroupings_.Add(other.creatureGroupings_);
      creatureMovement_.Add(other.creatureMovement_);
      creatureMovementTemplate_.Add(other.creatureMovementTemplate_);
      gameObjects_.Add(other.gameObjects_);
      creatures_.Add(other.creatures_);
      if (other.creatureEquipTemplate_ != null) {
        if (creatureEquipTemplate_ == null) {
          CreatureEquipTemplate = new global::Database.CreatureEquipTemplate();
        }
        CreatureEquipTemplate.MergeFrom(other.CreatureEquipTemplate);
      }
      if (other.itemTemplate_ != null) {
        if (itemTemplate_ == null) {
          ItemTemplate = new global::Database.ItemTemplate();
        }
        ItemTemplate.MergeFrom(other.ItemTemplate);
      }
      if (other.npcVendorEntry_ != null) {
        if (npcVendorEntry_ == null) {
          NpcVendorEntry = new global::Database.NpcVendorEntry();
        }
        NpcVendorEntry.MergeFrom(other.NpcVendorEntry);
      }
      if (other.questTemplate_ != null) {
        if (questTemplate_ == null) {
          QuestTemplate = new global::Database.QuestTemplate();
        }
        QuestTemplate.MergeFrom(other.QuestTemplate);
      }
      if (other.creatureTemplate_ != null) {
        if (creatureTemplate_ == null) {
          CreatureTemplate = new global::Database.CreatureTemplate();
        }
        CreatureTemplate.MergeFrom(other.CreatureTemplate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            areaTriggerTeleports_.AddEntriesFrom(input, _repeated_areaTriggerTeleports_codec);
            break;
          }
          case 18: {
            creatureGroupings_.AddEntriesFrom(input, _repeated_creatureGroupings_codec);
            break;
          }
          case 26: {
            creatureMovement_.AddEntriesFrom(input, _repeated_creatureMovement_codec);
            break;
          }
          case 34: {
            creatureMovementTemplate_.AddEntriesFrom(input, _repeated_creatureMovementTemplate_codec);
            break;
          }
          case 42: {
            gameObjects_.AddEntriesFrom(input, _repeated_gameObjects_codec);
            break;
          }
          case 50: {
            creatures_.AddEntriesFrom(input, _repeated_creatures_codec);
            break;
          }
          case 58: {
            if (creatureEquipTemplate_ == null) {
              CreatureEquipTemplate = new global::Database.CreatureEquipTemplate();
            }
            input.ReadMessage(CreatureEquipTemplate);
            break;
          }
          case 66: {
            if (itemTemplate_ == null) {
              ItemTemplate = new global::Database.ItemTemplate();
            }
            input.ReadMessage(ItemTemplate);
            break;
          }
          case 74: {
            if (npcVendorEntry_ == null) {
              NpcVendorEntry = new global::Database.NpcVendorEntry();
            }
            input.ReadMessage(NpcVendorEntry);
            break;
          }
          case 82: {
            if (questTemplate_ == null) {
              QuestTemplate = new global::Database.QuestTemplate();
            }
            input.ReadMessage(QuestTemplate);
            break;
          }
          case 90: {
            if (creatureTemplate_ == null) {
              CreatureTemplate = new global::Database.CreatureTemplate();
            }
            input.ReadMessage(CreatureTemplate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            areaTriggerTeleports_.AddEntriesFrom(ref input, _repeated_areaTriggerTeleports_codec);
            break;
          }
          case 18: {
            creatureGroupings_.AddEntriesFrom(ref input, _repeated_creatureGroupings_codec);
            break;
          }
          case 26: {
            creatureMovement_.AddEntriesFrom(ref input, _repeated_creatureMovement_codec);
            break;
          }
          case 34: {
            creatureMovementTemplate_.AddEntriesFrom(ref input, _repeated_creatureMovementTemplate_codec);
            break;
          }
          case 42: {
            gameObjects_.AddEntriesFrom(ref input, _repeated_gameObjects_codec);
            break;
          }
          case 50: {
            creatures_.AddEntriesFrom(ref input, _repeated_creatures_codec);
            break;
          }
          case 58: {
            if (creatureEquipTemplate_ == null) {
              CreatureEquipTemplate = new global::Database.CreatureEquipTemplate();
            }
            input.ReadMessage(CreatureEquipTemplate);
            break;
          }
          case 66: {
            if (itemTemplate_ == null) {
              ItemTemplate = new global::Database.ItemTemplate();
            }
            input.ReadMessage(ItemTemplate);
            break;
          }
          case 74: {
            if (npcVendorEntry_ == null) {
              NpcVendorEntry = new global::Database.NpcVendorEntry();
            }
            input.ReadMessage(NpcVendorEntry);
            break;
          }
          case 82: {
            if (questTemplate_ == null) {
              QuestTemplate = new global::Database.QuestTemplate();
            }
            input.ReadMessage(QuestTemplate);
            break;
          }
          case 90: {
            if (creatureTemplate_ == null) {
              CreatureTemplate = new global::Database.CreatureTemplate();
            }
            input.ReadMessage(CreatureTemplate);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AreaTriggerTeleport : pb::IMessage<AreaTriggerTeleport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AreaTriggerTeleport> _parser = new pb::MessageParser<AreaTriggerTeleport>(() => new AreaTriggerTeleport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AreaTriggerTeleport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Database.DatabaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AreaTriggerTeleport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AreaTriggerTeleport(AreaTriggerTeleport other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      requiredLevel_ = other.requiredLevel_;
      requiredItem_ = other.requiredItem_;
      requiredItem2_ = other.requiredItem2_;
      requiredQuestDone_ = other.requiredQuestDone_;
      targetMap_ = other.targetMap_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      targetOrientation_ = other.targetOrientation_;
      statusFailedText_ = other.statusFailedText_;
      conditionId_ = other.conditionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AreaTriggerTeleport Clone() {
      return new AreaTriggerTeleport(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requiredLevel" field.</summary>
    public const int RequiredLevelFieldNumber = 3;
    private uint requiredLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RequiredLevel {
      get { return requiredLevel_; }
      set {
        requiredLevel_ = value;
      }
    }

    /// <summary>Field number for the "requiredItem" field.</summary>
    public const int RequiredItemFieldNumber = 4;
    private int requiredItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredItem {
      get { return requiredItem_; }
      set {
        requiredItem_ = value;
      }
    }

    /// <summary>Field number for the "requiredItem2" field.</summary>
    public const int RequiredItem2FieldNumber = 5;
    private int requiredItem2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredItem2 {
      get { return requiredItem2_; }
      set {
        requiredItem2_ = value;
      }
    }

    /// <summary>Field number for the "requiredQuestDone" field.</summary>
    public const int RequiredQuestDoneFieldNumber = 6;
    private int requiredQuestDone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredQuestDone {
      get { return requiredQuestDone_; }
      set {
        requiredQuestDone_ = value;
      }
    }

    /// <summary>Field number for the "targetMap" field.</summary>
    public const int TargetMapFieldNumber = 7;
    private uint targetMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TargetMap {
      get { return targetMap_; }
      set {
        targetMap_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 8;
    private global::Game.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Game.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "targetOrientation" field.</summary>
    public const int TargetOrientationFieldNumber = 9;
    private float targetOrientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TargetOrientation {
      get { return targetOrientation_; }
      set {
        targetOrientation_ = value;
      }
    }

    /// <summary>Field number for the "statusFailedText" field.</summary>
    public const int StatusFailedTextFieldNumber = 10;
    private string statusFailedText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StatusFailedText {
      get { return statusFailedText_; }
      set {
        statusFailedText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "conditionId" field.</summary>
    public const int ConditionIdFieldNumber = 11;
    private int conditionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ConditionId {
      get { return conditionId_; }
      set {
        conditionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AreaTriggerTeleport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AreaTriggerTeleport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (RequiredLevel != other.RequiredLevel) return false;
      if (RequiredItem != other.RequiredItem) return false;
      if (RequiredItem2 != other.RequiredItem2) return false;
      if (RequiredQuestDone != other.RequiredQuestDone) return false;
      if (TargetMap != other.TargetMap) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetOrientation, other.TargetOrientation)) return false;
      if (StatusFailedText != other.StatusFailedText) return false;
      if (ConditionId != other.ConditionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (RequiredLevel != 0) hash ^= RequiredLevel.GetHashCode();
      if (RequiredItem != 0) hash ^= RequiredItem.GetHashCode();
      if (RequiredItem2 != 0) hash ^= RequiredItem2.GetHashCode();
      if (RequiredQuestDone != 0) hash ^= RequiredQuestDone.GetHashCode();
      if (TargetMap != 0) hash ^= TargetMap.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (TargetOrientation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetOrientation);
      if (StatusFailedText.Length != 0) hash ^= StatusFailedText.GetHashCode();
      if (ConditionId != 0) hash ^= ConditionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (RequiredLevel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RequiredLevel);
      }
      if (RequiredItem != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RequiredItem);
      }
      if (RequiredItem2 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RequiredItem2);
      }
      if (RequiredQuestDone != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RequiredQuestDone);
      }
      if (TargetMap != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TargetMap);
      }
      if (position_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Position);
      }
      if (TargetOrientation != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(TargetOrientation);
      }
      if (StatusFailedText.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(StatusFailedText);
      }
      if (ConditionId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ConditionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (RequiredLevel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RequiredLevel);
      }
      if (RequiredItem != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RequiredItem);
      }
      if (RequiredItem2 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RequiredItem2);
      }
      if (RequiredQuestDone != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RequiredQuestDone);
      }
      if (TargetMap != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TargetMap);
      }
      if (position_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Position);
      }
      if (TargetOrientation != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(TargetOrientation);
      }
      if (StatusFailedText.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(StatusFailedText);
      }
      if (ConditionId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ConditionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (RequiredLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequiredLevel);
      }
      if (RequiredItem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredItem);
      }
      if (RequiredItem2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredItem2);
      }
      if (RequiredQuestDone != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredQuestDone);
      }
      if (TargetMap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetMap);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (TargetOrientation != 0F) {
        size += 1 + 4;
      }
      if (StatusFailedText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusFailedText);
      }
      if (ConditionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConditionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AreaTriggerTeleport other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.RequiredLevel != 0) {
        RequiredLevel = other.RequiredLevel;
      }
      if (other.RequiredItem != 0) {
        RequiredItem = other.RequiredItem;
      }
      if (other.RequiredItem2 != 0) {
        RequiredItem2 = other.RequiredItem2;
      }
      if (other.RequiredQuestDone != 0) {
        RequiredQuestDone = other.RequiredQuestDone;
      }
      if (other.TargetMap != 0) {
        TargetMap = other.TargetMap;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Game.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.TargetOrientation != 0F) {
        TargetOrientation = other.TargetOrientation;
      }
      if (other.StatusFailedText.Length != 0) {
        StatusFailedText = other.StatusFailedText;
      }
      if (other.ConditionId != 0) {
        ConditionId = other.ConditionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            RequiredLevel = input.ReadUInt32();
            break;
          }
          case 32: {
            RequiredItem = input.ReadInt32();
            break;
          }
          case 40: {
            RequiredItem2 = input.ReadInt32();
            break;
          }
          case 48: {
            RequiredQuestDone = input.ReadInt32();
            break;
          }
          case 56: {
            TargetMap = input.ReadUInt32();
            break;
          }
          case 66: {
            if (position_ == null) {
              Position = new global::Game.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 77: {
            TargetOrientation = input.ReadFloat();
            break;
          }
          case 82: {
            StatusFailedText = input.ReadString();
            break;
          }
          case 88: {
            ConditionId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            RequiredLevel = input.ReadUInt32();
            break;
          }
          case 32: {
            RequiredItem = input.ReadInt32();
            break;
          }
          case 40: {
            RequiredItem2 = input.ReadInt32();
            break;
          }
          case 48: {
            RequiredQuestDone = input.ReadInt32();
            break;
          }
          case 56: {
            TargetMap = input.ReadUInt32();
            break;
          }
          case 66: {
            if (position_ == null) {
              Position = new global::Game.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 77: {
            TargetOrientation = input.ReadFloat();
            break;
          }
          case 82: {
            StatusFailedText = input.ReadString();
            break;
          }
          case 88: {
            ConditionId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Creature : pb::IMessage<Creature>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Creature> _parser = new pb::MessageParser<Creature>(() => new Creature());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Creature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Database.DatabaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Creature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Creature(Creature other) : this() {
      guid_ = other.guid_;
      name_ = other.name_;
      id_ = other.id_;
      map_ = other.map_;
      zoneId_ = other.zoneId_;
      areaId_ = other.areaId_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      orientation_ = other.orientation_;
      spawnTimeSecsMin_ = other.spawnTimeSecsMin_;
      spawnTimeSecsMax_ = other.spawnTimeSecsMax_;
      spawnDist_ = other.spawnDist_;
      currentWaypointId_ = other.currentWaypointId_;
      spawnType_ = other.spawnType_;
      respawnTime_ = other.respawnTime_;
      movementType_ = other.movementType_;
      wanderDistance_ = other.wanderDistance_;
      searchRange_ = other.searchRange_;
      equipmentId_ = other.equipmentId_;
      scriptName_ = other.scriptName_;
      comments_ = other.comments_;
      spawnMask_ = other.spawnMask_;
      modelId_ = other.modelId_;
      currentWaypoint_ = other.currentWaypoint_;
      curHealth_ = other.curHealth_;
      curMana_ = other.curMana_;
      deathState_ = other.deathState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Creature Clone() {
      return new Creature(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private long guid_;
    /// <summary>
    /// Consistent ID type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 4;
    private int map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 5;
    private int zoneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    /// <summary>Field number for the "areaId" field.</summary>
    public const int AreaIdFieldNumber = 6;
    private int areaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 7;
    private global::Game.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Game.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 8;
    private float orientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "spawnTimeSecsMin" field.</summary>
    public const int SpawnTimeSecsMinFieldNumber = 9;
    private int spawnTimeSecsMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpawnTimeSecsMin {
      get { return spawnTimeSecsMin_; }
      set {
        spawnTimeSecsMin_ = value;
      }
    }

    /// <summary>Field number for the "spawnTimeSecsMax" field.</summary>
    public const int SpawnTimeSecsMaxFieldNumber = 10;
    private int spawnTimeSecsMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpawnTimeSecsMax {
      get { return spawnTimeSecsMax_; }
      set {
        spawnTimeSecsMax_ = value;
      }
    }

    /// <summary>Field number for the "spawnDist" field.</summary>
    public const int SpawnDistFieldNumber = 11;
    private float spawnDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpawnDist {
      get { return spawnDist_; }
      set {
        spawnDist_ = value;
      }
    }

    /// <summary>Field number for the "currentWaypointId" field.</summary>
    public const int CurrentWaypointIdFieldNumber = 12;
    private int currentWaypointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CurrentWaypointId {
      get { return currentWaypointId_; }
      set {
        currentWaypointId_ = value;
      }
    }

    /// <summary>Field number for the "spawnType" field.</summary>
    public const int SpawnTypeFieldNumber = 13;
    private int spawnType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpawnType {
      get { return spawnType_; }
      set {
        spawnType_ = value;
      }
    }

    /// <summary>Field number for the "respawnTime" field.</summary>
    public const int RespawnTimeFieldNumber = 14;
    private int respawnTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RespawnTime {
      get { return respawnTime_; }
      set {
        respawnTime_ = value;
      }
    }

    /// <summary>Field number for the "movementType" field.</summary>
    public const int MovementTypeFieldNumber = 15;
    private int movementType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MovementType {
      get { return movementType_; }
      set {
        movementType_ = value;
      }
    }

    /// <summary>Field number for the "wanderDistance" field.</summary>
    public const int WanderDistanceFieldNumber = 16;
    private int wanderDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WanderDistance {
      get { return wanderDistance_; }
      set {
        wanderDistance_ = value;
      }
    }

    /// <summary>Field number for the "searchRange" field.</summary>
    public const int SearchRangeFieldNumber = 17;
    private int searchRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SearchRange {
      get { return searchRange_; }
      set {
        searchRange_ = value;
      }
    }

    /// <summary>Field number for the "equipmentId" field.</summary>
    public const int EquipmentIdFieldNumber = 18;
    private int equipmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EquipmentId {
      get { return equipmentId_; }
      set {
        equipmentId_ = value;
      }
    }

    /// <summary>Field number for the "scriptName" field.</summary>
    public const int ScriptNameFieldNumber = 19;
    private string scriptName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ScriptName {
      get { return scriptName_; }
      set {
        scriptName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "comments" field.</summary>
    public const int CommentsFieldNumber = 20;
    private string comments_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Comments {
      get { return comments_; }
      set {
        comments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spawnMask" field.</summary>
    public const int SpawnMaskFieldNumber = 21;
    private int spawnMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpawnMask {
      get { return spawnMask_; }
      set {
        spawnMask_ = value;
      }
    }

    /// <summary>Field number for the "modelId" field.</summary>
    public const int ModelIdFieldNumber = 22;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "currentWaypoint" field.</summary>
    public const int CurrentWaypointFieldNumber = 23;
    private int currentWaypoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CurrentWaypoint {
      get { return currentWaypoint_; }
      set {
        currentWaypoint_ = value;
      }
    }

    /// <summary>Field number for the "curHealth" field.</summary>
    public const int CurHealthFieldNumber = 24;
    private int curHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CurHealth {
      get { return curHealth_; }
      set {
        curHealth_ = value;
      }
    }

    /// <summary>Field number for the "curMana" field.</summary>
    public const int CurManaFieldNumber = 25;
    private int curMana_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CurMana {
      get { return curMana_; }
      set {
        curMana_ = value;
      }
    }

    /// <summary>Field number for the "deathState" field.</summary>
    public const int DeathStateFieldNumber = 26;
    private int deathState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeathState {
      get { return deathState_; }
      set {
        deathState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Creature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Creature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Name != other.Name) return false;
      if (Id != other.Id) return false;
      if (Map != other.Map) return false;
      if (ZoneId != other.ZoneId) return false;
      if (AreaId != other.AreaId) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Orientation, other.Orientation)) return false;
      if (SpawnTimeSecsMin != other.SpawnTimeSecsMin) return false;
      if (SpawnTimeSecsMax != other.SpawnTimeSecsMax) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpawnDist, other.SpawnDist)) return false;
      if (CurrentWaypointId != other.CurrentWaypointId) return false;
      if (SpawnType != other.SpawnType) return false;
      if (RespawnTime != other.RespawnTime) return false;
      if (MovementType != other.MovementType) return false;
      if (WanderDistance != other.WanderDistance) return false;
      if (SearchRange != other.SearchRange) return false;
      if (EquipmentId != other.EquipmentId) return false;
      if (ScriptName != other.ScriptName) return false;
      if (Comments != other.Comments) return false;
      if (SpawnMask != other.SpawnMask) return false;
      if (ModelId != other.ModelId) return false;
      if (CurrentWaypoint != other.CurrentWaypoint) return false;
      if (CurHealth != other.CurHealth) return false;
      if (CurMana != other.CurMana) return false;
      if (DeathState != other.DeathState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0L) hash ^= Guid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Map != 0) hash ^= Map.GetHashCode();
      if (ZoneId != 0) hash ^= ZoneId.GetHashCode();
      if (AreaId != 0) hash ^= AreaId.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Orientation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Orientation);
      if (SpawnTimeSecsMin != 0) hash ^= SpawnTimeSecsMin.GetHashCode();
      if (SpawnTimeSecsMax != 0) hash ^= SpawnTimeSecsMax.GetHashCode();
      if (SpawnDist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpawnDist);
      if (CurrentWaypointId != 0) hash ^= CurrentWaypointId.GetHashCode();
      if (SpawnType != 0) hash ^= SpawnType.GetHashCode();
      if (RespawnTime != 0) hash ^= RespawnTime.GetHashCode();
      if (MovementType != 0) hash ^= MovementType.GetHashCode();
      if (WanderDistance != 0) hash ^= WanderDistance.GetHashCode();
      if (SearchRange != 0) hash ^= SearchRange.GetHashCode();
      if (EquipmentId != 0) hash ^= EquipmentId.GetHashCode();
      if (ScriptName.Length != 0) hash ^= ScriptName.GetHashCode();
      if (Comments.Length != 0) hash ^= Comments.GetHashCode();
      if (SpawnMask != 0) hash ^= SpawnMask.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (CurrentWaypoint != 0) hash ^= CurrentWaypoint.GetHashCode();
      if (CurHealth != 0) hash ^= CurHealth.GetHashCode();
      if (CurMana != 0) hash ^= CurMana.GetHashCode();
      if (DeathState != 0) hash ^= DeathState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Guid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Id);
      }
      if (Map != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Map);
      }
      if (ZoneId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ZoneId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AreaId);
      }
      if (position_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Position);
      }
      if (Orientation != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Orientation);
      }
      if (SpawnTimeSecsMin != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SpawnTimeSecsMin);
      }
      if (SpawnTimeSecsMax != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SpawnTimeSecsMax);
      }
      if (SpawnDist != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(SpawnDist);
      }
      if (CurrentWaypointId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CurrentWaypointId);
      }
      if (SpawnType != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SpawnType);
      }
      if (RespawnTime != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RespawnTime);
      }
      if (MovementType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MovementType);
      }
      if (WanderDistance != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(WanderDistance);
      }
      if (SearchRange != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SearchRange);
      }
      if (EquipmentId != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(EquipmentId);
      }
      if (ScriptName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ScriptName);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Comments);
      }
      if (SpawnMask != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(SpawnMask);
      }
      if (ModelId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ModelId);
      }
      if (CurrentWaypoint != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(CurrentWaypoint);
      }
      if (CurHealth != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(CurHealth);
      }
      if (CurMana != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(CurMana);
      }
      if (DeathState != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(DeathState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Guid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Id);
      }
      if (Map != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Map);
      }
      if (ZoneId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ZoneId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AreaId);
      }
      if (position_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Position);
      }
      if (Orientation != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Orientation);
      }
      if (SpawnTimeSecsMin != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SpawnTimeSecsMin);
      }
      if (SpawnTimeSecsMax != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SpawnTimeSecsMax);
      }
      if (SpawnDist != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(SpawnDist);
      }
      if (CurrentWaypointId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CurrentWaypointId);
      }
      if (SpawnType != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SpawnType);
      }
      if (RespawnTime != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RespawnTime);
      }
      if (MovementType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MovementType);
      }
      if (WanderDistance != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(WanderDistance);
      }
      if (SearchRange != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SearchRange);
      }
      if (EquipmentId != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(EquipmentId);
      }
      if (ScriptName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ScriptName);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Comments);
      }
      if (SpawnMask != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(SpawnMask);
      }
      if (ModelId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ModelId);
      }
      if (CurrentWaypoint != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(CurrentWaypoint);
      }
      if (CurHealth != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(CurHealth);
      }
      if (CurMana != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(CurMana);
      }
      if (DeathState != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(DeathState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Map != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Map);
      }
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZoneId);
      }
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Orientation != 0F) {
        size += 1 + 4;
      }
      if (SpawnTimeSecsMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnTimeSecsMin);
      }
      if (SpawnTimeSecsMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnTimeSecsMax);
      }
      if (SpawnDist != 0F) {
        size += 1 + 4;
      }
      if (CurrentWaypointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentWaypointId);
      }
      if (SpawnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnType);
      }
      if (RespawnTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RespawnTime);
      }
      if (MovementType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MovementType);
      }
      if (WanderDistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WanderDistance);
      }
      if (SearchRange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SearchRange);
      }
      if (EquipmentId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EquipmentId);
      }
      if (ScriptName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ScriptName);
      }
      if (Comments.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Comments);
      }
      if (SpawnMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpawnMask);
      }
      if (ModelId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (CurrentWaypoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurrentWaypoint);
      }
      if (CurHealth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurHealth);
      }
      if (CurMana != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurMana);
      }
      if (DeathState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeathState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Creature other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0L) {
        Guid = other.Guid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Map != 0) {
        Map = other.Map;
      }
      if (other.ZoneId != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.AreaId != 0) {
        AreaId = other.AreaId;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Game.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Orientation != 0F) {
        Orientation = other.Orientation;
      }
      if (other.SpawnTimeSecsMin != 0) {
        SpawnTimeSecsMin = other.SpawnTimeSecsMin;
      }
      if (other.SpawnTimeSecsMax != 0) {
        SpawnTimeSecsMax = other.SpawnTimeSecsMax;
      }
      if (other.SpawnDist != 0F) {
        SpawnDist = other.SpawnDist;
      }
      if (other.CurrentWaypointId != 0) {
        CurrentWaypointId = other.CurrentWaypointId;
      }
      if (other.SpawnType != 0) {
        SpawnType = other.SpawnType;
      }
      if (other.RespawnTime != 0) {
        RespawnTime = other.RespawnTime;
      }
      if (other.MovementType != 0) {
        MovementType = other.MovementType;
      }
      if (other.WanderDistance != 0) {
        WanderDistance = other.WanderDistance;
      }
      if (other.SearchRange != 0) {
        SearchRange = other.SearchRange;
      }
      if (other.EquipmentId != 0) {
        EquipmentId = other.EquipmentId;
      }
      if (other.ScriptName.Length != 0) {
        ScriptName = other.ScriptName;
      }
      if (other.Comments.Length != 0) {
        Comments = other.Comments;
      }
      if (other.SpawnMask != 0) {
        SpawnMask = other.SpawnMask;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.CurrentWaypoint != 0) {
        CurrentWaypoint = other.CurrentWaypoint;
      }
      if (other.CurHealth != 0) {
        CurHealth = other.CurHealth;
      }
      if (other.CurMana != 0) {
        CurMana = other.CurMana;
      }
      if (other.DeathState != 0) {
        DeathState = other.DeathState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Guid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Id = input.ReadInt32();
            break;
          }
          case 32: {
            Map = input.ReadInt32();
            break;
          }
          case 40: {
            ZoneId = input.ReadInt32();
            break;
          }
          case 48: {
            AreaId = input.ReadInt32();
            break;
          }
          case 58: {
            if (position_ == null) {
              Position = new global::Game.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 69: {
            Orientation = input.ReadFloat();
            break;
          }
          case 72: {
            SpawnTimeSecsMin = input.ReadInt32();
            break;
          }
          case 80: {
            SpawnTimeSecsMax = input.ReadInt32();
            break;
          }
          case 93: {
            SpawnDist = input.ReadFloat();
            break;
          }
          case 96: {
            CurrentWaypointId = input.ReadInt32();
            break;
          }
          case 104: {
            SpawnType = input.ReadInt32();
            break;
          }
          case 112: {
            RespawnTime = input.ReadInt32();
            break;
          }
          case 120: {
            MovementType = input.ReadInt32();
            break;
          }
          case 128: {
            WanderDistance = input.ReadInt32();
            break;
          }
          case 136: {
            SearchRange = input.ReadInt32();
            break;
          }
          case 144: {
            EquipmentId = input.ReadInt32();
            break;
          }
          case 154: {
            ScriptName = input.ReadString();
            break;
          }
          case 162: {
            Comments = input.ReadString();
            break;
          }
          case 168: {
            SpawnMask = input.ReadInt32();
            break;
          }
          case 176: {
            ModelId = input.ReadInt32();
            break;
          }
          case 184: {
            CurrentWaypoint = input.ReadInt32();
            break;
          }
          case 192: {
            CurHealth = input.ReadInt32();
            break;
          }
          case 200: {
            CurMana = input.ReadInt32();
            break;
          }
          case 208: {
            DeathState = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Guid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Id = input.ReadInt32();
            break;
          }
          case 32: {
            Map = input.ReadInt32();
            break;
          }
          case 40: {
            ZoneId = input.ReadInt32();
            break;
          }
          case 48: {
            AreaId = input.ReadInt32();
            break;
          }
          case 58: {
            if (position_ == null) {
              Position = new global::Game.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 69: {
            Orientation = input.ReadFloat();
            break;
          }
          case 72: {
            SpawnTimeSecsMin = input.ReadInt32();
            break;
          }
          case 80: {
            SpawnTimeSecsMax = input.ReadInt32();
            break;
          }
          case 93: {
            SpawnDist = input.ReadFloat();
            break;
          }
          case 96: {
            CurrentWaypointId = input.ReadInt32();
            break;
          }
          case 104: {
            SpawnType = input.ReadInt32();
            break;
          }
          case 112: {
            RespawnTime = input.ReadInt32();
            break;
          }
          case 120: {
            MovementType = input.ReadInt32();
            break;
          }
          case 128: {
            WanderDistance = input.ReadInt32();
            break;
          }
          case 136: {
            SearchRange = input.ReadInt32();
            break;
          }
          case 144: {
            EquipmentId = input.ReadInt32();
            break;
          }
          case 154: {
            ScriptName = input.ReadString();
            break;
          }
          case 162: {
            Comments = input.ReadString();
            break;
          }
          case 168: {
            SpawnMask = input.ReadInt32();
            break;
          }
          case 176: {
            ModelId = input.ReadInt32();
            break;
          }
          case 184: {
            CurrentWaypoint = input.ReadInt32();
            break;
          }
          case 192: {
            CurHealth = input.ReadInt32();
            break;
          }
          case 200: {
            CurMana = input.ReadInt32();
            break;
          }
          case 208: {
            DeathState = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CreatureEquipTemplate : pb::IMessage<CreatureEquipTemplate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreatureEquipTemplate> _parser = new pb::MessageParser<CreatureEquipTemplate>(() => new CreatureEquipTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreatureEquipTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Database.DatabaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureEquipTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureEquipTemplate(CreatureEquipTemplate other) : this() {
      entry_ = other.entry_;
      equipEntry1_ = other.equipEntry1_;
      equipEntry2_ = other.equipEntry2_;
      equipEntry3_ = other.equipEntry3_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureEquipTemplate Clone() {
      return new CreatureEquipTemplate(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private int entry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Entry {
      get { return entry_; }
      set {
        entry_ = value;
      }
    }

    /// <summary>Field number for the "equipEntry1" field.</summary>
    public const int EquipEntry1FieldNumber = 2;
    private int equipEntry1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EquipEntry1 {
      get { return equipEntry1_; }
      set {
        equipEntry1_ = value;
      }
    }

    /// <summary>Field number for the "equipEntry2" field.</summary>
    public const int EquipEntry2FieldNumber = 3;
    private int equipEntry2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EquipEntry2 {
      get { return equipEntry2_; }
      set {
        equipEntry2_ = value;
      }
    }

    /// <summary>Field number for the "equipEntry3" field.</summary>
    public const int EquipEntry3FieldNumber = 4;
    private int equipEntry3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EquipEntry3 {
      get { return equipEntry3_; }
      set {
        equipEntry3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreatureEquipTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreatureEquipTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entry != other.Entry) return false;
      if (EquipEntry1 != other.EquipEntry1) return false;
      if (EquipEntry2 != other.EquipEntry2) return false;
      if (EquipEntry3 != other.EquipEntry3) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Entry != 0) hash ^= Entry.GetHashCode();
      if (EquipEntry1 != 0) hash ^= EquipEntry1.GetHashCode();
      if (EquipEntry2 != 0) hash ^= EquipEntry2.GetHashCode();
      if (EquipEntry3 != 0) hash ^= EquipEntry3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Entry != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entry);
      }
      if (EquipEntry1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EquipEntry1);
      }
      if (EquipEntry2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EquipEntry2);
      }
      if (EquipEntry3 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EquipEntry3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Entry != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entry);
      }
      if (EquipEntry1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EquipEntry1);
      }
      if (EquipEntry2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EquipEntry2);
      }
      if (EquipEntry3 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EquipEntry3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Entry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entry);
      }
      if (EquipEntry1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipEntry1);
      }
      if (EquipEntry2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipEntry2);
      }
      if (EquipEntry3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipEntry3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreatureEquipTemplate other) {
      if (other == null) {
        return;
      }
      if (other.Entry != 0) {
        Entry = other.Entry;
      }
      if (other.EquipEntry1 != 0) {
        EquipEntry1 = other.EquipEntry1;
      }
      if (other.EquipEntry2 != 0) {
        EquipEntry2 = other.EquipEntry2;
      }
      if (other.EquipEntry3 != 0) {
        EquipEntry3 = other.EquipEntry3;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entry = input.ReadInt32();
            break;
          }
          case 16: {
            EquipEntry1 = input.ReadInt32();
            break;
          }
          case 24: {
            EquipEntry2 = input.ReadInt32();
            break;
          }
          case 32: {
            EquipEntry3 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Entry = input.ReadInt32();
            break;
          }
          case 16: {
            EquipEntry1 = input.ReadInt32();
            break;
          }
          case 24: {
            EquipEntry2 = input.ReadInt32();
            break;
          }
          case 32: {
            EquipEntry3 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CreatureGrouping : pb::IMessage<CreatureGrouping>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreatureGrouping> _parser = new pb::MessageParser<CreatureGrouping>(() => new CreatureGrouping());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreatureGrouping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Database.DatabaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureGrouping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureGrouping(CreatureGrouping other) : this() {
      leaderGuid_ = other.leaderGuid_;
      memberGuid_ = other.memberGuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureGrouping Clone() {
      return new CreatureGrouping(this);
    }

    /// <summary>Field number for the "leaderGuid" field.</summary>
    public const int LeaderGuidFieldNumber = 1;
    private long leaderGuid_;
    /// <summary>
    /// Consistent ID type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LeaderGuid {
      get { return leaderGuid_; }
      set {
        leaderGuid_ = value;
      }
    }

    /// <summary>Field number for the "memberGuid" field.</summary>
    public const int MemberGuidFieldNumber = 2;
    private long memberGuid_;
    /// <summary>
    /// Consistent ID type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MemberGuid {
      get { return memberGuid_; }
      set {
        memberGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreatureGrouping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreatureGrouping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaderGuid != other.LeaderGuid) return false;
      if (MemberGuid != other.MemberGuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaderGuid != 0L) hash ^= LeaderGuid.GetHashCode();
      if (MemberGuid != 0L) hash ^= MemberGuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LeaderGuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LeaderGuid);
      }
      if (MemberGuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MemberGuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LeaderGuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LeaderGuid);
      }
      if (MemberGuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MemberGuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (LeaderGuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeaderGuid);
      }
      if (MemberGuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MemberGuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreatureGrouping other) {
      if (other == null) {
        return;
      }
      if (other.LeaderGuid != 0L) {
        LeaderGuid = other.LeaderGuid;
      }
      if (other.MemberGuid != 0L) {
        MemberGuid = other.MemberGuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LeaderGuid = input.ReadInt64();
            break;
          }
          case 16: {
            MemberGuid = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LeaderGuid = input.ReadInt64();
            break;
          }
          case 16: {
            MemberGuid = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CreatureMovement : pb::IMessage<CreatureMovement>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreatureMovement> _parser = new pb::MessageParser<CreatureMovement>(() => new CreatureMovement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreatureMovement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Database.DatabaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureMovement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureMovement(CreatureMovement other) : this() {
      id_ = other.id_;
      point_ = other.point_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      orientation_ = other.orientation_;
      waitTime_ = other.waitTime_;
      scriptId_ = other.scriptId_;
      comment_ = other.comment_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureMovement Clone() {
      return new CreatureMovement(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private int point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Game.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Game.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 4;
    private float orientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "waitTime" field.</summary>
    public const int WaitTimeFieldNumber = 5;
    private int waitTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WaitTime {
      get { return waitTime_; }
      set {
        waitTime_ = value;
      }
    }

    /// <summary>Field number for the "scriptId" field.</summary>
    public const int ScriptIdFieldNumber = 6;
    private int scriptId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScriptId {
      get { return scriptId_; }
      set {
        scriptId_ = value;
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 7;
    private string comment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreatureMovement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreatureMovement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Point != other.Point) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Orientation, other.Orientation)) return false;
      if (WaitTime != other.WaitTime) return false;
      if (ScriptId != other.ScriptId) return false;
      if (Comment != other.Comment) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Point != 0) hash ^= Point.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Orientation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Orientation);
      if (WaitTime != 0) hash ^= WaitTime.GetHashCode();
      if (ScriptId != 0) hash ^= ScriptId.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (Orientation != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Orientation);
      }
      if (WaitTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WaitTime);
      }
      if (ScriptId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ScriptId);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Comment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (Orientation != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Orientation);
      }
      if (WaitTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WaitTime);
      }
      if (ScriptId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ScriptId);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Comment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Orientation != 0F) {
        size += 1 + 4;
      }
      if (WaitTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitTime);
      }
      if (ScriptId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScriptId);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreatureMovement other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Point != 0) {
        Point = other.Point;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Game.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Orientation != 0F) {
        Orientation = other.Orientation;
      }
      if (other.WaitTime != 0) {
        WaitTime = other.WaitTime;
      }
      if (other.ScriptId != 0) {
        ScriptId = other.ScriptId;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::Game.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 37: {
            Orientation = input.ReadFloat();
            break;
          }
          case 40: {
            WaitTime = input.ReadInt32();
            break;
          }
          case 48: {
            ScriptId = input.ReadInt32();
            break;
          }
          case 58: {
            Comment = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::Game.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 37: {
            Orientation = input.ReadFloat();
            break;
          }
          case 40: {
            WaitTime = input.ReadInt32();
            break;
          }
          case 48: {
            ScriptId = input.ReadInt32();
            break;
          }
          case 58: {
            Comment = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CreatureMovementTemplate : pb::IMessage<CreatureMovementTemplate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreatureMovementTemplate> _parser = new pb::MessageParser<CreatureMovementTemplate>(() => new CreatureMovementTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreatureMovementTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Database.DatabaseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureMovementTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureMovementTemplate(CreatureMovementTemplate other) : this() {
      entry_ = other.entry_;
      pathId_ = other.pathId_;
      point_ = other.point_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      orientation_ = other.orientation_;
      waitTime_ = other.waitTime_;
      scriptId_ = other.scriptId_;
      comment_ = other.comment_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureMovementTemplate Clone() {
      return new CreatureMovementTemplate(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private int entry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Entry {
      get { return entry_; }
      set {
        entry_ = value;
      }
    }

    /// <summary>Field number for the "pathId" field.</summary>
    public const int PathIdFieldNumber = 2;
    private int pathId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PathId {
      get { return pathId_; }
      set {
        pathId_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 3;
    private int point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::Game.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Game.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 5;
    private float orientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "waitTime" field.</summary>
    public const int WaitTimeFieldNumber = 6;
    private int waitTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WaitTime {
      get { return waitTime_; }
      set {
        waitTime_ = value;
      }
    }

    /// <summary>Field number for the "scriptId" field.</summary>
    public const int ScriptIdFieldNumber = 7;
    private int scriptId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScriptId {
      get { return scriptId_; }
      set {
        scriptId_ = value;
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 8;
    private string comment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreatureMovementTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreatureMovementTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entry != other.Entry) return false;
      if (PathId != other.PathId) return false;
      if (Point != other.Point) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Orientation, other.Orientation)) return false;
      if (WaitTime != other.WaitTime) return false;
      if (ScriptId != other.ScriptId) return false;
      if (Comment != other.Comment) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Entry != 0) hash ^= Entry.GetHashCode();
      if (PathId != 0) hash ^= PathId.GetHashCode();
      if (Point != 0) hash ^= Point.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Orientation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Orientation);
      if (WaitTime != 0) hash ^= WaitTime.GetHashCode();
      if (ScriptId != 0) hash ^= ScriptId.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Entry != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entry);
      }
      if (PathId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PathId);
      }
      if (Point != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Point);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (Orientation != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Orientation);
      }
      if (WaitTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WaitTime);
      }
      if (ScriptId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ScriptId);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Comment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Entry != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entry);
      }
      if (PathId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PathId);
      }
      if (Point != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Point);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (Orientation != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Orientation);
      }
      if (WaitTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WaitTime);
      }
      if (ScriptId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ScriptId);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Comment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Entry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entry);
      }
      if (PathId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PathId);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Orientation != 0F) {
        size += 1 + 4;
      }
      if (WaitTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitTime);
      }
      if (ScriptId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScriptId);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreatureMovementTemplate other) {
      if (other == null) {
        return;
      }
      if (other.Entry != 0) {
        Entry = other.Entry;
      }
      if (other.PathId != 0) {
        PathId = other.PathId;
      }
      if (other.Point != 0) {
        Point = other.Point;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Game.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Orientation != 0F) {
        Orientation = other.Orientation;
      }
      if (other.WaitTime != 0) {
        WaitTime = other.WaitTime;
      }
      if (other.ScriptId != 0) {
        ScriptId = other.ScriptId;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entry = input.ReadInt32();
            break;
          }
          case 16: {
            PathId = input.ReadInt32();
            break;
          }
          case 24: {
            Point = input.ReadInt32();
            break;
          }
          case 34: {
            if (position_ == null) {
              Position = new global::Game.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 45: {
            Orientation = input.ReadFloat();
            break;
          }
          case 48: {
            WaitTime = input.ReadInt32();
            break;
          }
          case 56: {
            ScriptId = input.ReadInt32();
            break;
          }
          case 66: {
            Comment = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Entry = input.ReadInt32();
            break;
          }
          case 16: {
            PathId = input.ReadInt32();
            break;
          }
          case 24: {
            Point = input.ReadInt32();
            break;
          }
          case 34: {
            if (position_ == null) {
              Position = new global::Game.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 45: {
            Orientation = input.ReadFloat();
            break;
          }
          case 48: {
            WaitTime = input.ReadInt32();
            break;
          }
          case 56: {
            ScriptId = input.ReadInt32();
            break;
          }
          case 66: {
            Comment = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CreatureTemplate : pb::IMessage<CreatureTemplate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreatureTemplate> _parser = new pb::MessageParser<CreatureTemplate>(() => new CreatureTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreatureTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Database.DatabaseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureTemplate(CreatureTemplate other) : this() {
      entry_ = other.entry_;
      name_ = other.name_;
      subName_ = other.subName_;
      minLevel_ = other.minLevel_;
      maxLevel_ = other.maxLevel_;
      modelId1_ = other.modelId1_;
      modelId2_ = other.modelId2_;
      modelId3_ = other.modelId3_;
      modelId4_ = other.modelId4_;
      faction_ = other.faction_;
      scale_ = other.scale_;
      family_ = other.family_;
      creatureType_ = other.creatureType_;
      inhabitType_ = other.inhabitType_;
      regenerateStats_ = other.regenerateStats_;
      racialLeader_ = other.racialLeader_;
      npcFlags_ = other.npcFlags_;
      unitFlags_ = other.unitFlags_;
      dynamicFlags_ = other.dynamicFlags_;
      extraFlags_ = other.extraFlags_;
      creatureTypeFlags_ = other.creatureTypeFlags_;
      speedWalk_ = other.speedWalk_;
      speedRun_ = other.speedRun_;
      detection_ = other.detection_;
      callForHelp_ = other.callForHelp_;
      pursuit_ = other.pursuit_;
      leash_ = other.leash_;
      timeout_ = other.timeout_;
      unitClass_ = other.unitClass_;
      rank_ = other.rank_;
      healthMultiplier_ = other.healthMultiplier_;
      powerMultiplier_ = other.powerMultiplier_;
      damageMultiplier_ = other.damageMultiplier_;
      damageVariance_ = other.damageVariance_;
      armorMultiplier_ = other.armorMultiplier_;
      experienceMultiplier_ = other.experienceMultiplier_;
      minLevelHealth_ = other.minLevelHealth_;
      maxLevelHealth_ = other.maxLevelHealth_;
      minLevelMana_ = other.minLevelMana_;
      maxLevelMana_ = other.maxLevelMana_;
      minMeleeDmg_ = other.minMeleeDmg_;
      maxMeleeDmg_ = other.maxMeleeDmg_;
      minRangedDmg_ = other.minRangedDmg_;
      maxRangedDmg_ = other.maxRangedDmg_;
      armor_ = other.armor_;
      meleeAttackPower_ = other.meleeAttackPower_;
      rangedAttackPower_ = other.rangedAttackPower_;
      meleeBaseAttackTime_ = other.meleeBaseAttackTime_;
      rangedBaseAttackTime_ = other.rangedBaseAttackTime_;
      damageSchool_ = other.damageSchool_;
      minLootGold_ = other.minLootGold_;
      maxLootGold_ = other.maxLootGold_;
      lootId_ = other.lootId_;
      pickpocketLootId_ = other.pickpocketLootId_;
      skinningLootId_ = other.skinningLootId_;
      killCredit1_ = other.killCredit1_;
      killCredit2_ = other.killCredit2_;
      mechanicImmuneMask_ = other.mechanicImmuneMask_;
      schoolImmuneMask_ = other.schoolImmuneMask_;
      resistances_ = other.resistances_.Clone();
      petSpellDataId_ = other.petSpellDataId_;
      movementType_ = other.movementType_;
      trainerType_ = other.trainerType_;
      trainerSpell_ = other.trainerSpell_;
      trainerClass_ = other.trainerClass_;
      trainerRace_ = other.trainerRace_;
      trainerTemplateId_ = other.trainerTemplateId_;
      vendorTemplateId_ = other.vendorTemplateId_;
      gossipMenuId_ = other.gossipMenuId_;
      interactionPauseTimer_ = other.interactionPauseTimer_;
      visibilityDistanceType_ = other.visibilityDistanceType_;
      corpseDecay_ = other.corpseDecay_;
      spellList_ = other.spellList_;
      equipmentTemplateId_ = other.equipmentTemplateId_;
      civilian_ = other.civilian_;
      aiName_ = other.aiName_;
      scriptName_ = other.scriptName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreatureTemplate Clone() {
      return new CreatureTemplate(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private long entry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Entry {
      get { return entry_; }
      set {
        entry_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subName" field.</summary>
    public const int SubNameFieldNumber = 3;
    private string subName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SubName {
      get { return subName_; }
      set {
        subName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minLevel" field.</summary>
    public const int MinLevelFieldNumber = 4;
    private uint minLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MinLevel {
      get { return minLevel_; }
      set {
        minLevel_ = value;
      }
    }

    /// <summary>Field number for the "maxLevel" field.</summary>
    public const int MaxLevelFieldNumber = 5;
    private uint maxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "modelId1" field.</summary>
    public const int ModelId1FieldNumber = 6;
    private int modelId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ModelId1 {
      get { return modelId1_; }
      set {
        modelId1_ = value;
      }
    }

    /// <summary>Field number for the "modelId2" field.</summary>
    public const int ModelId2FieldNumber = 7;
    private int modelId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ModelId2 {
      get { return modelId2_; }
      set {
        modelId2_ = value;
      }
    }

    /// <summary>Field number for the "modelId3" field.</summary>
    public const int ModelId3FieldNumber = 8;
    private int modelId3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ModelId3 {
      get { return modelId3_; }
      set {
        modelId3_ = value;
      }
    }

    /// <summary>Field number for the "modelId4" field.</summary>
    public const int ModelId4FieldNumber = 9;
    private int modelId4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ModelId4 {
      get { return modelId4_; }
      set {
        modelId4_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 10;
    private int faction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 11;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "family" field.</summary>
    public const int FamilyFieldNumber = 12;
    private uint family_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Family {
      get { return family_; }
      set {
        family_ = value;
      }
    }

    /// <summary>Field number for the "creatureType" field.</summary>
    public const int CreatureTypeFieldNumber = 13;
    private uint creatureType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CreatureType {
      get { return creatureType_; }
      set {
        creatureType_ = value;
      }
    }

    /// <summary>Field number for the "inhabitType" field.</summary>
    public const int InhabitTypeFieldNumber = 14;
    private uint inhabitType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint InhabitType {
      get { return inhabitType_; }
      set {
        inhabitType_ = value;
      }
    }

    /// <summary>Field number for the "regenerateStats" field.</summary>
    public const int RegenerateStatsFieldNumber = 15;
    private uint regenerateStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RegenerateStats {
      get { return regenerateStats_; }
      set {
        regenerateStats_ = value;
      }
    }

    /// <summary>Field number for the "racialLeader" field.</summary>
    public const int RacialLeaderFieldNumber = 16;
    private uint racialLeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RacialLeader {
      get { return racialLeader_; }
      set {
        racialLeader_ = value;
      }
    }

    /// <summary>Field number for the "npcFlags" field.</summary>
    public const int NpcFlagsFieldNumber = 17;
    private int npcFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NpcFlags {
      get { return npcFlags_; }
      set {
        npcFlags_ = value;
      }
    }

    /// <summary>Field number for the "unitFlags" field.</summary>
    public const int UnitFlagsFieldNumber = 18;
    private int unitFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnitFlags {
      get { return unitFlags_; }
      set {
        unitFlags_ = value;
      }
    }

    /// <summary>Field number for the "dynamicFlags" field.</summary>
    public const int DynamicFlagsFieldNumber = 19;
    private int dynamicFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DynamicFlags {
      get { return dynamicFlags_; }
      set {
        dynamicFlags_ = value;
      }
    }

    /// <summary>Field number for the "extraFlags" field.</summary>
    public const int ExtraFlagsFieldNumber = 20;
    private int extraFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExtraFlags {
      get { return extraFlags_; }
      set {
        extraFlags_ = value;
      }
    }

    /// <summary>Field number for the "creatureTypeFlags" field.</summary>
    public const int CreatureTypeFlagsFieldNumber = 21;
    private int creatureTypeFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CreatureTypeFlags {
      get { return creatureTypeFlags_; }
      set {
        creatureTypeFlags_ = value;
      }
    }

    /// <summary>Field number for the "speedWalk" field.</summary>
    public const int SpeedWalkFieldNumber = 22;
    private float speedWalk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpeedWalk {
      get { return speedWalk_; }
      set {
        speedWalk_ = value;
      }
    }

    /// <summary>Field number for the "speedRun" field.</summary>
    public const int SpeedRunFieldNumber = 23;
    private float speedRun_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpeedRun {
      get { return speedRun_; }
      set {
        speedRun_ = value;
      }
    }

    /// <summary>Field number for the "detection" field.</summary>
    public const int DetectionFieldNumber = 24;
    private int detection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Detection {
      get { return detection_; }
      set {
        detection_ = value;
      }
    }

    /// <summary>Field number for the "callForHelp" field.</summary>
    public const int CallForHelpFieldNumber = 25;
    private int callForHelp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CallForHelp {
      get { return callForHelp_; }
      set {
        callForHelp_ = value;
      }
    }

    /// <summary>Field number for the "pursuit" field.</summary>
    public const int PursuitFieldNumber = 26;
    private int pursuit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Pursuit {
      get { return pursuit_; }
      set {
        pursuit_ = value;
      }
    }

    /// <summary>Field number for the "leash" field.</summary>
    public const int LeashFieldNumber = 27;
    private int leash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leash {
      get { return leash_; }
      set {
        leash_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 28;
    private int timeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "unitClass" field.</summary>
    public const int UnitClassFieldNumber = 29;
    private uint unitClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UnitClass {
      get { return unitClass_; }
      set {
        unitClass_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 30;
    private uint rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "healthMultiplier" field.</summary>
    public const int HealthMultiplierFieldNumber = 31;
    private float healthMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HealthMultiplier {
      get { return healthMultiplier_; }
      set {
        healthMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "powerMultiplier" field.</summary>
    public const int PowerMultiplierFieldNumber = 32;
    private float powerMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PowerMultiplier {
      get { return powerMultiplier_; }
      set {
        powerMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "damageMultiplier" field.</summary>
    public const int DamageMultiplierFieldNumber = 33;
    private float damageMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DamageMultiplier {
      get { return damageMultiplier_; }
      set {
        damageMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "damageVariance" field.</summary>
    public const int DamageVarianceFieldNumber = 34;
    private float damageVariance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DamageVariance {
      get { return damageVariance_; }
      set {
        damageVariance_ = value;
      }
    }

    /// <summary>Field number for the "armorMultiplier" field.</summary>
    public const int ArmorMultiplierFieldNumber = 35;
    private float armorMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ArmorMultiplier {
      get { return armorMultiplier_; }
      set {
        armorMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "experienceMultiplier" field.</summary>
    public const int ExperienceMultiplierFieldNumber = 36;
    private float experienceMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExperienceMultiplier {
      get { return experienceMultiplier_; }
      set {
        experienceMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "minLevelHealth" field.</summary>
    public const int MinLevelHealthFieldNumber = 37;
    private int minLevelHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinLevelHealth {
      get { return minLevelHealth_; }
      set {
        minLevelHealth_ = value;
      }
    }

    /// <summary>Field number for the "maxLevelHealth" field.</summary>
    public const int MaxLevelHealthFieldNumber = 38;
    private int maxLevelHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxLevelHealth {
      get { return maxLevelHealth_; }
      set {
        maxLevelHealth_ = value;
      }
    }

    /// <summary>Field number for the "minLevelMana" field.</summary>
    public const int MinLevelManaFieldNumber = 39;
    private int minLevelMana_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinLevelMana {
      get { return minLevelMana_; }
      set {
        minLevelMana_ = value;
      }
    }

    /// <summary>Field number for the "maxLevelMana" field.</summary>
    public const int MaxLevelManaFieldNumber = 40;
    private int maxLevelMana_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxLevelMana {
      get { return maxLevelMana_; }
      set {
        maxLevelMana_ = value;
      }
    }

    /// <summary>Field number for the "minMeleeDmg" field.</summary>
    public const int MinMeleeDmgFieldNumber = 41;
    private float minMeleeDmg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinMeleeDmg {
      get { return minMeleeDmg_; }
      set {
        minMeleeDmg_ = value;
      }
    }

    /// <summary>Field number for the "maxMeleeDmg" field.</summary>
    public const int MaxMeleeDmgFieldNumber = 42;
    private float maxMeleeDmg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxMeleeDmg {
      get { return maxMeleeDmg_; }
      set {
        maxMeleeDmg_ = value;
      }
    }

    /// <summary>Field number for the "minRangedDmg" field.</summary>
    public const int MinRangedDmgFieldNumber = 43;
    private float minRangedDmg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinRangedDmg {
      get { return minRangedDmg_; }
      set {
        minRangedDmg_ = value;
      }
    }

    /// <summary>Field number for the "maxRangedDmg" field.</summary>
    public const int MaxRangedDmgFieldNumber = 44;
    private float maxRangedDmg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxRangedDmg {
      get { return maxRangedDmg_; }
      set {
        maxRangedDmg_ = value;
      }
    }

    /// <summary>Field number for the "armor" field.</summary>
    public const int ArmorFieldNumber = 45;
    private int armor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Armor {
      get { return armor_; }
      set {
        armor_ = value;
      }
    }

    /// <summary>Field number for the "meleeAttackPower" field.</summary>
    public const int MeleeAttackPowerFieldNumber = 46;
    private int meleeAttackPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MeleeAttackPower {
      get { return meleeAttackPower_; }
      set {
        meleeAttackPower_ = value;
      }
    }

    /// <summary>Field number for the "rangedAttackPower" field.</summary>
    public const int RangedAttackPowerFieldNumber = 47;
    private int rangedAttackPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RangedAttackPower {
      get { return rangedAttackPower_; }
      set {
        rangedAttackPower_ = value;
      }
    }

    /// <summary>Field number for the "meleeBaseAttackTime" field.</summary>
    public const int MeleeBaseAttackTimeFieldNumber = 48;
    private int meleeBaseAttackTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MeleeBaseAttackTime {
      get { return meleeBaseAttackTime_; }
      set {
        meleeBaseAttackTime_ = value;
      }
    }

    /// <summary>Field number for the "rangedBaseAttackTime" field.</summary>
    public const int RangedBaseAttackTimeFieldNumber = 49;
    private int rangedBaseAttackTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RangedBaseAttackTime {
      get { return rangedBaseAttackTime_; }
      set {
        rangedBaseAttackTime_ = value;
      }
    }

    /// <summary>Field number for the "damageSchool" field.</summary>
    public const int DamageSchoolFieldNumber = 50;
    private uint damageSchool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DamageSchool {
      get { return damageSchool_; }
      set {
        damageSchool_ = value;
      }
    }

    /// <summary>Field number for the "minLootGold" field.</summary>
    public const int MinLootGoldFieldNumber = 51;
    private int minLootGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinLootGold {
      get { return minLootGold_; }
      set {
        minLootGold_ = value;
      }
    }

    /// <summary>Field number for the "maxLootGold" field.</summary>
    public const int MaxLootGoldFieldNumber = 52;
    private int maxLootGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxLootGold {
      get { return maxLootGold_; }
      set {
        maxLootGold_ = value;
      }
    }

    /// <summary>Field number for the "lootId" field.</summary>
    public const int LootIdFieldNumber = 53;
    private int lootId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LootId {
      get { return lootId_; }
      set {
        lootId_ = value;
      }
    }

    /// <summary>Field number for the "pickpocketLootId" field.</summary>
    public const int PickpocketLootIdFieldNumber = 54;
    private int pickpocketLootId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PickpocketLootId {
      get { return pickpocketLootId_; }
      set {
        pickpocketLootId_ = value;
      }
    }

    /// <summary>Field number for the "skinningLootId" field.</summary>
    public const int SkinningLootIdFieldNumber = 55;
    private int skinningLootId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkinningLootId {
      get { return skinningLootId_; }
      set {
        skinningLootId_ = value;
      }
    }

    /// <summary>Field number for the "killCredit1" field.</summary>
    public const int KillCredit1FieldNumber = 56;
    private int killCredit1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int KillCredit1 {
      get { return killCredit1_; }
      set {
        killCredit1_ = value;
      }
    }

    /// <summary>Field number for the "killCredit2" field.</summary>
    public const int KillCredit2FieldNumber = 57;
    private int killCredit2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int KillCredit2 {
      get { return killCredit2_; }
      set {
        killCredit2_ = value;
      }
    }

    /// <summary>Field number for the "mechanicImmuneMask" field.</summary>
    public const int MechanicImmuneMaskFieldNumber = 58;
    private int mechanicImmuneMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MechanicImmuneMask {
      get { return mechanicImmuneMask_; }
      set {
        mechanicImmuneMask_ = value;
      }
    }

    /// <summary>Field number for the "schoolImmuneMask" field.</summary>
    public const int SchoolImmuneMaskFieldNumber = 59;
    private int schoolImmuneMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SchoolImmuneMask {
      get { return schoolImmuneMask_; }
      set {
        schoolImmuneMask_ = value;
      }
    }

    /// <summary>Field number for the "resistances" field.</summary>
    public const int ResistancesFieldNumber = 60;
    private static readonly pbc::MapField<uint, uint>.Codec _map_resistances_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 482);
    private readonly pbc::MapField<uint, uint> resistances_ = new pbc::MapField<uint, uint>();
    /// <summary>
    /// Reused Resistances
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<uint, uint> Resistances {
      get { return resistances_; }
    }

    /// <summary>Field number for the "petSpellDataId" field.</summary>
    public const int PetSpellDataIdFieldNumber = 66;
    private int petSpellDataId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PetSpellDataId {
      get { return petSpellDataId_; }
      set {
        petSpellDataId_ = value;
      }
    }

    /// <summary>Field number for the "movementType" field.</summary>
    public const int MovementTypeFieldNumber = 67;
    private uint movementType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MovementType {
      get { return movementType_; }
      set {
        movementType_ = value;
      }
    }

    /// <summary>Field number for the "trainerType" field.</summary>
    public const int TrainerTypeFieldNumber = 68;
    private uint trainerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TrainerType {
      get { return trainerType_; }
      set {
        trainerType_ = value;
      }
    }

    /// <summary>Field number for the "trainerSpell" field.</summary>
    public const int TrainerSpellFieldNumber = 69;
    private int trainerSpell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TrainerSpell {
      get { return trainerSpell_; }
      set {
        trainerSpell_ = value;
      }
    }

    /// <summary>Field number for the "trainerClass" field.</summary>
    public const int TrainerClassFieldNumber = 70;
    private uint trainerClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TrainerClass {
      get { return trainerClass_; }
      set {
        trainerClass_ = value;
      }
    }

    /// <summary>Field number for the "trainerRace" field.</summary>
    public const int TrainerRaceFieldNumber = 71;
    private uint trainerRace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TrainerRace {
      get { return trainerRace_; }
      set {
        trainerRace_ = value;
      }
    }

    /// <summary>Field number for the "trainerTemplateId" field.</summary>
    public const int TrainerTemplateIdFieldNumber = 72;
    private int trainerTemplateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TrainerTemplateId {
      get { return trainerTemplateId_; }
      set {
        trainerTemplateId_ = value;
      }
    }

    /// <summary>Field number for the "vendorTemplateId" field.</summary>
    public const int VendorTemplateIdFieldNumber = 73;
    private int vendorTemplateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VendorTemplateId {
      get { return vendorTemplateId_; }
      set {
        vendorTemplateId_ = value;
      }
    }

    /// <summary>Field number for the "gossipMenuId" field.</summary>
    public const int GossipMenuIdFieldNumber = 74;
    private int gossipMenuId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GossipMenuId {
      get { return gossipMenuId_; }
      set {
        gossipMenuId_ = value;
      }
    }

    /// <summary>Field number for the "interactionPauseTimer" field.</summary>
    public const int InteractionPauseTimerFieldNumber = 75;
    private int interactionPauseTimer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InteractionPauseTimer {
      get { return interactionPauseTimer_; }
      set {
        interactionPauseTimer_ = value;
      }
    }

    /// <summary>Field number for the "visibilityDistanceType" field.</summary>
    public const int VisibilityDistanceTypeFieldNumber = 76;
    private uint visibilityDistanceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VisibilityDistanceType {
      get { return visibilityDistanceType_; }
      set {
        visibilityDistanceType_ = value;
      }
    }

    /// <summary>Field number for the "corpseDecay" field.</summary>
    public const int CorpseDecayFieldNumber = 77;
    private int corpseDecay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CorpseDecay {
      get { return corpseDecay_; }
      set {
        corpseDecay_ = value;
      }
    }

    /// <summary>Field number for the "spellList" field.</summary>
    public const int SpellListFieldNumber = 78;
    private int spellList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellList {
      get { return spellList_; }
      set {
        spellList_ = value;
      }
    }

    /// <summary>Field number for the "equipmentTemplateId" field.</summary>
    public const int EquipmentTemplateIdFieldNumber = 79;
    private int equipmentTemplateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EquipmentTemplateId {
      get { return equipmentTemplateId_; }
      set {
        equipmentTemplateId_ = value;
      }
    }

    /// <summary>Field number for the "civilian" field.</summary>
    public const int CivilianFieldNumber = 80;
    private uint civilian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Civilian {
      get { return civilian_; }
      set {
        civilian_ = value;
      }
    }

    /// <summary>Field number for the "aiName" field.</summary>
    public const int AiNameFieldNumber = 81;
    private string aiName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AiName {
      get { return aiName_; }
      set {
        aiName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scriptName" field.</summary>
    public const int ScriptNameFieldNumber = 82;
    private string scriptName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ScriptName {
      get { return scriptName_; }
      set {
        scriptName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreatureTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreatureTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entry != other.Entry) return false;
      if (Name != other.Name) return false;
      if (SubName != other.SubName) return false;
      if (MinLevel != other.MinLevel) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if (ModelId1 != other.ModelId1) return false;
      if (ModelId2 != other.ModelId2) return false;
      if (ModelId3 != other.ModelId3) return false;
      if (ModelId4 != other.ModelId4) return false;
      if (Faction != other.Faction) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (Family != other.Family) return false;
      if (CreatureType != other.CreatureType) return false;
      if (InhabitType != other.InhabitType) return false;
      if (RegenerateStats != other.RegenerateStats) return false;
      if (RacialLeader != other.RacialLeader) return false;
      if (NpcFlags != other.NpcFlags) return false;
      if (UnitFlags != other.UnitFlags) return false;
      if (DynamicFlags != other.DynamicFlags) return false;
      if (ExtraFlags != other.ExtraFlags) return false;
      if (CreatureTypeFlags != other.CreatureTypeFlags) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedWalk, other.SpeedWalk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedRun, other.SpeedRun)) return false;
      if (Detection != other.Detection) return false;
      if (CallForHelp != other.CallForHelp) return false;
      if (Pursuit != other.Pursuit) return false;
      if (Leash != other.Leash) return false;
      if (Timeout != other.Timeout) return false;
      if (UnitClass != other.UnitClass) return false;
      if (Rank != other.Rank) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HealthMultiplier, other.HealthMultiplier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PowerMultiplier, other.PowerMultiplier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageMultiplier, other.DamageMultiplier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageVariance, other.DamageVariance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArmorMultiplier, other.ArmorMultiplier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExperienceMultiplier, other.ExperienceMultiplier)) return false;
      if (MinLevelHealth != other.MinLevelHealth) return false;
      if (MaxLevelHealth != other.MaxLevelHealth) return false;
      if (MinLevelMana != other.MinLevelMana) return false;
      if (MaxLevelMana != other.MaxLevelMana) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinMeleeDmg, other.MinMeleeDmg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxMeleeDmg, other.MaxMeleeDmg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinRangedDmg, other.MinRangedDmg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxRangedDmg, other.MaxRangedDmg)) return false;
      if (Armor != other.Armor) return false;
      if (MeleeAttackPower != other.MeleeAttackPower) return false;
      if (RangedAttackPower != other.RangedAttackPower) return false;
      if (MeleeBaseAttackTime != other.MeleeBaseAttackTime) return false;
      if (RangedBaseAttackTime != other.RangedBaseAttackTime) return false;
      if (DamageSchool != other.DamageSchool) return false;
      if (MinLootGold != other.MinLootGold) return false;
      if (MaxLootGold != other.MaxLootGold) return false;
      if (LootId != other.LootId) return false;
      if (PickpocketLootId != other.PickpocketLootId) return false;
      if (SkinningLootId != other.SkinningLootId) return false;
      if (KillCredit1 != other.KillCredit1) return false;
      if (KillCredit2 != other.KillCredit2) return false;
      if (MechanicImmuneMask != other.MechanicImmuneMask) return false;
      if (SchoolImmuneMask != other.SchoolImmuneMask) return false;
      if (!Resistances.Equals(other.Resistances)) return false;
      if (PetSpellDataId != other.PetSpellDataId) return false;
      if (MovementType != other.MovementType) return false;
      if (TrainerType != other.TrainerType) return false;
      if (TrainerSpell != other.TrainerSpell) return false;
      if (TrainerClass != other.TrainerClass) return false;
      if (TrainerRace != other.TrainerRace) return false;
      if (TrainerTemplateId != other.TrainerTemplateId) return false;
      if (VendorTemplateId != other.VendorTemplateId) return false;
      if (GossipMenuId != other.GossipMenuId) return false;
      if (InteractionPauseTimer != other.InteractionPauseTimer) return false;
      if (VisibilityDistanceType != other.VisibilityDistanceType) return false;
      if (CorpseDecay != other.CorpseDecay) return false;
      if (SpellList != other.SpellList) return false;
      if (EquipmentTemplateId != other.EquipmentTemplateId) return false;
      if (Civilian != other.Civilian) return false;
      if (AiName != other.AiName) return false;
      if (ScriptName != other.ScriptName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Entry != 0L) hash ^= Entry.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SubName.Length != 0) hash ^= SubName.GetHashCode();
      if (MinLevel != 0) hash ^= MinLevel.GetHashCode();
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      if (ModelId1 != 0) hash ^= ModelId1.GetHashCode();
      if (ModelId2 != 0) hash ^= ModelId2.GetHashCode();
      if (ModelId3 != 0) hash ^= ModelId3.GetHashCode();
      if (ModelId4 != 0) hash ^= ModelId4.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (Family != 0) hash ^= Family.GetHashCode();
      if (CreatureType != 0) hash ^= CreatureType.GetHashCode();
      if (InhabitType != 0) hash ^= InhabitType.GetHashCode();
      if (RegenerateStats != 0) hash ^= RegenerateStats.GetHashCode();
      if (RacialLeader != 0) hash ^= RacialLeader.GetHashCode();
      if (NpcFlags != 0) hash ^= NpcFlags.GetHashCode();
      if (UnitFlags != 0) hash ^= UnitFlags.GetHashCode();
      if (DynamicFlags != 0) hash ^= DynamicFlags.GetHashCode();
      if (ExtraFlags != 0) hash ^= ExtraFlags.GetHashCode();
      if (CreatureTypeFlags != 0) hash ^= CreatureTypeFlags.GetHashCode();
      if (SpeedWalk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedWalk);
      if (SpeedRun != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedRun);
      if (Detection != 0) hash ^= Detection.GetHashCode();
      if (CallForHelp != 0) hash ^= CallForHelp.GetHashCode();
      if (Pursuit != 0) hash ^= Pursuit.GetHashCode();
      if (Leash != 0) hash ^= Leash.GetHashCode();
      if (Timeout != 0) hash ^= Timeout.GetHashCode();
      if (UnitClass != 0) hash ^= UnitClass.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (HealthMultiplier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HealthMultiplier);
      if (PowerMultiplier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PowerMultiplier);
      if (DamageMultiplier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageMultiplier);
      if (DamageVariance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageVariance);
      if (ArmorMultiplier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArmorMultiplier);
      if (ExperienceMultiplier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExperienceMultiplier);
      if (MinLevelHealth != 0) hash ^= MinLevelHealth.GetHashCode();
      if (MaxLevelHealth != 0) hash ^= MaxLevelHealth.GetHashCode();
      if (MinLevelMana != 0) hash ^= MinLevelMana.GetHashCode();
      if (MaxLevelMana != 0) hash ^= MaxLevelMana.GetHashCode();
      if (MinMeleeDmg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinMeleeDmg);
      if (MaxMeleeDmg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxMeleeDmg);
      if (MinRangedDmg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinRangedDmg);
      if (MaxRangedDmg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxRangedDmg);
      if (Armor != 0) hash ^= Armor.GetHashCode();
      if (MeleeAttackPower != 0) hash ^= MeleeAttackPower.GetHashCode();
      if (RangedAttackPower != 0) hash ^= RangedAttackPower.GetHashCode();
      if (MeleeBaseAttackTime != 0) hash ^= MeleeBaseAttackTime.GetHashCode();
      if (RangedBaseAttackTime != 0) hash ^= RangedBaseAttackTime.GetHashCode();
      if (DamageSchool != 0) hash ^= DamageSchool.GetHashCode();
      if (MinLootGold != 0) hash ^= MinLootGold.GetHashCode();
      if (MaxLootGold != 0) hash ^= MaxLootGold.GetHashCode();
      if (LootId != 0) hash ^= LootId.GetHashCode();
      if (PickpocketLootId != 0) hash ^= PickpocketLootId.GetHashCode();
      if (SkinningLootId != 0) hash ^= SkinningLootId.GetHashCode();
      if (KillCredit1 != 0) hash ^= KillCredit1.GetHashCode();
      if (KillCredit2 != 0) hash ^= KillCredit2.GetHashCode();
      if (MechanicImmuneMask != 0) hash ^= MechanicImmuneMask.GetHashCode();
      if (SchoolImmuneMask != 0) hash ^= SchoolImmuneMask.GetHashCode();
      hash ^= Resistances.GetHashCode();
      if (PetSpellDataId != 0) hash ^= PetSpellDataId.GetHashCode();
      if (MovementType != 0) hash ^= MovementType.GetHashCode();
      if (TrainerType != 0) hash ^= TrainerType.GetHashCode();
      if (TrainerSpell != 0) hash ^= TrainerSpell.GetHashCode();
      if (TrainerClass != 0) hash ^= TrainerClass.GetHashCode();
      if (TrainerRace != 0) hash ^= TrainerRace.GetHashCode();
      if (TrainerTemplateId != 0) hash ^= TrainerTemplateId.GetHashCode();
      if (VendorTemplateId != 0) hash ^= VendorTemplateId.GetHashCode();
      if (GossipMenuId != 0) hash ^= GossipMenuId.GetHashCode();
      if (InteractionPauseTimer != 0) hash ^= InteractionPauseTimer.GetHashCode();
      if (VisibilityDistanceType != 0) hash ^= VisibilityDistanceType.GetHashCode();
      if (CorpseDecay != 0) hash ^= CorpseDecay.GetHashCode();
      if (SpellList != 0) hash ^= SpellList.GetHashCode();
      if (EquipmentTemplateId != 0) hash ^= EquipmentTemplateId.GetHashCode();
      if (Civilian != 0) hash ^= Civilian.GetHashCode();
      if (AiName.Length != 0) hash ^= AiName.GetHashCode();
      if (ScriptName.Length != 0) hash ^= ScriptName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Entry != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Entry);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (SubName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SubName);
      }
      if (MinLevel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MinLevel);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MaxLevel);
      }
      if (ModelId1 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ModelId1);
      }
      if (ModelId2 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ModelId2);
      }
      if (ModelId3 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ModelId3);
      }
      if (ModelId4 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ModelId4);
      }
      if (Faction != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Faction);
      }
      if (Scale != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Scale);
      }
      if (Family != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Family);
      }
      if (CreatureType != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(CreatureType);
      }
      if (InhabitType != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(InhabitType);
      }
      if (RegenerateStats != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(RegenerateStats);
      }
      if (RacialLeader != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(RacialLeader);
      }
      if (NpcFlags != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(NpcFlags);
      }
      if (UnitFlags != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(UnitFlags);
      }
      if (DynamicFlags != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(DynamicFlags);
      }
      if (ExtraFlags != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ExtraFlags);
      }
      if (CreatureTypeFlags != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(CreatureTypeFlags);
      }
      if (SpeedWalk != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(SpeedWalk);
      }
      if (SpeedRun != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(SpeedRun);
      }
      if (Detection != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Detection);
      }
      if (CallForHelp != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(CallForHelp);
      }
      if (Pursuit != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Pursuit);
      }
      if (Leash != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(Leash);
      }
      if (Timeout != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(Timeout);
      }
      if (UnitClass != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(UnitClass);
      }
      if (Rank != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(Rank);
      }
      if (HealthMultiplier != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(HealthMultiplier);
      }
      if (PowerMultiplier != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(PowerMultiplier);
      }
      if (DamageMultiplier != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(DamageMultiplier);
      }
      if (DamageVariance != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(DamageVariance);
      }
      if (ArmorMultiplier != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(ArmorMultiplier);
      }
      if (ExperienceMultiplier != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(ExperienceMultiplier);
      }
      if (MinLevelHealth != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(MinLevelHealth);
      }
      if (MaxLevelHealth != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(MaxLevelHealth);
      }
      if (MinLevelMana != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(MinLevelMana);
      }
      if (MaxLevelMana != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(MaxLevelMana);
      }
      if (MinMeleeDmg != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(MinMeleeDmg);
      }
      if (MaxMeleeDmg != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(MaxMeleeDmg);
      }
      if (MinRangedDmg != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(MinRangedDmg);
      }
      if (MaxRangedDmg != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(MaxRangedDmg);
      }
      if (Armor != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(Armor);
      }
      if (MeleeAttackPower != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(MeleeAttackPower);
      }
      if (RangedAttackPower != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(RangedAttackPower);
      }
      if (MeleeBaseAttackTime != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(MeleeBaseAttackTime);
      }
      if (RangedBaseAttackTime != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(RangedBaseAttackTime);
      }
      if (DamageSchool != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(DamageSchool);
      }
      if (MinLootGold != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(MinLootGold);
      }
      if (MaxLootGold != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(MaxLootGold);
      }
      if (LootId != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(LootId);
      }
      if (PickpocketLootId != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(PickpocketLootId);
      }
      if (SkinningLootId != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(SkinningLootId);
      }
      if (KillCredit1 != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(KillCredit1);
      }
      if (KillCredit2 != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(KillCredit2);
      }
      if (MechanicImmuneMask != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(MechanicImmuneMask);
      }
      if (SchoolImmuneMask != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(SchoolImmuneMask);
      }
      resistances_.WriteTo(output, _map_resistances_codec);
      if (PetSpellDataId != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(PetSpellDataId);
      }
      if (MovementType != 0) {
        output.WriteRawTag(152, 4);
        output.WriteUInt32(MovementType);
      }
      if (TrainerType != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(TrainerType);
      }
      if (TrainerSpell != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(TrainerSpell);
      }
      if (TrainerClass != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(TrainerClass);
      }
      if (TrainerRace != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(TrainerRace);
      }
      if (TrainerTemplateId != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(TrainerTemplateId);
      }
      if (VendorTemplateId != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(VendorTemplateId);
      }
      if (GossipMenuId != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(GossipMenuId);
      }
      if (InteractionPauseTimer != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(InteractionPauseTimer);
      }
      if (VisibilityDistanceType != 0) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(VisibilityDistanceType);
      }
      if (CorpseDecay != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(CorpseDecay);
      }
      if (SpellList != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(SpellList);
      }
      if (EquipmentTemplateId != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(EquipmentTemplateId);
      }
      if (Civilian != 0) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(Civilian);
      }
      if (AiName.Length != 0) {
        output.WriteRawTag(138, 5);
        output.WriteString(AiName);
      }
      if (ScriptName.Length != 0) {
        output.WriteRawTag(146, 5);
        output.WriteString(ScriptName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Entry != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Entry);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (SubName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SubName);
      }
      if (MinLevel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MinLevel);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MaxLevel);
      }
      if (ModelId1 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ModelId1);
      }
      if (ModelId2 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ModelId2);
      }
      if (ModelId3 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ModelId3);
      }
      if (ModelId4 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ModelId4);
      }
      if (Faction != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Faction);
      }
      if (Scale != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Scale);
      }
      if (Family != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Family);
      }
      if (CreatureType != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(CreatureType);
      }
      if (InhabitType != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(InhabitType);
      }
      if (RegenerateStats != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(RegenerateStats);
      }
      if (RacialLeader != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(RacialLeader);
      }
      if (NpcFlags != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(NpcFlags);
      }
      if (UnitFlags != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(UnitFlags);
      }
      if (DynamicFlags != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(DynamicFlags);
      }
      if (ExtraFlags != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ExtraFlags);
      }
      if (CreatureTypeFlags != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(CreatureTypeFlags);
      }
      if (SpeedWalk != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(SpeedWalk);
      }
      if (SpeedRun != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(SpeedRun);
      }
      if (Detection != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Detection);
      }
      if (CallForHelp != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(CallForHelp);
      }
      if (Pursuit != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Pursuit);
      }
      if (Leash != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(Leash);
      }
      if (Timeout != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(Timeout);
      }
      if (UnitClass != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(UnitClass);
      }
      if (Rank != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(Rank);
      }
      if (HealthMultiplier != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(HealthMultiplier);
      }
      if (PowerMultiplier != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(PowerMultiplier);
      }
      if (DamageMultiplier != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(DamageMultiplier);
      }
      if (DamageVariance != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(DamageVariance);
      }
      if (ArmorMultiplier != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(ArmorMultiplier);
      }
      if (ExperienceMultiplier != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(ExperienceMultiplier);
      }
      if (MinLevelHealth != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(MinLevelHealth);
      }
      if (MaxLevelHealth != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(MaxLevelHealth);
      }
      if (MinLevelMana != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(MinLevelMana);
      }
      if (MaxLevelMana != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(MaxLevelMana);
      }
      if (MinMeleeDmg != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(MinMeleeDmg);
      }
      if (MaxMeleeDmg != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(MaxMeleeDmg);
      }
      if (MinRangedDmg != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(MinRangedDmg);
      }
      if (MaxRangedDmg != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(MaxRangedDmg);
      }
      if (Armor != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(Armor);
      }
      if (MeleeAttackPower != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(MeleeAttackPower);
      }
      if (RangedAttackPower != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(RangedAttackPower);
      }
      if (MeleeBaseAttackTime != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(MeleeBaseAttackTime);
      }
      if (RangedBaseAttackTime != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(RangedBaseAttackTime);
      }
      if (DamageSchool != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(DamageSchool);
      }
      if (MinLootGold != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(MinLootGold);
      }
      if (MaxLootGold != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(MaxLootGold);
      }
      if (LootId != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(LootId);
      }
      if (PickpocketLootId != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(PickpocketLootId);
      }
      if (SkinningLootId != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(SkinningLootId);
      }
      if (KillCredit1 != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(KillCredit1);
      }
      if (KillCredit2 != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(KillCredit2);
      }
      if (MechanicImmuneMask != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(MechanicImmuneMask);
      }
      if (SchoolImmuneMask != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(SchoolImmuneMask);
      }
      resistances_.WriteTo(ref output, _map_resistances_codec);
      if (PetSpellDataId != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(PetSpellDataId);
      }
      if (MovementType != 0) {
        output.WriteRawTag(152, 4);
        output.WriteUInt32(MovementType);
      }
      if (TrainerType != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(TrainerType);
      }
      if (TrainerSpell != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(TrainerSpell);
      }
      if (TrainerClass != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(TrainerClass);
      }
      if (TrainerRace != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(TrainerRace);
      }
      if (TrainerTemplateId != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(TrainerTemplateId);
      }
      if (VendorTemplateId != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(VendorTemplateId);
      }
      if (GossipMenuId != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(GossipMenuId);
      }
      if (InteractionPauseTimer != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(InteractionPauseTimer);
      }
      if (VisibilityDistanceType != 0) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(VisibilityDistanceType);
      }
      if (CorpseDecay != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(CorpseDecay);
      }
      if (SpellList != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(SpellList);
      }
      if (EquipmentTemplateId != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(EquipmentTemplateId);
      }
      if (Civilian != 0) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(Civilian);
      }
      if (AiName.Length != 0) {
        output.WriteRawTag(138, 5);
        output.WriteString(AiName);
      }
      if (ScriptName.Length != 0) {
        output.WriteRawTag(146, 5);
        output.WriteString(ScriptName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Entry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Entry);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SubName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubName);
      }
      if (MinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinLevel);
      }
      if (MaxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxLevel);
      }
      if (ModelId1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId1);
      }
      if (ModelId2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId2);
      }
      if (ModelId3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId3);
      }
      if (ModelId4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId4);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Family != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Family);
      }
      if (CreatureType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreatureType);
      }
      if (InhabitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InhabitType);
      }
      if (RegenerateStats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RegenerateStats);
      }
      if (RacialLeader != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RacialLeader);
      }
      if (NpcFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NpcFlags);
      }
      if (UnitFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnitFlags);
      }
      if (DynamicFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DynamicFlags);
      }
      if (ExtraFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExtraFlags);
      }
      if (CreatureTypeFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CreatureTypeFlags);
      }
      if (SpeedWalk != 0F) {
        size += 2 + 4;
      }
      if (SpeedRun != 0F) {
        size += 2 + 4;
      }
      if (Detection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Detection);
      }
      if (CallForHelp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CallForHelp);
      }
      if (Pursuit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Pursuit);
      }
      if (Leash != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Leash);
      }
      if (Timeout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Timeout);
      }
      if (UnitClass != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnitClass);
      }
      if (Rank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (HealthMultiplier != 0F) {
        size += 2 + 4;
      }
      if (PowerMultiplier != 0F) {
        size += 2 + 4;
      }
      if (DamageMultiplier != 0F) {
        size += 2 + 4;
      }
      if (DamageVariance != 0F) {
        size += 2 + 4;
      }
      if (ArmorMultiplier != 0F) {
        size += 2 + 4;
      }
      if (ExperienceMultiplier != 0F) {
        size += 2 + 4;
      }
      if (MinLevelHealth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinLevelHealth);
      }
      if (MaxLevelHealth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxLevelHealth);
      }
      if (MinLevelMana != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinLevelMana);
      }
      if (MaxLevelMana != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxLevelMana);
      }
      if (MinMeleeDmg != 0F) {
        size += 2 + 4;
      }
      if (MaxMeleeDmg != 0F) {
        size += 2 + 4;
      }
      if (MinRangedDmg != 0F) {
        size += 2 + 4;
      }
      if (MaxRangedDmg != 0F) {
        size += 2 + 4;
      }
      if (Armor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Armor);
      }
      if (MeleeAttackPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MeleeAttackPower);
      }
      if (RangedAttackPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RangedAttackPower);
      }
      if (MeleeBaseAttackTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MeleeBaseAttackTime);
      }
      if (RangedBaseAttackTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RangedBaseAttackTime);
      }
      if (DamageSchool != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DamageSchool);
      }
      if (MinLootGold != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinLootGold);
      }
      if (MaxLootGold != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxLootGold);
      }
      if (LootId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LootId);
      }
      if (PickpocketLootId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PickpocketLootId);
      }
      if (SkinningLootId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkinningLootId);
      }
      if (KillCredit1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(KillCredit1);
      }
      if (KillCredit2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(KillCredit2);
      }
      if (MechanicImmuneMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MechanicImmuneMask);
      }
      if (SchoolImmuneMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SchoolImmuneMask);
      }
      size += resistances_.CalculateSize(_map_resistances_codec);
      if (PetSpellDataId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PetSpellDataId);
      }
      if (MovementType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MovementType);
      }
      if (TrainerType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TrainerType);
      }
      if (TrainerSpell != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TrainerSpell);
      }
      if (TrainerClass != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TrainerClass);
      }
      if (TrainerRace != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TrainerRace);
      }
      if (TrainerTemplateId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TrainerTemplateId);
      }
      if (VendorTemplateId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VendorTemplateId);
      }
      if (GossipMenuId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GossipMenuId);
      }
      if (InteractionPauseTimer != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InteractionPauseTimer);
      }
      if (VisibilityDistanceType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VisibilityDistanceType);
      }
      if (CorpseDecay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CorpseDecay);
      }
      if (SpellList != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellList);
      }
      if (EquipmentTemplateId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EquipmentTemplateId);
      }
      if (Civilian != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Civilian);
      }
      if (AiName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AiName);
      }
      if (ScriptName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ScriptName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreatureTemplate other) {
      if (other == null) {
        return;
      }
      if (other.Entry != 0L) {
        Entry = other.Entry;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SubName.Length != 0) {
        SubName = other.SubName;
      }
      if (other.MinLevel != 0) {
        MinLevel = other.MinLevel;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      if (other.ModelId1 != 0) {
        ModelId1 = other.ModelId1;
      }
      if (other.ModelId2 != 0) {
        ModelId2 = other.ModelId2;
      }
      if (other.ModelId3 != 0) {
        ModelId3 = other.ModelId3;
      }
      if (other.ModelId4 != 0) {
        ModelId4 = other.ModelId4;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Family != 0) {
        Family = other.Family;
      }
      if (other.CreatureType != 0) {
        CreatureType = other.CreatureType;
      }
      if (other.InhabitType != 0) {
        InhabitType = other.InhabitType;
      }
      if (other.RegenerateStats != 0) {
        RegenerateStats = other.RegenerateStats;
      }
      if (other.RacialLeader != 0) {
        RacialLeader = other.RacialLeader;
      }
      if (other.NpcFlags != 0) {
        NpcFlags = other.NpcFlags;
      }
      if (other.UnitFlags != 0) {
        UnitFlags = other.UnitFlags;
      }
      if (other.DynamicFlags != 0) {
        DynamicFlags = other.DynamicFlags;
      }
      if (other.ExtraFlags != 0) {
        ExtraFlags = other.ExtraFlags;
      }
      if (other.CreatureTypeFlags != 0) {
        CreatureTypeFlags = other.CreatureTypeFlags;
      }
      if (other.SpeedWalk != 0F) {
        SpeedWalk = other.SpeedWalk;
      }
      if (other.SpeedRun != 0F) {
        SpeedRun = other.SpeedRun;
      }
      if (other.Detection != 0) {
        Detection = other.Detection;
      }
      if (other.CallForHelp != 0) {
        CallForHelp = other.CallForHelp;
      }
      if (other.Pursuit != 0) {
        Pursuit = other.Pursuit;
      }
      if (other.Leash != 0) {
        Leash = other.Leash;
      }
      if (other.Timeout != 0) {
        Timeout = other.Timeout;
      }
      if (other.UnitClass != 0) {
        UnitClass = other.UnitClass;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.HealthMultiplier != 0F) {
        HealthMultiplier = other.HealthMultiplier;
      }
      if (other.PowerMultiplier != 0F) {
        PowerMultiplier = other.PowerMultiplier;
      }
      if (other.DamageMultiplier != 0F) {
        DamageMultiplier = other.DamageMultiplier;
      }
      if (other.DamageVariance != 0F) {
        DamageVariance = other.DamageVariance;
      }
      if (other.ArmorMultiplier != 0F) {
        ArmorMultiplier = other.ArmorMultiplier;
      }
      if (other.ExperienceMultiplier != 0F) {
        ExperienceMultiplier = other.ExperienceMultiplier;
      }
      if (other.MinLevelHealth != 0) {
        MinLevelHealth = other.MinLevelHealth;
      }
      if (other.MaxLevelHealth != 0) {
        MaxLevelHealth = other.MaxLevelHealth;
      }
      if (other.MinLevelMana != 0) {
        MinLevelMana = other.MinLevelMana;
      }
      if (other.MaxLevelMana != 0) {
        MaxLevelMana = other.MaxLevelMana;
      }
      if (other.MinMeleeDmg != 0F) {
        MinMeleeDmg = other.MinMeleeDmg;
      }
      if (other.MaxMeleeDmg != 0F) {
        MaxMeleeDmg = other.MaxMeleeDmg;
      }
      if (other.MinRangedDmg != 0F) {
        MinRangedDmg = other.MinRangedDmg;
      }
      if (other.MaxRangedDmg != 0F) {
        MaxRangedDmg = other.MaxRangedDmg;
      }
      if (other.Armor != 0) {
        Armor = other.Armor;
      }
      if (other.MeleeAttackPower != 0) {
        MeleeAttackPower = other.MeleeAttackPower;
      }
      if (other.RangedAttackPower != 0) {
        RangedAttackPower = other.RangedAttackPower;
      }
      if (other.MeleeBaseAttackTime != 0) {
        MeleeBaseAttackTime = other.MeleeBaseAttackTime;
      }
      if (other.RangedBaseAttackTime != 0) {
        RangedBaseAttackTime = other.RangedBaseAttackTime;
      }
      if (other.DamageSchool != 0) {
        DamageSchool = other.DamageSchool;
      }
      if (other.MinLootGold != 0) {
        MinLootGold = other.MinLootGold;
      }
      if (other.MaxLootGold != 0) {
        MaxLootGold = other.MaxLootGold;
      }
      if (other.LootId != 0) {
        LootId = other.LootId;
      }
      if (other.PickpocketLootId != 0) {
        PickpocketLootId = other.PickpocketLootId;
      }
      if (other.SkinningLootId != 0) {
        SkinningLootId = other.SkinningLootId;
      }
      if (other.KillCredit1 != 0) {
        KillCredit1 = other.KillCredit1;
      }
      if (other.KillCredit2 != 0) {
        KillCredit2 = other.KillCredit2;
      }
      if (other.MechanicImmuneMask != 0) {
        MechanicImmuneMask = other.MechanicImmuneMask;
      }
      if (other.SchoolImmuneMask != 0) {
        SchoolImmuneMask = other.SchoolImmuneMask;
      }
      resistances_.MergeFrom(other.resistances_);
      if (other.PetSpellDataId != 0) {
        PetSpellDataId = other.PetSpellDataId;
      }
      if (other.MovementType != 0) {
        MovementType = other.MovementType;
      }
      if (other.TrainerType != 0) {
        TrainerType = other.TrainerType;
      }
      if (other.TrainerSpell != 0) {
        TrainerSpell = other.TrainerSpell;
      }
      if (other.TrainerClass != 0) {
        TrainerClass = other.TrainerClass;
      }
      if (other.TrainerRace != 0) {
        TrainerRace = other.TrainerRace;
      }
      if (other.TrainerTemplateId != 0) {
        TrainerTemplateId = other.TrainerTemplateId;
      }
      if (other.VendorTemplateId != 0) {
        VendorTemplateId = other.VendorTemplateId;
      }
      if (other.GossipMenuId != 0) {
        GossipMenuId = other.GossipMenuId;
      }
      if (other.InteractionPauseTimer != 0) {
        InteractionPauseTimer = other.InteractionPauseTimer;
      }
      if (other.VisibilityDistanceType != 0) {
        VisibilityDistanceType = other.VisibilityDistanceType;
      }
      if (other.CorpseDecay != 0) {
        CorpseDecay = other.CorpseDecay;
      }
      if (other.SpellList != 0) {
        SpellList = other.SpellList;
      }
      if (other.EquipmentTemplateId != 0) {
        EquipmentTemplateId = other.EquipmentTemplateId;
      }
      if (other.Civilian != 0) {
        Civilian = other.Civilian;
      }
      if (other.AiName.Length != 0) {
        AiName = other.AiName;
      }
      if (other.ScriptName.Length != 0) {
        ScriptName = other.ScriptName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entry = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            SubName = input.ReadString();
            break;
          }
          case 32: {
            MinLevel = input.ReadUInt32();
            break;
          }
          case 40: {
            MaxLevel = input.ReadUInt32();
            break;
          }
          case 48: {
            ModelId1 = input.ReadInt32();
            break;
          }
          case 56: {
            ModelId2 = input.ReadInt32();
            break;
          }
          case 64: {
            ModelId3 = input.ReadInt32();
            break;
          }
          case 72: {
            ModelId4 = input.ReadInt32();
            break;
          }
          case 80: {
            Faction = input.ReadInt32();
            break;
          }
          case 93: {
            Scale = input.ReadFloat();
            break;
          }
          case 96: {
            Family = input.ReadUInt32();
            break;
          }
          case 104: {
            CreatureType = input.ReadUInt32();
            break;
          }
          case 112: {
            InhabitType = input.ReadUInt32();
            break;
          }
          case 120: {
            RegenerateStats = input.ReadUInt32();
            break;
          }
          case 128: {
            RacialLeader = input.ReadUInt32();
            break;
          }
          case 136: {
            NpcFlags = input.ReadInt32();
            break;
          }
          case 144: {
            UnitFlags = input.ReadInt32();
            break;
          }
          case 152: {
            DynamicFlags = input.ReadInt32();
            break;
          }
          case 160: {
            ExtraFlags = input.ReadInt32();
            break;
          }
          case 168: {
            CreatureTypeFlags = input.ReadInt32();
            break;
          }
          case 181: {
            SpeedWalk = input.ReadFloat();
            break;
          }
          case 189: {
            SpeedRun = input.ReadFloat();
            break;
          }
          case 192: {
            Detection = input.ReadInt32();
            break;
          }
          case 200: {
            CallForHelp = input.ReadInt32();
            break;
          }
          case 208: {
            Pursuit = input.ReadInt32();
            break;
          }
          case 216: {
            Leash = input.ReadInt32();
            break;
          }
          case 224: {
            Timeout = input.ReadInt32();
            break;
          }
          case 232: {
            UnitClass = input.ReadUInt32();
            break;
          }
          case 240: {
            Rank = input.ReadUInt32();
            break;
          }
          case 253: {
            HealthMultiplier = input.ReadFloat();
            break;
          }
          case 261: {
            PowerMultiplier = input.ReadFloat();
            break;
          }
          case 269: {
            DamageMultiplier = input.ReadFloat();
            break;
          }
          case 277: {
            DamageVariance = input.ReadFloat();
            break;
          }
          case 285: {
            ArmorMultiplier = input.ReadFloat();
            break;
          }
          case 293: {
            ExperienceMultiplier = input.ReadFloat();
            break;
          }
          case 296: {
            MinLevelHealth = input.ReadInt32();
            break;
          }
          case 304: {
            MaxLevelHealth = input.ReadInt32();
            break;
          }
          case 312: {
            MinLevelMana = input.ReadInt32();
            break;
          }
          case 320: {
            MaxLevelMana = input.ReadInt32();
            break;
          }
          case 333: {
            MinMeleeDmg = input.ReadFloat();
            break;
          }
          case 341: {
            MaxMeleeDmg = input.ReadFloat();
            break;
          }
          case 349: {
            MinRangedDmg = input.ReadFloat();
            break;
          }
          case 357: {
            MaxRangedDmg = input.ReadFloat();
            break;
          }
          case 360: {
            Armor = input.ReadInt32();
            break;
          }
          case 368: {
            MeleeAttackPower = input.ReadInt32();
            break;
          }
          case 376: {
            RangedAttackPower = input.ReadInt32();
            break;
          }
          case 384: {
            MeleeBaseAttackTime = input.ReadInt32();
            break;
          }
          case 392: {
            RangedBaseAttackTime = input.ReadInt32();
            break;
          }
          case 400: {
            DamageSchool = input.ReadUInt32();
            break;
          }
          case 408: {
            MinLootGold = input.ReadInt32();
            break;
          }
          case 416: {
            MaxLootGold = input.ReadInt32();
            break;
          }
          case 424: {
            LootId = input.ReadInt32();
            break;
          }
          case 432: {
            PickpocketLootId = input.ReadInt32();
            break;
          }
          case 440: {
            SkinningLootId = input.ReadInt32();
            break;
          }
          case 448: {
            KillCredit1 = input.ReadInt32();
            break;
          }
          case 456: {
            KillCredit2 = input.ReadInt32();
            break;
          }
          case 464: {
            MechanicImmuneMask = input.ReadInt32();
            break;
          }
          case 472: {
            SchoolImmuneMask = input.ReadInt32();
            break;
          }
          case 482: {
            resistances_.AddEntriesFrom(input, _map_resistances_codec);
            break;
          }
          case 528: {
            PetSpellDataId = input.ReadInt32();
            break;
          }
          case 536: {
            MovementType = input.ReadUInt32();
            break;
          }
          case 544: {
            TrainerType = input.ReadUInt32();
            break;
          }
          case 552: {
            TrainerSpell = input.ReadInt32();
            break;
          }
          case 560: {
            TrainerClass = input.ReadUInt32();
            break;
          }
          case 568: {
            TrainerRace = input.ReadUInt32();
            break;
          }
          case 576: {
            TrainerTemplateId = input.ReadInt32();
            break;
          }
          case 584: {
            VendorTemplateId = input.ReadInt32();
            break;
          }
          case 592: {
            GossipMenuId = input.ReadInt32();
            break;
          }
          case 600: {
            InteractionPauseTimer = input.ReadInt32();
            break;
          }
          case 608: {
            VisibilityDistanceType = input.ReadUInt32();
            break;
          }
          case 616: {
            CorpseDecay = input.ReadInt32();
            break;
          }
          case 624: {
            SpellList = input.ReadInt32();
            break;
          }
          case 632: {
            EquipmentTemplateId = input.ReadInt32();
            break;
          }
          case 640: {
            Civilian = input.ReadUInt32();
            break;
          }
          case 650: {
            AiName = input.ReadString();
            break;
          }
          case 658: {
            ScriptName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Entry = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            SubName = input.ReadString();
            break;
          }
          case 32: {
            MinLevel = input.ReadUInt32();
            break;
          }
          case 40: {
            MaxLevel = input.ReadUInt32();
            break;
          }
          case 48: {
            ModelId1 = input.ReadInt32();
            break;
          }
          case 56: {
            ModelId2 = input.ReadInt32();
            break;
          }
          case 64: {
            ModelId3 = input.ReadInt32();
            break;
          }
          case 72: {
            ModelId4 = input.ReadInt32();
            break;
          }
          case 80: {
            Faction = input.ReadInt32();
            break;
          }
          case 93: {
            Scale = input.ReadFloat();
            break;
          }
          case 96: {
            Family = input.ReadUInt32();
            break;
          }
          case 104: {
            CreatureType = input.ReadUInt32();
            break;
          }
          case 112: {
            InhabitType = input.ReadUInt32();
            break;
          }
          case 120: {
            RegenerateStats = input.ReadUInt32();
            break;
          }
          case 128: {
            RacialLeader = input.ReadUInt32();
            break;
          }
          case 136: {
            NpcFlags = input.ReadInt32();
            break;
          }
          case 144: {
            UnitFlags = input.ReadInt32();
            break;
          }
          case 152: {
            DynamicFlags = input.ReadInt32();
            break;
          }
          case 160: {
            ExtraFlags = input.ReadInt32();
            break;
          }
          case 168: {
            CreatureTypeFlags = input.ReadInt32();
            break;
          }
          case 181: {
            SpeedWalk = input.ReadFloat();
            break;
          }
          case 189: {
            SpeedRun = input.ReadFloat();
            break;
          }
          case 192: {
            Detection = input.ReadInt32();
            break;
          }
          case 200: {
            CallForHelp = input.ReadInt32();
            break;
          }
          case 208: {
            Pursuit = input.ReadInt32();
            break;
          }
          case 216: {
            Leash = input.ReadInt32();
            break;
          }
          case 224: {
            Timeout = input.ReadInt32();
            break;
          }
          case 232: {
            UnitClass = input.ReadUInt32();
            break;
          }
          case 240: {
            Rank = input.ReadUInt32();
            break;
          }
          case 253: {
            HealthMultiplier = input.ReadFloat();
            break;
          }
          case 261: {
            PowerMultiplier = input.ReadFloat();
            break;
          }
          case 269: {
            DamageMultiplier = input.ReadFloat();
            break;
          }
          case 277: {
            DamageVariance = input.ReadFloat();
            break;
          }
          case 285: {
            ArmorMultiplier = input.ReadFloat();
            break;
          }
          case 293: {
            ExperienceMultiplier = input.ReadFloat();
            break;
          }
          case 296: {
            MinLevelHealth = input.ReadInt32();
            break;
          }
          case 304: {
            MaxLevelHealth = input.ReadInt32();
            break;
          }
          case 312: {
            MinLevelMana = input.ReadInt32();
            break;
          }
          case 320: {
            MaxLevelMana = input.ReadInt32();
            break;
          }
          case 333: {
            MinMeleeDmg = input.ReadFloat();
            break;
          }
          case 341: {
            MaxMeleeDmg = input.ReadFloat();
            break;
          }
          case 349: {
            MinRangedDmg = input.ReadFloat();
            break;
          }
          case 357: {
            MaxRangedDmg = input.ReadFloat();
            break;
          }
          case 360: {
            Armor = input.ReadInt32();
            break;
          }
          case 368: {
            MeleeAttackPower = input.ReadInt32();
            break;
          }
          case 376: {
            RangedAttackPower = input.ReadInt32();
            break;
          }
          case 384: {
            MeleeBaseAttackTime = input.ReadInt32();
            break;
          }
          case 392: {
            RangedBaseAttackTime = input.ReadInt32();
            break;
          }
          case 400: {
            DamageSchool = input.ReadUInt32();
            break;
          }
          case 408: {
            MinLootGold = input.ReadInt32();
            break;
          }
          case 416: {
            MaxLootGold = input.ReadInt32();
            break;
          }
          case 424: {
            LootId = input.ReadInt32();
            break;
          }
          case 432: {
            PickpocketLootId = input.ReadInt32();
            break;
          }
          case 440: {
            SkinningLootId = input.ReadInt32();
            break;
          }
          case 448: {
            KillCredit1 = input.ReadInt32();
            break;
          }
          case 456: {
            KillCredit2 = input.ReadInt32();
            break;
          }
          case 464: {
            MechanicImmuneMask = input.ReadInt32();
            break;
          }
          case 472: {
            SchoolImmuneMask = input.ReadInt32();
            break;
          }
          case 482: {
            resistances_.AddEntriesFrom(ref input, _map_resistances_codec);
            break;
          }
          case 528: {
            PetSpellDataId = input.ReadInt32();
            break;
          }
          case 536: {
            MovementType = input.ReadUInt32();
            break;
          }
          case 544: {
            TrainerType = input.ReadUInt32();
            break;
          }
          case 552: {
            TrainerSpell = input.ReadInt32();
            break;
          }
          case 560: {
            TrainerClass = input.ReadUInt32();
            break;
          }
          case 568: {
            TrainerRace = input.ReadUInt32();
            break;
          }
          case 576: {
            TrainerTemplateId = input.ReadInt32();
            break;
          }
          case 584: {
            VendorTemplateId = input.ReadInt32();
            break;
          }
          case 592: {
            GossipMenuId = input.ReadInt32();
            break;
          }
          case 600: {
            InteractionPauseTimer = input.ReadInt32();
            break;
          }
          case 608: {
            VisibilityDistanceType = input.ReadUInt32();
            break;
          }
          case 616: {
            CorpseDecay = input.ReadInt32();
            break;
          }
          case 624: {
            SpellList = input.ReadInt32();
            break;
          }
          case 632: {
            EquipmentTemplateId = input.ReadInt32();
            break;
          }
          case 640: {
            Civilian = input.ReadUInt32();
            break;
          }
          case 650: {
            AiName = input.ReadString();
            break;
          }
          case 658: {
            ScriptName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GameObject : pb::IMessage<GameObject>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameObject> _parser = new pb::MessageParser<GameObject>(() => new GameObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GameObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Database.DatabaseReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameObject(GameObject other) : this() {
      guid_ = other.guid_;
      id_ = other.id_;
      map_ = other.map_;
      spawnMask_ = other.spawnMask_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      orientation_ = other.orientation_;
      rotation0_ = other.rotation0_;
      rotation1_ = other.rotation1_;
      rotation2_ = other.rotation2_;
      rotation3_ = other.rotation3_;
      spawnTimeSecsMin_ = other.spawnTimeSecsMin_;
      spawnTimeSecsMax_ = other.spawnTimeSecsMax_;
      animProgress_ = other.animProgress_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameObject Clone() {
      return new GameObject(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private long guid_;
    /// <summary>
    /// Consistent ID type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 3;
    private int map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    /// <summary>Field number for the "spawnMask" field.</summary>
    public const int SpawnMaskFieldNumber = 4;
    private uint spawnMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpawnMask {
      get { return spawnMask_; }
      set {
        spawnMask_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Game.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Game.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 6;
    private float orientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "rotation0" field.</summary>
    public const int Rotation0FieldNumber = 7;
    private float rotation0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rotation0 {
      get { return rotation0_; }
      set {
        rotation0_ = value;
      }
    }

    /// <summary>Field number for the "rotation1" field.</summary>
    public const int Rotation1FieldNumber = 8;
    private float rotation1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rotation1 {
      get { return rotation1_; }
      set {
        rotation1_ = value;
      }
    }

    /// <summary>Field number for the "rotation2" field.</summary>
    public const int Rotation2FieldNumber = 9;
    private float rotation2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rotation2 {
      get { return rotation2_; }
      set {
        rotation2_ = value;
      }
    }

    /// <summary>Field number for the "rotation3" field.</summary>
    public const int Rotation3FieldNumber = 10;
    private float rotation3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rotation3 {
      get { return rotation3_; }
      set {
        rotation3_ = value;
      }
    }

    /// <summary>Field number for the "spawnTimeSecsMin" field.</summary>
    public const int SpawnTimeSecsMinFieldNumber = 11;
    private int spawnTimeSecsMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpawnTimeSecsMin {
      get { return spawnTimeSecsMin_; }
      set {
        spawnTimeSecsMin_ = value;
      }
    }

    /// <summary>Field number for the "spawnTimeSecsMax" field.</summary>
    public const int SpawnTimeSecsMaxFieldNumber = 12;
    private int spawnTimeSecsMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpawnTimeSecsMax {
      get { return spawnTimeSecsMax_; }
      set {
        spawnTimeSecsMax_ = value;
      }
    }

    /// <summary>Field number for the "animProgress" field.</summary>
    public const int AnimProgressFieldNumber = 13;
    private uint animProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AnimProgress {
      get { return animProgress_; }
      set {
        animProgress_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 14;
    private uint state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GameObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GameObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Id != other.Id) return false;
      if (Map != other.Map) return false;
      if (SpawnMask != other.SpawnMask) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Orientation, other.Orientation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation0, other.Rotation0)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation1, other.Rotation1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation2, other.Rotation2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation3, other.Rotation3)) return false;
      if (SpawnTimeSecsMin != other.SpawnTimeSecsMin) return false;
      if (SpawnTimeSecsMax != other.SpawnTimeSecsMax) return false;
      if (AnimProgress != other.AnimProgress) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0L) hash ^= Guid.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Map != 0) hash ^= Map.GetHashCode();
      if (SpawnMask != 0) hash ^= SpawnMask.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Orientation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Orientation);
      if (Rotation0 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation0);
      if (Rotation1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation1);
      if (Rotation2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation2);
      if (Rotation3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation3);
      if (SpawnTimeSecsMin != 0) hash ^= SpawnTimeSecsMin.GetHashCode();
      if (SpawnTimeSecsMax != 0) hash ^= SpawnTimeSecsMax.GetHashCode();
      if (AnimProgress != 0) hash ^= AnimProgress.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Guid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Guid);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Map != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Map);
      }
      if (SpawnMask != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SpawnMask);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (Orientation != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Orientation);
      }
      if (Rotation0 != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Rotation0);
      }
      if (Rotation1 != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Rotation1);
      }
      if (Rotation2 != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Rotation2);
      }
      if (Rotation3 != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Rotation3);
      }
      if (SpawnTimeSecsMin != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SpawnTimeSecsMin);
      }
      if (SpawnTimeSecsMax != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SpawnTimeSecsMax);
      }
      if (AnimProgress != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(AnimProgress);
      }
      if (State != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Guid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Guid);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Map != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Map);
      }
      if (SpawnMask != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SpawnMask);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (Orientation != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Orientation);
      }
      if (Rotation0 != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Rotation0);
      }
      if (Rotation1 != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Rotation1);
      }
      if (Rotation2 != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Rotation2);
      }
      if (Rotation3 != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Rotation3);
      }
      if (SpawnTimeSecsMin != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SpawnTimeSecsMin);
      }
      if (SpawnTimeSecsMax != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SpawnTimeSecsMax);
      }
      if (AnimProgress != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(AnimProgress);
      }
      if (State != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Map != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Map);
      }
      if (SpawnMask != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpawnMask);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Orientation != 0F) {
        size += 1 + 4;
      }
      if (Rotation0 != 0F) {
        size += 1 + 4;
      }
      if (Rotation1 != 0F) {
        size += 1 + 4;
      }
      if (Rotation2 != 0F) {
        size += 1 + 4;
      }
      if (Rotation3 != 0F) {
        size += 1 + 4;
      }
      if (SpawnTimeSecsMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnTimeSecsMin);
      }
      if (SpawnTimeSecsMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnTimeSecsMax);
      }
      if (AnimProgress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AnimProgress);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GameObject other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0L) {
        Guid = other.Guid;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Map != 0) {
        Map = other.Map;
      }
      if (other.SpawnMask != 0) {
        SpawnMask = other.SpawnMask;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Game.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Orientation != 0F) {
        Orientation = other.Orientation;
      }
      if (other.Rotation0 != 0F) {
        Rotation0 = other.Rotation0;
      }
      if (other.Rotation1 != 0F) {
        Rotation1 = other.Rotation1;
      }
      if (other.Rotation2 != 0F) {
        Rotation2 = other.Rotation2;
      }
      if (other.Rotation3 != 0F) {
        Rotation3 = other.Rotation3;
      }
      if (other.SpawnTimeSecsMin != 0) {
        SpawnTimeSecsMin = other.SpawnTimeSecsMin;
      }
      if (other.SpawnTimeSecsMax != 0) {
        SpawnTimeSecsMax = other.SpawnTimeSecsMax;
      }
      if (other.AnimProgress != 0) {
        AnimProgress = other.AnimProgress;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Guid = input.ReadInt64();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            Map = input.ReadInt32();
            break;
          }
          case 32: {
            SpawnMask = input.ReadUInt32();
            break;
          }
          case 42: {
            if (position_ == null) {
              Position = new global::Game.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 53: {
            Orientation = input.ReadFloat();
            break;
          }
          case 61: {
            Rotation0 = input.ReadFloat();
            break;
          }
          case 69: {
            Rotation1 = input.ReadFloat();
            break;
          }
          case 77: {
            Rotation2 = input.ReadFloat();
            break;
          }
          case 85: {
            Rotation3 = input.ReadFloat();
            break;
          }
          case 88: {
            SpawnTimeSecsMin = input.ReadInt32();
            break;
          }
          case 96: {
            SpawnTimeSecsMax = input.ReadInt32();
            break;
          }
          case 104: {
            AnimProgress = input.ReadUInt32();
            break;
          }
          case 112: {
            State = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Guid = input.ReadInt64();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            Map = input.ReadInt32();
            break;
          }
          case 32: {
            SpawnMask = input.ReadUInt32();
            break;
          }
          case 42: {
            if (position_ == null) {
              Position = new global::Game.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 53: {
            Orientation = input.ReadFloat();
            break;
          }
          case 61: {
            Rotation0 = input.ReadFloat();
            break;
          }
          case 69: {
            Rotation1 = input.ReadFloat();
            break;
          }
          case 77: {
            Rotation2 = input.ReadFloat();
            break;
          }
          case 85: {
            Rotation3 = input.ReadFloat();
            break;
          }
          case 88: {
            SpawnTimeSecsMin = input.ReadInt32();
            break;
          }
          case 96: {
            SpawnTimeSecsMax = input.ReadInt32();
            break;
          }
          case 104: {
            AnimProgress = input.ReadUInt32();
            break;
          }
          case 112: {
            State = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ItemTemplate : pb::IMessage<ItemTemplate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ItemTemplate> _parser = new pb::MessageParser<ItemTemplate>(() => new ItemTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ItemTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Database.DatabaseReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ItemTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ItemTemplate(ItemTemplate other) : this() {
      entry_ = other.entry_;
      patch_ = other.patch_;
      class_ = other.class_;
      subclass_ = other.subclass_;
      name_ = other.name_;
      displayId_ = other.displayId_;
      quality_ = other.quality_;
      flags_ = other.flags_;
      buyCount_ = other.buyCount_;
      buyPrice_ = other.buyPrice_;
      sellPrice_ = other.sellPrice_;
      inventoryType_ = other.inventoryType_;
      allowableClass_ = other.allowableClass_;
      allowableRace_ = other.allowableRace_;
      itemLevel_ = other.itemLevel_;
      requiredLevel_ = other.requiredLevel_;
      requiredSkill_ = other.requiredSkill_;
      requiredSkillRank_ = other.requiredSkillRank_;
      requiredSpell_ = other.requiredSpell_;
      requiredHonorRank_ = other.requiredHonorRank_;
      requiredCityRank_ = other.requiredCityRank_;
      requiredReputationFaction_ = other.requiredReputationFaction_;
      requiredReputationRank_ = other.requiredReputationRank_;
      maxCount_ = other.maxCount_;
      stackable_ = other.stackable_;
      containerSlots_ = other.containerSlots_;
      stats_ = other.stats_.Clone();
      dmgMin1_ = other.dmgMin1_;
      dmgMax1_ = other.dmgMax1_;
      dmgType1_ = other.dmgType1_;
      dmgMin2_ = other.dmgMin2_;
      dmgMax2_ = other.dmgMax2_;
      dmgType2_ = other.dmgType2_;
      dmgMin3_ = other.dmgMin3_;
      dmgMax3_ = other.dmgMax3_;
      dmgType3_ = other.dmgType3_;
      dmgMin4_ = other.dmgMin4_;
      dmgMax4_ = other.dmgMax4_;
      dmgType4_ = other.dmgType4_;
      dmgMin5_ = other.dmgMin5_;
      dmgMax5_ = other.dmgMax5_;
      dmgType5_ = other.dmgType5_;
      armor_ = other.armor_;
      resistances_ = other.resistances_.Clone();
      delay_ = other.delay_;
      ammoType_ = other.ammoType_;
      rangedModRange_ = other.rangedModRange_;
      spellId1_ = other.spellId1_;
      spellTrigger1_ = other.spellTrigger1_;
      spellCharges1_ = other.spellCharges1_;
      spellPpmRate1_ = other.spellPpmRate1_;
      spellCooldown1_ = other.spellCooldown1_;
      spellCategory1_ = other.spellCategory1_;
      spellCategoryCooldown1_ = other.spellCategoryCooldown1_;
      spellId2_ = other.spellId2_;
      spellTrigger2_ = other.spellTrigger2_;
      spellCharges2_ = other.spellCharges2_;
      spellPpmRate2_ = other.spellPpmRate2_;
      spellCooldown2_ = other.spellCooldown2_;
      spellCategory2_ = other.spellCategory2_;
      spellCategoryCooldown2_ = other.spellCategoryCooldown2_;
      spellId3_ = other.spellId3_;
      spellTrigger3_ = other.spellTrigger3_;
      spellCharges3_ = other.spellCharges3_;
      spellPpmRate3_ = other.spellPpmRate3_;
      spellCooldown3_ = other.spellCooldown3_;
      spellCategory3_ = other.spellCategory3_;
      spellCategoryCooldown3_ = other.spellCategoryCooldown3_;
      spellId4_ = other.spellId4_;
      spellTrigger4_ = other.spellTrigger4_;
      spellCharges4_ = other.spellCharges4_;
      spellPpmRate4_ = other.spellPpmRate4_;
      spellCooldown4_ = other.spellCooldown4_;
      spellCategory4_ = other.spellCategory4_;
      spellCategoryCooldown4_ = other.spellCategoryCooldown4_;
      spellId5_ = other.spellId5_;
      spellTrigger5_ = other.spellTrigger5_;
      spellCharges5_ = other.spellCharges5_;
      spellPpmRate5_ = other.spellPpmRate5_;
      spellCooldown5_ = other.spellCooldown5_;
      spellCategory5_ = other.spellCategory5_;
      spellCategoryCooldown5_ = other.spellCategoryCooldown5_;
      bonding_ = other.bonding_;
      description_ = other.description_;
      pageText_ = other.pageText_;
      languageID_ = other.languageID_;
      pageMaterial_ = other.pageMaterial_;
      startQuest_ = other.startQuest_;
      lockId_ = other.lockId_;
      material_ = other.material_;
      sheath_ = other.sheath_;
      randomProperty_ = other.randomProperty_;
      block_ = other.block_;
      itemSet_ = other.itemSet_;
      maxDurability_ = other.maxDurability_;
      area_ = other.area_;
      map_ = other.map_;
      bagFamily_ = other.bagFamily_;
      scriptName_ = other.scriptName_;
      disenchantID_ = other.disenchantID_;
      foodType_ = other.foodType_;
      minMoneyLoot_ = other.minMoneyLoot_;
      maxMoneyLoot_ = other.maxMoneyLoot_;
      duration_ = other.duration_;
      extraFlags_ = other.extraFlags_;
      otherTeamEntry_ = other.otherTeamEntry_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ItemTemplate Clone() {
      return new ItemTemplate(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private int entry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Entry {
      get { return entry_; }
      set {
        entry_ = value;
      }
    }

    /// <summary>Field number for the "patch" field.</summary>
    public const int PatchFieldNumber = 2;
    private int patch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Patch {
      get { return patch_; }
      set {
        patch_ = value;
      }
    }

    /// <summary>Field number for the "class" field.</summary>
    public const int ClassFieldNumber = 3;
    private int class_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Class {
      get { return class_; }
      set {
        class_ = value;
      }
    }

    /// <summary>Field number for the "subclass" field.</summary>
    public const int SubclassFieldNumber = 4;
    private int subclass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Subclass {
      get { return subclass_; }
      set {
        subclass_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayId" field.</summary>
    public const int DisplayIdFieldNumber = 6;
    private int displayId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DisplayId {
      get { return displayId_; }
      set {
        displayId_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 7;
    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 8;
    private int flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "buyCount" field.</summary>
    public const int BuyCountFieldNumber = 9;
    private int buyCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BuyCount {
      get { return buyCount_; }
      set {
        buyCount_ = value;
      }
    }

    /// <summary>Field number for the "buyPrice" field.</summary>
    public const int BuyPriceFieldNumber = 10;
    private int buyPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BuyPrice {
      get { return buyPrice_; }
      set {
        buyPrice_ = value;
      }
    }

    /// <summary>Field number for the "sellPrice" field.</summary>
    public const int SellPriceFieldNumber = 11;
    private int sellPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SellPrice {
      get { return sellPrice_; }
      set {
        sellPrice_ = value;
      }
    }

    /// <summary>Field number for the "inventoryType" field.</summary>
    public const int InventoryTypeFieldNumber = 12;
    private int inventoryType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InventoryType {
      get { return inventoryType_; }
      set {
        inventoryType_ = value;
      }
    }

    /// <summary>Field number for the "allowableClass" field.</summary>
    public const int AllowableClassFieldNumber = 13;
    private int allowableClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AllowableClass {
      get { return allowableClass_; }
      set {
        allowableClass_ = value;
      }
    }

    /// <summary>Field number for the "allowableRace" field.</summary>
    public const int AllowableRaceFieldNumber = 14;
    private int allowableRace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AllowableRace {
      get { return allowableRace_; }
      set {
        allowableRace_ = value;
      }
    }

    /// <summary>Field number for the "itemLevel" field.</summary>
    public const int ItemLevelFieldNumber = 15;
    private int itemLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ItemLevel {
      get { return itemLevel_; }
      set {
        itemLevel_ = value;
      }
    }

    /// <summary>Field number for the "requiredLevel" field.</summary>
    public const int RequiredLevelFieldNumber = 16;
    private int requiredLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredLevel {
      get { return requiredLevel_; }
      set {
        requiredLevel_ = value;
      }
    }

    /// <summary>Field number for the "requiredSkill" field.</summary>
    public const int RequiredSkillFieldNumber = 17;
    private int requiredSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredSkill {
      get { return requiredSkill_; }
      set {
        requiredSkill_ = value;
      }
    }

    /// <summary>Field number for the "requiredSkillRank" field.</summary>
    public const int RequiredSkillRankFieldNumber = 18;
    private int requiredSkillRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredSkillRank {
      get { return requiredSkillRank_; }
      set {
        requiredSkillRank_ = value;
      }
    }

    /// <summary>Field number for the "requiredSpell" field.</summary>
    public const int RequiredSpellFieldNumber = 19;
    private int requiredSpell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredSpell {
      get { return requiredSpell_; }
      set {
        requiredSpell_ = value;
      }
    }

    /// <summary>Field number for the "requiredHonorRank" field.</summary>
    public const int RequiredHonorRankFieldNumber = 20;
    private int requiredHonorRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredHonorRank {
      get { return requiredHonorRank_; }
      set {
        requiredHonorRank_ = value;
      }
    }

    /// <summary>Field number for the "requiredCityRank" field.</summary>
    public const int RequiredCityRankFieldNumber = 21;
    private int requiredCityRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredCityRank {
      get { return requiredCityRank_; }
      set {
        requiredCityRank_ = value;
      }
    }

    /// <summary>Field number for the "requiredReputationFaction" field.</summary>
    public const int RequiredReputationFactionFieldNumber = 22;
    private int requiredReputationFaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredReputationFaction {
      get { return requiredReputationFaction_; }
      set {
        requiredReputationFaction_ = value;
      }
    }

    /// <summary>Field number for the "requiredReputationRank" field.</summary>
    public const int RequiredReputationRankFieldNumber = 23;
    private int requiredReputationRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredReputationRank {
      get { return requiredReputationRank_; }
      set {
        requiredReputationRank_ = value;
      }
    }

    /// <summary>Field number for the "maxCount" field.</summary>
    public const int MaxCountFieldNumber = 24;
    private int maxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    /// <summary>Field number for the "stackable" field.</summary>
    public const int StackableFieldNumber = 25;
    private int stackable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stackable {
      get { return stackable_; }
      set {
        stackable_ = value;
      }
    }

    /// <summary>Field number for the "containerSlots" field.</summary>
    public const int ContainerSlotsFieldNumber = 26;
    private int containerSlots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ContainerSlots {
      get { return containerSlots_; }
      set {
        containerSlots_ = value;
      }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 27;
    private static readonly pbc::MapField<uint, uint>.Codec _map_stats_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 218);
    private readonly pbc::MapField<uint, uint> stats_ = new pbc::MapField<uint, uint>();
    /// <summary>
    /// Reused Stat instead of individual statType/statValue fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<uint, uint> Stats {
      get { return stats_; }
    }

    /// <summary>Field number for the "dmgMin1" field.</summary>
    public const int DmgMin1FieldNumber = 47;
    private float dmgMin1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DmgMin1 {
      get { return dmgMin1_; }
      set {
        dmgMin1_ = value;
      }
    }

    /// <summary>Field number for the "dmgMax1" field.</summary>
    public const int DmgMax1FieldNumber = 48;
    private float dmgMax1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DmgMax1 {
      get { return dmgMax1_; }
      set {
        dmgMax1_ = value;
      }
    }

    /// <summary>Field number for the "dmgType1" field.</summary>
    public const int DmgType1FieldNumber = 49;
    private int dmgType1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DmgType1 {
      get { return dmgType1_; }
      set {
        dmgType1_ = value;
      }
    }

    /// <summary>Field number for the "dmgMin2" field.</summary>
    public const int DmgMin2FieldNumber = 50;
    private float dmgMin2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DmgMin2 {
      get { return dmgMin2_; }
      set {
        dmgMin2_ = value;
      }
    }

    /// <summary>Field number for the "dmgMax2" field.</summary>
    public const int DmgMax2FieldNumber = 51;
    private float dmgMax2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DmgMax2 {
      get { return dmgMax2_; }
      set {
        dmgMax2_ = value;
      }
    }

    /// <summary>Field number for the "dmgType2" field.</summary>
    public const int DmgType2FieldNumber = 52;
    private int dmgType2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DmgType2 {
      get { return dmgType2_; }
      set {
        dmgType2_ = value;
      }
    }

    /// <summary>Field number for the "dmgMin3" field.</summary>
    public const int DmgMin3FieldNumber = 53;
    private float dmgMin3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DmgMin3 {
      get { return dmgMin3_; }
      set {
        dmgMin3_ = value;
      }
    }

    /// <summary>Field number for the "dmgMax3" field.</summary>
    public const int DmgMax3FieldNumber = 54;
    private float dmgMax3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DmgMax3 {
      get { return dmgMax3_; }
      set {
        dmgMax3_ = value;
      }
    }

    /// <summary>Field number for the "dmgType3" field.</summary>
    public const int DmgType3FieldNumber = 55;
    private int dmgType3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DmgType3 {
      get { return dmgType3_; }
      set {
        dmgType3_ = value;
      }
    }

    /// <summary>Field number for the "dmgMin4" field.</summary>
    public const int DmgMin4FieldNumber = 56;
    private float dmgMin4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DmgMin4 {
      get { return dmgMin4_; }
      set {
        dmgMin4_ = value;
      }
    }

    /// <summary>Field number for the "dmgMax4" field.</summary>
    public const int DmgMax4FieldNumber = 57;
    private float dmgMax4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DmgMax4 {
      get { return dmgMax4_; }
      set {
        dmgMax4_ = value;
      }
    }

    /// <summary>Field number for the "dmgType4" field.</summary>
    public const int DmgType4FieldNumber = 58;
    private int dmgType4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DmgType4 {
      get { return dmgType4_; }
      set {
        dmgType4_ = value;
      }
    }

    /// <summary>Field number for the "dmgMin5" field.</summary>
    public const int DmgMin5FieldNumber = 59;
    private float dmgMin5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DmgMin5 {
      get { return dmgMin5_; }
      set {
        dmgMin5_ = value;
      }
    }

    /// <summary>Field number for the "dmgMax5" field.</summary>
    public const int DmgMax5FieldNumber = 60;
    private float dmgMax5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DmgMax5 {
      get { return dmgMax5_; }
      set {
        dmgMax5_ = value;
      }
    }

    /// <summary>Field number for the "dmgType5" field.</summary>
    public const int DmgType5FieldNumber = 61;
    private int dmgType5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DmgType5 {
      get { return dmgType5_; }
      set {
        dmgType5_ = value;
      }
    }

    /// <summary>Field number for the "armor" field.</summary>
    public const int ArmorFieldNumber = 62;
    private int armor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Armor {
      get { return armor_; }
      set {
        armor_ = value;
      }
    }

    /// <summary>Field number for the "resistances" field.</summary>
    public const int ResistancesFieldNumber = 63;
    private static readonly pbc::MapField<uint, uint>.Codec _map_resistances_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 506);
    private readonly pbc::MapField<uint, uint> resistances_ = new pbc::MapField<uint, uint>();
    /// <summary>
    /// Reused Resistances
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<uint, uint> Resistances {
      get { return resistances_; }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 69;
    private int delay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "ammoType" field.</summary>
    public const int AmmoTypeFieldNumber = 70;
    private int ammoType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AmmoType {
      get { return ammoType_; }
      set {
        ammoType_ = value;
      }
    }

    /// <summary>Field number for the "rangedModRange" field.</summary>
    public const int RangedModRangeFieldNumber = 71;
    private float rangedModRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RangedModRange {
      get { return rangedModRange_; }
      set {
        rangedModRange_ = value;
      }
    }

    /// <summary>Field number for the "spellId1" field.</summary>
    public const int SpellId1FieldNumber = 72;
    private int spellId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellId1 {
      get { return spellId1_; }
      set {
        spellId1_ = value;
      }
    }

    /// <summary>Field number for the "spellTrigger1" field.</summary>
    public const int SpellTrigger1FieldNumber = 73;
    private int spellTrigger1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellTrigger1 {
      get { return spellTrigger1_; }
      set {
        spellTrigger1_ = value;
      }
    }

    /// <summary>Field number for the "spellCharges1" field.</summary>
    public const int SpellCharges1FieldNumber = 74;
    private int spellCharges1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCharges1 {
      get { return spellCharges1_; }
      set {
        spellCharges1_ = value;
      }
    }

    /// <summary>Field number for the "spellPpmRate1" field.</summary>
    public const int SpellPpmRate1FieldNumber = 75;
    private float spellPpmRate1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpellPpmRate1 {
      get { return spellPpmRate1_; }
      set {
        spellPpmRate1_ = value;
      }
    }

    /// <summary>Field number for the "spellCooldown1" field.</summary>
    public const int SpellCooldown1FieldNumber = 76;
    private int spellCooldown1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCooldown1 {
      get { return spellCooldown1_; }
      set {
        spellCooldown1_ = value;
      }
    }

    /// <summary>Field number for the "spellCategory1" field.</summary>
    public const int SpellCategory1FieldNumber = 77;
    private int spellCategory1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCategory1 {
      get { return spellCategory1_; }
      set {
        spellCategory1_ = value;
      }
    }

    /// <summary>Field number for the "spellCategoryCooldown1" field.</summary>
    public const int SpellCategoryCooldown1FieldNumber = 78;
    private int spellCategoryCooldown1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCategoryCooldown1 {
      get { return spellCategoryCooldown1_; }
      set {
        spellCategoryCooldown1_ = value;
      }
    }

    /// <summary>Field number for the "spellId2" field.</summary>
    public const int SpellId2FieldNumber = 79;
    private int spellId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellId2 {
      get { return spellId2_; }
      set {
        spellId2_ = value;
      }
    }

    /// <summary>Field number for the "spellTrigger2" field.</summary>
    public const int SpellTrigger2FieldNumber = 80;
    private int spellTrigger2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellTrigger2 {
      get { return spellTrigger2_; }
      set {
        spellTrigger2_ = value;
      }
    }

    /// <summary>Field number for the "spellCharges2" field.</summary>
    public const int SpellCharges2FieldNumber = 81;
    private int spellCharges2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCharges2 {
      get { return spellCharges2_; }
      set {
        spellCharges2_ = value;
      }
    }

    /// <summary>Field number for the "spellPpmRate2" field.</summary>
    public const int SpellPpmRate2FieldNumber = 82;
    private float spellPpmRate2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpellPpmRate2 {
      get { return spellPpmRate2_; }
      set {
        spellPpmRate2_ = value;
      }
    }

    /// <summary>Field number for the "spellCooldown2" field.</summary>
    public const int SpellCooldown2FieldNumber = 83;
    private int spellCooldown2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCooldown2 {
      get { return spellCooldown2_; }
      set {
        spellCooldown2_ = value;
      }
    }

    /// <summary>Field number for the "spellCategory2" field.</summary>
    public const int SpellCategory2FieldNumber = 84;
    private int spellCategory2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCategory2 {
      get { return spellCategory2_; }
      set {
        spellCategory2_ = value;
      }
    }

    /// <summary>Field number for the "spellCategoryCooldown2" field.</summary>
    public const int SpellCategoryCooldown2FieldNumber = 85;
    private int spellCategoryCooldown2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCategoryCooldown2 {
      get { return spellCategoryCooldown2_; }
      set {
        spellCategoryCooldown2_ = value;
      }
    }

    /// <summary>Field number for the "spellId3" field.</summary>
    public const int SpellId3FieldNumber = 86;
    private int spellId3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellId3 {
      get { return spellId3_; }
      set {
        spellId3_ = value;
      }
    }

    /// <summary>Field number for the "spellTrigger3" field.</summary>
    public const int SpellTrigger3FieldNumber = 87;
    private int spellTrigger3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellTrigger3 {
      get { return spellTrigger3_; }
      set {
        spellTrigger3_ = value;
      }
    }

    /// <summary>Field number for the "spellCharges3" field.</summary>
    public const int SpellCharges3FieldNumber = 88;
    private int spellCharges3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCharges3 {
      get { return spellCharges3_; }
      set {
        spellCharges3_ = value;
      }
    }

    /// <summary>Field number for the "spellPpmRate3" field.</summary>
    public const int SpellPpmRate3FieldNumber = 89;
    private float spellPpmRate3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpellPpmRate3 {
      get { return spellPpmRate3_; }
      set {
        spellPpmRate3_ = value;
      }
    }

    /// <summary>Field number for the "spellCooldown3" field.</summary>
    public const int SpellCooldown3FieldNumber = 90;
    private int spellCooldown3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCooldown3 {
      get { return spellCooldown3_; }
      set {
        spellCooldown3_ = value;
      }
    }

    /// <summary>Field number for the "spellCategory3" field.</summary>
    public const int SpellCategory3FieldNumber = 91;
    private int spellCategory3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCategory3 {
      get { return spellCategory3_; }
      set {
        spellCategory3_ = value;
      }
    }

    /// <summary>Field number for the "spellCategoryCooldown3" field.</summary>
    public const int SpellCategoryCooldown3FieldNumber = 92;
    private int spellCategoryCooldown3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCategoryCooldown3 {
      get { return spellCategoryCooldown3_; }
      set {
        spellCategoryCooldown3_ = value;
      }
    }

    /// <summary>Field number for the "spellId4" field.</summary>
    public const int SpellId4FieldNumber = 93;
    private int spellId4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellId4 {
      get { return spellId4_; }
      set {
        spellId4_ = value;
      }
    }

    /// <summary>Field number for the "spellTrigger4" field.</summary>
    public const int SpellTrigger4FieldNumber = 94;
    private int spellTrigger4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellTrigger4 {
      get { return spellTrigger4_; }
      set {
        spellTrigger4_ = value;
      }
    }

    /// <summary>Field number for the "spellCharges4" field.</summary>
    public const int SpellCharges4FieldNumber = 95;
    private int spellCharges4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCharges4 {
      get { return spellCharges4_; }
      set {
        spellCharges4_ = value;
      }
    }

    /// <summary>Field number for the "spellPpmRate4" field.</summary>
    public const int SpellPpmRate4FieldNumber = 96;
    private float spellPpmRate4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpellPpmRate4 {
      get { return spellPpmRate4_; }
      set {
        spellPpmRate4_ = value;
      }
    }

    /// <summary>Field number for the "spellCooldown4" field.</summary>
    public const int SpellCooldown4FieldNumber = 97;
    private int spellCooldown4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCooldown4 {
      get { return spellCooldown4_; }
      set {
        spellCooldown4_ = value;
      }
    }

    /// <summary>Field number for the "spellCategory4" field.</summary>
    public const int SpellCategory4FieldNumber = 98;
    private int spellCategory4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCategory4 {
      get { return spellCategory4_; }
      set {
        spellCategory4_ = value;
      }
    }

    /// <summary>Field number for the "spellCategoryCooldown4" field.</summary>
    public const int SpellCategoryCooldown4FieldNumber = 99;
    private int spellCategoryCooldown4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCategoryCooldown4 {
      get { return spellCategoryCooldown4_; }
      set {
        spellCategoryCooldown4_ = value;
      }
    }

    /// <summary>Field number for the "spellId5" field.</summary>
    public const int SpellId5FieldNumber = 100;
    private int spellId5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellId5 {
      get { return spellId5_; }
      set {
        spellId5_ = value;
      }
    }

    /// <summary>Field number for the "spellTrigger5" field.</summary>
    public const int SpellTrigger5FieldNumber = 101;
    private int spellTrigger5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellTrigger5 {
      get { return spellTrigger5_; }
      set {
        spellTrigger5_ = value;
      }
    }

    /// <summary>Field number for the "spellCharges5" field.</summary>
    public const int SpellCharges5FieldNumber = 102;
    private int spellCharges5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCharges5 {
      get { return spellCharges5_; }
      set {
        spellCharges5_ = value;
      }
    }

    /// <summary>Field number for the "spellPpmRate5" field.</summary>
    public const int SpellPpmRate5FieldNumber = 103;
    private float spellPpmRate5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpellPpmRate5 {
      get { return spellPpmRate5_; }
      set {
        spellPpmRate5_ = value;
      }
    }

    /// <summary>Field number for the "spellCooldown5" field.</summary>
    public const int SpellCooldown5FieldNumber = 104;
    private int spellCooldown5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCooldown5 {
      get { return spellCooldown5_; }
      set {
        spellCooldown5_ = value;
      }
    }

    /// <summary>Field number for the "spellCategory5" field.</summary>
    public const int SpellCategory5FieldNumber = 105;
    private int spellCategory5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCategory5 {
      get { return spellCategory5_; }
      set {
        spellCategory5_ = value;
      }
    }

    /// <summary>Field number for the "spellCategoryCooldown5" field.</summary>
    public const int SpellCategoryCooldown5FieldNumber = 106;
    private int spellCategoryCooldown5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellCategoryCooldown5 {
      get { return spellCategoryCooldown5_; }
      set {
        spellCategoryCooldown5_ = value;
      }
    }

    /// <summary>Field number for the "bonding" field.</summary>
    public const int BondingFieldNumber = 107;
    private int bonding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Bonding {
      get { return bonding_; }
      set {
        bonding_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 108;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pageText" field.</summary>
    public const int PageTextFieldNumber = 109;
    private int pageText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PageText {
      get { return pageText_; }
      set {
        pageText_ = value;
      }
    }

    /// <summary>Field number for the "languageID" field.</summary>
    public const int LanguageIDFieldNumber = 110;
    private int languageID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LanguageID {
      get { return languageID_; }
      set {
        languageID_ = value;
      }
    }

    /// <summary>Field number for the "pageMaterial" field.</summary>
    public const int PageMaterialFieldNumber = 111;
    private int pageMaterial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PageMaterial {
      get { return pageMaterial_; }
      set {
        pageMaterial_ = value;
      }
    }

    /// <summary>Field number for the "startQuest" field.</summary>
    public const int StartQuestFieldNumber = 112;
    private int startQuest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StartQuest {
      get { return startQuest_; }
      set {
        startQuest_ = value;
      }
    }

    /// <summary>Field number for the "lockId" field.</summary>
    public const int LockIdFieldNumber = 113;
    private int lockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 114;
    private int material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "sheath" field.</summary>
    public const int SheathFieldNumber = 115;
    private int sheath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Sheath {
      get { return sheath_; }
      set {
        sheath_ = value;
      }
    }

    /// <summary>Field number for the "randomProperty" field.</summary>
    public const int RandomPropertyFieldNumber = 116;
    private int randomProperty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RandomProperty {
      get { return randomProperty_; }
      set {
        randomProperty_ = value;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 117;
    private int block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    /// <summary>Field number for the "itemSet" field.</summary>
    public const int ItemSetFieldNumber = 118;
    private int itemSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ItemSet {
      get { return itemSet_; }
      set {
        itemSet_ = value;
      }
    }

    /// <summary>Field number for the "maxDurability" field.</summary>
    public const int MaxDurabilityFieldNumber = 119;
    private int maxDurability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxDurability {
      get { return maxDurability_; }
      set {
        maxDurability_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 120;
    private int area_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 121;
    private int map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    /// <summary>Field number for the "bagFamily" field.</summary>
    public const int BagFamilyFieldNumber = 122;
    private int bagFamily_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BagFamily {
      get { return bagFamily_; }
      set {
        bagFamily_ = value;
      }
    }

    /// <summary>Field number for the "scriptName" field.</summary>
    public const int ScriptNameFieldNumber = 123;
    private string scriptName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ScriptName {
      get { return scriptName_; }
      set {
        scriptName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disenchantID" field.</summary>
    public const int DisenchantIDFieldNumber = 124;
    private int disenchantID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DisenchantID {
      get { return disenchantID_; }
      set {
        disenchantID_ = value;
      }
    }

    /// <summary>Field number for the "foodType" field.</summary>
    public const int FoodTypeFieldNumber = 125;
    private int foodType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FoodType {
      get { return foodType_; }
      set {
        foodType_ = value;
      }
    }

    /// <summary>Field number for the "minMoneyLoot" field.</summary>
    public const int MinMoneyLootFieldNumber = 126;
    private int minMoneyLoot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinMoneyLoot {
      get { return minMoneyLoot_; }
      set {
        minMoneyLoot_ = value;
      }
    }

    /// <summary>Field number for the "maxMoneyLoot" field.</summary>
    public const int MaxMoneyLootFieldNumber = 127;
    private int maxMoneyLoot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxMoneyLoot {
      get { return maxMoneyLoot_; }
      set {
        maxMoneyLoot_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 128;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "extraFlags" field.</summary>
    public const int ExtraFlagsFieldNumber = 129;
    private int extraFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExtraFlags {
      get { return extraFlags_; }
      set {
        extraFlags_ = value;
      }
    }

    /// <summary>Field number for the "otherTeamEntry" field.</summary>
    public const int OtherTeamEntryFieldNumber = 130;
    private int otherTeamEntry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OtherTeamEntry {
      get { return otherTeamEntry_; }
      set {
        otherTeamEntry_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ItemTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ItemTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entry != other.Entry) return false;
      if (Patch != other.Patch) return false;
      if (Class != other.Class) return false;
      if (Subclass != other.Subclass) return false;
      if (Name != other.Name) return false;
      if (DisplayId != other.DisplayId) return false;
      if (Quality != other.Quality) return false;
      if (Flags != other.Flags) return false;
      if (BuyCount != other.BuyCount) return false;
      if (BuyPrice != other.BuyPrice) return false;
      if (SellPrice != other.SellPrice) return false;
      if (InventoryType != other.InventoryType) return false;
      if (AllowableClass != other.AllowableClass) return false;
      if (AllowableRace != other.AllowableRace) return false;
      if (ItemLevel != other.ItemLevel) return false;
      if (RequiredLevel != other.RequiredLevel) return false;
      if (RequiredSkill != other.RequiredSkill) return false;
      if (RequiredSkillRank != other.RequiredSkillRank) return false;
      if (RequiredSpell != other.RequiredSpell) return false;
      if (RequiredHonorRank != other.RequiredHonorRank) return false;
      if (RequiredCityRank != other.RequiredCityRank) return false;
      if (RequiredReputationFaction != other.RequiredReputationFaction) return false;
      if (RequiredReputationRank != other.RequiredReputationRank) return false;
      if (MaxCount != other.MaxCount) return false;
      if (Stackable != other.Stackable) return false;
      if (ContainerSlots != other.ContainerSlots) return false;
      if (!Stats.Equals(other.Stats)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DmgMin1, other.DmgMin1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DmgMax1, other.DmgMax1)) return false;
      if (DmgType1 != other.DmgType1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DmgMin2, other.DmgMin2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DmgMax2, other.DmgMax2)) return false;
      if (DmgType2 != other.DmgType2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DmgMin3, other.DmgMin3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DmgMax3, other.DmgMax3)) return false;
      if (DmgType3 != other.DmgType3) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DmgMin4, other.DmgMin4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DmgMax4, other.DmgMax4)) return false;
      if (DmgType4 != other.DmgType4) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DmgMin5, other.DmgMin5)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DmgMax5, other.DmgMax5)) return false;
      if (DmgType5 != other.DmgType5) return false;
      if (Armor != other.Armor) return false;
      if (!Resistances.Equals(other.Resistances)) return false;
      if (Delay != other.Delay) return false;
      if (AmmoType != other.AmmoType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangedModRange, other.RangedModRange)) return false;
      if (SpellId1 != other.SpellId1) return false;
      if (SpellTrigger1 != other.SpellTrigger1) return false;
      if (SpellCharges1 != other.SpellCharges1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpellPpmRate1, other.SpellPpmRate1)) return false;
      if (SpellCooldown1 != other.SpellCooldown1) return false;
      if (SpellCategory1 != other.SpellCategory1) return false;
      if (SpellCategoryCooldown1 != other.SpellCategoryCooldown1) return false;
      if (SpellId2 != other.SpellId2) return false;
      if (SpellTrigger2 != other.SpellTrigger2) return false;
      if (SpellCharges2 != other.SpellCharges2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpellPpmRate2, other.SpellPpmRate2)) return false;
      if (SpellCooldown2 != other.SpellCooldown2) return false;
      if (SpellCategory2 != other.SpellCategory2) return false;
      if (SpellCategoryCooldown2 != other.SpellCategoryCooldown2) return false;
      if (SpellId3 != other.SpellId3) return false;
      if (SpellTrigger3 != other.SpellTrigger3) return false;
      if (SpellCharges3 != other.SpellCharges3) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpellPpmRate3, other.SpellPpmRate3)) return false;
      if (SpellCooldown3 != other.SpellCooldown3) return false;
      if (SpellCategory3 != other.SpellCategory3) return false;
      if (SpellCategoryCooldown3 != other.SpellCategoryCooldown3) return false;
      if (SpellId4 != other.SpellId4) return false;
      if (SpellTrigger4 != other.SpellTrigger4) return false;
      if (SpellCharges4 != other.SpellCharges4) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpellPpmRate4, other.SpellPpmRate4)) return false;
      if (SpellCooldown4 != other.SpellCooldown4) return false;
      if (SpellCategory4 != other.SpellCategory4) return false;
      if (SpellCategoryCooldown4 != other.SpellCategoryCooldown4) return false;
      if (SpellId5 != other.SpellId5) return false;
      if (SpellTrigger5 != other.SpellTrigger5) return false;
      if (SpellCharges5 != other.SpellCharges5) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpellPpmRate5, other.SpellPpmRate5)) return false;
      if (SpellCooldown5 != other.SpellCooldown5) return false;
      if (SpellCategory5 != other.SpellCategory5) return false;
      if (SpellCategoryCooldown5 != other.SpellCategoryCooldown5) return false;
      if (Bonding != other.Bonding) return false;
      if (Description != other.Description) return false;
      if (PageText != other.PageText) return false;
      if (LanguageID != other.LanguageID) return false;
      if (PageMaterial != other.PageMaterial) return false;
      if (StartQuest != other.StartQuest) return false;
      if (LockId != other.LockId) return false;
      if (Material != other.Material) return false;
      if (Sheath != other.Sheath) return false;
      if (RandomProperty != other.RandomProperty) return false;
      if (Block != other.Block) return false;
      if (ItemSet != other.ItemSet) return false;
      if (MaxDurability != other.MaxDurability) return false;
      if (Area != other.Area) return false;
      if (Map != other.Map) return false;
      if (BagFamily != other.BagFamily) return false;
      if (ScriptName != other.ScriptName) return false;
      if (DisenchantID != other.DisenchantID) return false;
      if (FoodType != other.FoodType) return false;
      if (MinMoneyLoot != other.MinMoneyLoot) return false;
      if (MaxMoneyLoot != other.MaxMoneyLoot) return false;
      if (Duration != other.Duration) return false;
      if (ExtraFlags != other.ExtraFlags) return false;
      if (OtherTeamEntry != other.OtherTeamEntry) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Entry != 0) hash ^= Entry.GetHashCode();
      if (Patch != 0) hash ^= Patch.GetHashCode();
      if (Class != 0) hash ^= Class.GetHashCode();
      if (Subclass != 0) hash ^= Subclass.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayId != 0) hash ^= DisplayId.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (BuyCount != 0) hash ^= BuyCount.GetHashCode();
      if (BuyPrice != 0) hash ^= BuyPrice.GetHashCode();
      if (SellPrice != 0) hash ^= SellPrice.GetHashCode();
      if (InventoryType != 0) hash ^= InventoryType.GetHashCode();
      if (AllowableClass != 0) hash ^= AllowableClass.GetHashCode();
      if (AllowableRace != 0) hash ^= AllowableRace.GetHashCode();
      if (ItemLevel != 0) hash ^= ItemLevel.GetHashCode();
      if (RequiredLevel != 0) hash ^= RequiredLevel.GetHashCode();
      if (RequiredSkill != 0) hash ^= RequiredSkill.GetHashCode();
      if (RequiredSkillRank != 0) hash ^= RequiredSkillRank.GetHashCode();
      if (RequiredSpell != 0) hash ^= RequiredSpell.GetHashCode();
      if (RequiredHonorRank != 0) hash ^= RequiredHonorRank.GetHashCode();
      if (RequiredCityRank != 0) hash ^= RequiredCityRank.GetHashCode();
      if (RequiredReputationFaction != 0) hash ^= RequiredReputationFaction.GetHashCode();
      if (RequiredReputationRank != 0) hash ^= RequiredReputationRank.GetHashCode();
      if (MaxCount != 0) hash ^= MaxCount.GetHashCode();
      if (Stackable != 0) hash ^= Stackable.GetHashCode();
      if (ContainerSlots != 0) hash ^= ContainerSlots.GetHashCode();
      hash ^= Stats.GetHashCode();
      if (DmgMin1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DmgMin1);
      if (DmgMax1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DmgMax1);
      if (DmgType1 != 0) hash ^= DmgType1.GetHashCode();
      if (DmgMin2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DmgMin2);
      if (DmgMax2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DmgMax2);
      if (DmgType2 != 0) hash ^= DmgType2.GetHashCode();
      if (DmgMin3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DmgMin3);
      if (DmgMax3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DmgMax3);
      if (DmgType3 != 0) hash ^= DmgType3.GetHashCode();
      if (DmgMin4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DmgMin4);
      if (DmgMax4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DmgMax4);
      if (DmgType4 != 0) hash ^= DmgType4.GetHashCode();
      if (DmgMin5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DmgMin5);
      if (DmgMax5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DmgMax5);
      if (DmgType5 != 0) hash ^= DmgType5.GetHashCode();
      if (Armor != 0) hash ^= Armor.GetHashCode();
      hash ^= Resistances.GetHashCode();
      if (Delay != 0) hash ^= Delay.GetHashCode();
      if (AmmoType != 0) hash ^= AmmoType.GetHashCode();
      if (RangedModRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangedModRange);
      if (SpellId1 != 0) hash ^= SpellId1.GetHashCode();
      if (SpellTrigger1 != 0) hash ^= SpellTrigger1.GetHashCode();
      if (SpellCharges1 != 0) hash ^= SpellCharges1.GetHashCode();
      if (SpellPpmRate1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpellPpmRate1);
      if (SpellCooldown1 != 0) hash ^= SpellCooldown1.GetHashCode();
      if (SpellCategory1 != 0) hash ^= SpellCategory1.GetHashCode();
      if (SpellCategoryCooldown1 != 0) hash ^= SpellCategoryCooldown1.GetHashCode();
      if (SpellId2 != 0) hash ^= SpellId2.GetHashCode();
      if (SpellTrigger2 != 0) hash ^= SpellTrigger2.GetHashCode();
      if (SpellCharges2 != 0) hash ^= SpellCharges2.GetHashCode();
      if (SpellPpmRate2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpellPpmRate2);
      if (SpellCooldown2 != 0) hash ^= SpellCooldown2.GetHashCode();
      if (SpellCategory2 != 0) hash ^= SpellCategory2.GetHashCode();
      if (SpellCategoryCooldown2 != 0) hash ^= SpellCategoryCooldown2.GetHashCode();
      if (SpellId3 != 0) hash ^= SpellId3.GetHashCode();
      if (SpellTrigger3 != 0) hash ^= SpellTrigger3.GetHashCode();
      if (SpellCharges3 != 0) hash ^= SpellCharges3.GetHashCode();
      if (SpellPpmRate3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpellPpmRate3);
      if (SpellCooldown3 != 0) hash ^= SpellCooldown3.GetHashCode();
      if (SpellCategory3 != 0) hash ^= SpellCategory3.GetHashCode();
      if (SpellCategoryCooldown3 != 0) hash ^= SpellCategoryCooldown3.GetHashCode();
      if (SpellId4 != 0) hash ^= SpellId4.GetHashCode();
      if (SpellTrigger4 != 0) hash ^= SpellTrigger4.GetHashCode();
      if (SpellCharges4 != 0) hash ^= SpellCharges4.GetHashCode();
      if (SpellPpmRate4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpellPpmRate4);
      if (SpellCooldown4 != 0) hash ^= SpellCooldown4.GetHashCode();
      if (SpellCategory4 != 0) hash ^= SpellCategory4.GetHashCode();
      if (SpellCategoryCooldown4 != 0) hash ^= SpellCategoryCooldown4.GetHashCode();
      if (SpellId5 != 0) hash ^= SpellId5.GetHashCode();
      if (SpellTrigger5 != 0) hash ^= SpellTrigger5.GetHashCode();
      if (SpellCharges5 != 0) hash ^= SpellCharges5.GetHashCode();
      if (SpellPpmRate5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpellPpmRate5);
      if (SpellCooldown5 != 0) hash ^= SpellCooldown5.GetHashCode();
      if (SpellCategory5 != 0) hash ^= SpellCategory5.GetHashCode();
      if (SpellCategoryCooldown5 != 0) hash ^= SpellCategoryCooldown5.GetHashCode();
      if (Bonding != 0) hash ^= Bonding.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (PageText != 0) hash ^= PageText.GetHashCode();
      if (LanguageID != 0) hash ^= LanguageID.GetHashCode();
      if (PageMaterial != 0) hash ^= PageMaterial.GetHashCode();
      if (StartQuest != 0) hash ^= StartQuest.GetHashCode();
      if (LockId != 0) hash ^= LockId.GetHashCode();
      if (Material != 0) hash ^= Material.GetHashCode();
      if (Sheath != 0) hash ^= Sheath.GetHashCode();
      if (RandomProperty != 0) hash ^= RandomProperty.GetHashCode();
      if (Block != 0) hash ^= Block.GetHashCode();
      if (ItemSet != 0) hash ^= ItemSet.GetHashCode();
      if (MaxDurability != 0) hash ^= MaxDurability.GetHashCode();
      if (Area != 0) hash ^= Area.GetHashCode();
      if (Map != 0) hash ^= Map.GetHashCode();
      if (BagFamily != 0) hash ^= BagFamily.GetHashCode();
      if (ScriptName.Length != 0) hash ^= ScriptName.GetHashCode();
      if (DisenchantID != 0) hash ^= DisenchantID.GetHashCode();
      if (FoodType != 0) hash ^= FoodType.GetHashCode();
      if (MinMoneyLoot != 0) hash ^= MinMoneyLoot.GetHashCode();
      if (MaxMoneyLoot != 0) hash ^= MaxMoneyLoot.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (ExtraFlags != 0) hash ^= ExtraFlags.GetHashCode();
      if (OtherTeamEntry != 0) hash ^= OtherTeamEntry.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Entry != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entry);
      }
      if (Patch != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Patch);
      }
      if (Class != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Class);
      }
      if (Subclass != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Subclass);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (DisplayId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DisplayId);
      }
      if (Quality != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Quality);
      }
      if (Flags != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Flags);
      }
      if (BuyCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BuyCount);
      }
      if (BuyPrice != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BuyPrice);
      }
      if (SellPrice != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SellPrice);
      }
      if (InventoryType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(InventoryType);
      }
      if (AllowableClass != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(AllowableClass);
      }
      if (AllowableRace != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AllowableRace);
      }
      if (ItemLevel != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ItemLevel);
      }
      if (RequiredLevel != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(RequiredLevel);
      }
      if (RequiredSkill != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RequiredSkill);
      }
      if (RequiredSkillRank != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(RequiredSkillRank);
      }
      if (RequiredSpell != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(RequiredSpell);
      }
      if (RequiredHonorRank != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(RequiredHonorRank);
      }
      if (RequiredCityRank != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(RequiredCityRank);
      }
      if (RequiredReputationFaction != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(RequiredReputationFaction);
      }
      if (RequiredReputationRank != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(RequiredReputationRank);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(MaxCount);
      }
      if (Stackable != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Stackable);
      }
      if (ContainerSlots != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(ContainerSlots);
      }
      stats_.WriteTo(output, _map_stats_codec);
      if (DmgMin1 != 0F) {
        output.WriteRawTag(253, 2);
        output.WriteFloat(DmgMin1);
      }
      if (DmgMax1 != 0F) {
        output.WriteRawTag(133, 3);
        output.WriteFloat(DmgMax1);
      }
      if (DmgType1 != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(DmgType1);
      }
      if (DmgMin2 != 0F) {
        output.WriteRawTag(149, 3);
        output.WriteFloat(DmgMin2);
      }
      if (DmgMax2 != 0F) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(DmgMax2);
      }
      if (DmgType2 != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(DmgType2);
      }
      if (DmgMin3 != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(DmgMin3);
      }
      if (DmgMax3 != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(DmgMax3);
      }
      if (DmgType3 != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(DmgType3);
      }
      if (DmgMin4 != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(DmgMin4);
      }
      if (DmgMax4 != 0F) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(DmgMax4);
      }
      if (DmgType4 != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(DmgType4);
      }
      if (DmgMin5 != 0F) {
        output.WriteRawTag(221, 3);
        output.WriteFloat(DmgMin5);
      }
      if (DmgMax5 != 0F) {
        output.WriteRawTag(229, 3);
        output.WriteFloat(DmgMax5);
      }
      if (DmgType5 != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(DmgType5);
      }
      if (Armor != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(Armor);
      }
      resistances_.WriteTo(output, _map_resistances_codec);
      if (Delay != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(Delay);
      }
      if (AmmoType != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(AmmoType);
      }
      if (RangedModRange != 0F) {
        output.WriteRawTag(189, 4);
        output.WriteFloat(RangedModRange);
      }
      if (SpellId1 != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(SpellId1);
      }
      if (SpellTrigger1 != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(SpellTrigger1);
      }
      if (SpellCharges1 != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(SpellCharges1);
      }
      if (SpellPpmRate1 != 0F) {
        output.WriteRawTag(221, 4);
        output.WriteFloat(SpellPpmRate1);
      }
      if (SpellCooldown1 != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(SpellCooldown1);
      }
      if (SpellCategory1 != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(SpellCategory1);
      }
      if (SpellCategoryCooldown1 != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(SpellCategoryCooldown1);
      }
      if (SpellId2 != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(SpellId2);
      }
      if (SpellTrigger2 != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(SpellTrigger2);
      }
      if (SpellCharges2 != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(SpellCharges2);
      }
      if (SpellPpmRate2 != 0F) {
        output.WriteRawTag(149, 5);
        output.WriteFloat(SpellPpmRate2);
      }
      if (SpellCooldown2 != 0) {
        output.WriteRawTag(152, 5);
        output.WriteInt32(SpellCooldown2);
      }
      if (SpellCategory2 != 0) {
        output.WriteRawTag(160, 5);
        output.WriteInt32(SpellCategory2);
      }
      if (SpellCategoryCooldown2 != 0) {
        output.WriteRawTag(168, 5);
        output.WriteInt32(SpellCategoryCooldown2);
      }
      if (SpellId3 != 0) {
        output.WriteRawTag(176, 5);
        output.WriteInt32(SpellId3);
      }
      if (SpellTrigger3 != 0) {
        output.WriteRawTag(184, 5);
        output.WriteInt32(SpellTrigger3);
      }
      if (SpellCharges3 != 0) {
        output.WriteRawTag(192, 5);
        output.WriteInt32(SpellCharges3);
      }
      if (SpellPpmRate3 != 0F) {
        output.WriteRawTag(205, 5);
        output.WriteFloat(SpellPpmRate3);
      }
      if (SpellCooldown3 != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(SpellCooldown3);
      }
      if (SpellCategory3 != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(SpellCategory3);
      }
      if (SpellCategoryCooldown3 != 0) {
        output.WriteRawTag(224, 5);
        output.WriteInt32(SpellCategoryCooldown3);
      }
      if (SpellId4 != 0) {
        output.WriteRawTag(232, 5);
        output.WriteInt32(SpellId4);
      }
      if (SpellTrigger4 != 0) {
        output.WriteRawTag(240, 5);
        output.WriteInt32(SpellTrigger4);
      }
      if (SpellCharges4 != 0) {
        output.WriteRawTag(248, 5);
        output.WriteInt32(SpellCharges4);
      }
      if (SpellPpmRate4 != 0F) {
        output.WriteRawTag(133, 6);
        output.WriteFloat(SpellPpmRate4);
      }
      if (SpellCooldown4 != 0) {
        output.WriteRawTag(136, 6);
        output.WriteInt32(SpellCooldown4);
      }
      if (SpellCategory4 != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(SpellCategory4);
      }
      if (SpellCategoryCooldown4 != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(SpellCategoryCooldown4);
      }
      if (SpellId5 != 0) {
        output.WriteRawTag(160, 6);
        output.WriteInt32(SpellId5);
      }
      if (SpellTrigger5 != 0) {
        output.WriteRawTag(168, 6);
        output.WriteInt32(SpellTrigger5);
      }
      if (SpellCharges5 != 0) {
        output.WriteRawTag(176, 6);
        output.WriteInt32(SpellCharges5);
      }
      if (SpellPpmRate5 != 0F) {
        output.WriteRawTag(189, 6);
        output.WriteFloat(SpellPpmRate5);
      }
      if (SpellCooldown5 != 0) {
        output.WriteRawTag(192, 6);
        output.WriteInt32(SpellCooldown5);
      }
      if (SpellCategory5 != 0) {
        output.WriteRawTag(200, 6);
        output.WriteInt32(SpellCategory5);
      }
      if (SpellCategoryCooldown5 != 0) {
        output.WriteRawTag(208, 6);
        output.WriteInt32(SpellCategoryCooldown5);
      }
      if (Bonding != 0) {
        output.WriteRawTag(216, 6);
        output.WriteInt32(Bonding);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(226, 6);
        output.WriteString(Description);
      }
      if (PageText != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(PageText);
      }
      if (LanguageID != 0) {
        output.WriteRawTag(240, 6);
        output.WriteInt32(LanguageID);
      }
      if (PageMaterial != 0) {
        output.WriteRawTag(248, 6);
        output.WriteInt32(PageMaterial);
      }
      if (StartQuest != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(StartQuest);
      }
      if (LockId != 0) {
        output.WriteRawTag(136, 7);
        output.WriteInt32(LockId);
      }
      if (Material != 0) {
        output.WriteRawTag(144, 7);
        output.WriteInt32(Material);
      }
      if (Sheath != 0) {
        output.WriteRawTag(152, 7);
        output.WriteInt32(Sheath);
      }
      if (RandomProperty != 0) {
        output.WriteRawTag(160, 7);
        output.WriteInt32(RandomProperty);
      }
      if (Block != 0) {
        output.WriteRawTag(168, 7);
        output.WriteInt32(Block);
      }
      if (ItemSet != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(ItemSet);
      }
      if (MaxDurability != 0) {
        output.WriteRawTag(184, 7);
        output.WriteInt32(MaxDurability);
      }
      if (Area != 0) {
        output.WriteRawTag(192, 7);
        output.WriteInt32(Area);
      }
      if (Map != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(Map);
      }
      if (BagFamily != 0) {
        output.WriteRawTag(208, 7);
        output.WriteInt32(BagFamily);
      }
      if (ScriptName.Length != 0) {
        output.WriteRawTag(218, 7);
        output.WriteString(ScriptName);
      }
      if (DisenchantID != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(DisenchantID);
      }
      if (FoodType != 0) {
        output.WriteRawTag(232, 7);
        output.WriteInt32(FoodType);
      }
      if (MinMoneyLoot != 0) {
        output.WriteRawTag(240, 7);
        output.WriteInt32(MinMoneyLoot);
      }
      if (MaxMoneyLoot != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(MaxMoneyLoot);
      }
      if (Duration != 0) {
        output.WriteRawTag(128, 8);
        output.WriteInt32(Duration);
      }
      if (ExtraFlags != 0) {
        output.WriteRawTag(136, 8);
        output.WriteInt32(ExtraFlags);
      }
      if (OtherTeamEntry != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(OtherTeamEntry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Entry != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entry);
      }
      if (Patch != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Patch);
      }
      if (Class != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Class);
      }
      if (Subclass != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Subclass);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (DisplayId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DisplayId);
      }
      if (Quality != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Quality);
      }
      if (Flags != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Flags);
      }
      if (BuyCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BuyCount);
      }
      if (BuyPrice != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BuyPrice);
      }
      if (SellPrice != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SellPrice);
      }
      if (InventoryType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(InventoryType);
      }
      if (AllowableClass != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(AllowableClass);
      }
      if (AllowableRace != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AllowableRace);
      }
      if (ItemLevel != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ItemLevel);
      }
      if (RequiredLevel != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(RequiredLevel);
      }
      if (RequiredSkill != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RequiredSkill);
      }
      if (RequiredSkillRank != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(RequiredSkillRank);
      }
      if (RequiredSpell != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(RequiredSpell);
      }
      if (RequiredHonorRank != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(RequiredHonorRank);
      }
      if (RequiredCityRank != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(RequiredCityRank);
      }
      if (RequiredReputationFaction != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(RequiredReputationFaction);
      }
      if (RequiredReputationRank != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(RequiredReputationRank);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(MaxCount);
      }
      if (Stackable != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Stackable);
      }
      if (ContainerSlots != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(ContainerSlots);
      }
      stats_.WriteTo(ref output, _map_stats_codec);
      if (DmgMin1 != 0F) {
        output.WriteRawTag(253, 2);
        output.WriteFloat(DmgMin1);
      }
      if (DmgMax1 != 0F) {
        output.WriteRawTag(133, 3);
        output.WriteFloat(DmgMax1);
      }
      if (DmgType1 != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(DmgType1);
      }
      if (DmgMin2 != 0F) {
        output.WriteRawTag(149, 3);
        output.WriteFloat(DmgMin2);
      }
      if (DmgMax2 != 0F) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(DmgMax2);
      }
      if (DmgType2 != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(DmgType2);
      }
      if (DmgMin3 != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(DmgMin3);
      }
      if (DmgMax3 != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(DmgMax3);
      }
      if (DmgType3 != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(DmgType3);
      }
      if (DmgMin4 != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(DmgMin4);
      }
      if (DmgMax4 != 0F) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(DmgMax4);
      }
      if (DmgType4 != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(DmgType4);
      }
      if (DmgMin5 != 0F) {
        output.WriteRawTag(221, 3);
        output.WriteFloat(DmgMin5);
      }
      if (DmgMax5 != 0F) {
        output.WriteRawTag(229, 3);
        output.WriteFloat(DmgMax5);
      }
      if (DmgType5 != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(DmgType5);
      }
      if (Armor != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(Armor);
      }
      resistances_.WriteTo(ref output, _map_resistances_codec);
      if (Delay != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(Delay);
      }
      if (AmmoType != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(AmmoType);
      }
      if (RangedModRange != 0F) {
        output.WriteRawTag(189, 4);
        output.WriteFloat(RangedModRange);
      }
      if (SpellId1 != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(SpellId1);
      }
      if (SpellTrigger1 != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(SpellTrigger1);
      }
      if (SpellCharges1 != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(SpellCharges1);
      }
      if (SpellPpmRate1 != 0F) {
        output.WriteRawTag(221, 4);
        output.WriteFloat(SpellPpmRate1);
      }
      if (SpellCooldown1 != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(SpellCooldown1);
      }
      if (SpellCategory1 != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(SpellCategory1);
      }
      if (SpellCategoryCooldown1 != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(SpellCategoryCooldown1);
      }
      if (SpellId2 != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(SpellId2);
      }
      if (SpellTrigger2 != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(SpellTrigger2);
      }
      if (SpellCharges2 != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(SpellCharges2);
      }
      if (SpellPpmRate2 != 0F) {
        output.WriteRawTag(149, 5);
        output.WriteFloat(SpellPpmRate2);
      }
      if (SpellCooldown2 != 0) {
        output.WriteRawTag(152, 5);
        output.WriteInt32(SpellCooldown2);
      }
      if (SpellCategory2 != 0) {
        output.WriteRawTag(160, 5);
        output.WriteInt32(SpellCategory2);
      }
      if (SpellCategoryCooldown2 != 0) {
        output.WriteRawTag(168, 5);
        output.WriteInt32(SpellCategoryCooldown2);
      }
      if (SpellId3 != 0) {
        output.WriteRawTag(176, 5);
        output.WriteInt32(SpellId3);
      }
      if (SpellTrigger3 != 0) {
        output.WriteRawTag(184, 5);
        output.WriteInt32(SpellTrigger3);
      }
      if (SpellCharges3 != 0) {
        output.WriteRawTag(192, 5);
        output.WriteInt32(SpellCharges3);
      }
      if (SpellPpmRate3 != 0F) {
        output.WriteRawTag(205, 5);
        output.WriteFloat(SpellPpmRate3);
      }
      if (SpellCooldown3 != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(SpellCooldown3);
      }
      if (SpellCategory3 != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(SpellCategory3);
      }
      if (SpellCategoryCooldown3 != 0) {
        output.WriteRawTag(224, 5);
        output.WriteInt32(SpellCategoryCooldown3);
      }
      if (SpellId4 != 0) {
        output.WriteRawTag(232, 5);
        output.WriteInt32(SpellId4);
      }
      if (SpellTrigger4 != 0) {
        output.WriteRawTag(240, 5);
        output.WriteInt32(SpellTrigger4);
      }
      if (SpellCharges4 != 0) {
        output.WriteRawTag(248, 5);
        output.WriteInt32(SpellCharges4);
      }
      if (SpellPpmRate4 != 0F) {
        output.WriteRawTag(133, 6);
        output.WriteFloat(SpellPpmRate4);
      }
      if (SpellCooldown4 != 0) {
        output.WriteRawTag(136, 6);
        output.WriteInt32(SpellCooldown4);
      }
      if (SpellCategory4 != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(SpellCategory4);
      }
      if (SpellCategoryCooldown4 != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(SpellCategoryCooldown4);
      }
      if (SpellId5 != 0) {
        output.WriteRawTag(160, 6);
        output.WriteInt32(SpellId5);
      }
      if (SpellTrigger5 != 0) {
        output.WriteRawTag(168, 6);
        output.WriteInt32(SpellTrigger5);
      }
      if (SpellCharges5 != 0) {
        output.WriteRawTag(176, 6);
        output.WriteInt32(SpellCharges5);
      }
      if (SpellPpmRate5 != 0F) {
        output.WriteRawTag(189, 6);
        output.WriteFloat(SpellPpmRate5);
      }
      if (SpellCooldown5 != 0) {
        output.WriteRawTag(192, 6);
        output.WriteInt32(SpellCooldown5);
      }
      if (SpellCategory5 != 0) {
        output.WriteRawTag(200, 6);
        output.WriteInt32(SpellCategory5);
      }
      if (SpellCategoryCooldown5 != 0) {
        output.WriteRawTag(208, 6);
        output.WriteInt32(SpellCategoryCooldown5);
      }
      if (Bonding != 0) {
        output.WriteRawTag(216, 6);
        output.WriteInt32(Bonding);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(226, 6);
        output.WriteString(Description);
      }
      if (PageText != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(PageText);
      }
      if (LanguageID != 0) {
        output.WriteRawTag(240, 6);
        output.WriteInt32(LanguageID);
      }
      if (PageMaterial != 0) {
        output.WriteRawTag(248, 6);
        output.WriteInt32(PageMaterial);
      }
      if (StartQuest != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(StartQuest);
      }
      if (LockId != 0) {
        output.WriteRawTag(136, 7);
        output.WriteInt32(LockId);
      }
      if (Material != 0) {
        output.WriteRawTag(144, 7);
        output.WriteInt32(Material);
      }
      if (Sheath != 0) {
        output.WriteRawTag(152, 7);
        output.WriteInt32(Sheath);
      }
      if (RandomProperty != 0) {
        output.WriteRawTag(160, 7);
        output.WriteInt32(RandomProperty);
      }
      if (Block != 0) {
        output.WriteRawTag(168, 7);
        output.WriteInt32(Block);
      }
      if (ItemSet != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(ItemSet);
      }
      if (MaxDurability != 0) {
        output.WriteRawTag(184, 7);
        output.WriteInt32(MaxDurability);
      }
      if (Area != 0) {
        output.WriteRawTag(192, 7);
        output.WriteInt32(Area);
      }
      if (Map != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(Map);
      }
      if (BagFamily != 0) {
        output.WriteRawTag(208, 7);
        output.WriteInt32(BagFamily);
      }
      if (ScriptName.Length != 0) {
        output.WriteRawTag(218, 7);
        output.WriteString(ScriptName);
      }
      if (DisenchantID != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(DisenchantID);
      }
      if (FoodType != 0) {
        output.WriteRawTag(232, 7);
        output.WriteInt32(FoodType);
      }
      if (MinMoneyLoot != 0) {
        output.WriteRawTag(240, 7);
        output.WriteInt32(MinMoneyLoot);
      }
      if (MaxMoneyLoot != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(MaxMoneyLoot);
      }
      if (Duration != 0) {
        output.WriteRawTag(128, 8);
        output.WriteInt32(Duration);
      }
      if (ExtraFlags != 0) {
        output.WriteRawTag(136, 8);
        output.WriteInt32(ExtraFlags);
      }
      if (OtherTeamEntry != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(OtherTeamEntry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Entry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entry);
      }
      if (Patch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Patch);
      }
      if (Class != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Class);
      }
      if (Subclass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Subclass);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayId);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      if (BuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyCount);
      }
      if (BuyPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyPrice);
      }
      if (SellPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SellPrice);
      }
      if (InventoryType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InventoryType);
      }
      if (AllowableClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllowableClass);
      }
      if (AllowableRace != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllowableRace);
      }
      if (ItemLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemLevel);
      }
      if (RequiredLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequiredLevel);
      }
      if (RequiredSkill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequiredSkill);
      }
      if (RequiredSkillRank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequiredSkillRank);
      }
      if (RequiredSpell != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequiredSpell);
      }
      if (RequiredHonorRank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequiredHonorRank);
      }
      if (RequiredCityRank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequiredCityRank);
      }
      if (RequiredReputationFaction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequiredReputationFaction);
      }
      if (RequiredReputationRank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequiredReputationRank);
      }
      if (MaxCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
      }
      if (Stackable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Stackable);
      }
      if (ContainerSlots != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ContainerSlots);
      }
      size += stats_.CalculateSize(_map_stats_codec);
      if (DmgMin1 != 0F) {
        size += 2 + 4;
      }
      if (DmgMax1 != 0F) {
        size += 2 + 4;
      }
      if (DmgType1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DmgType1);
      }
      if (DmgMin2 != 0F) {
        size += 2 + 4;
      }
      if (DmgMax2 != 0F) {
        size += 2 + 4;
      }
      if (DmgType2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DmgType2);
      }
      if (DmgMin3 != 0F) {
        size += 2 + 4;
      }
      if (DmgMax3 != 0F) {
        size += 2 + 4;
      }
      if (DmgType3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DmgType3);
      }
      if (DmgMin4 != 0F) {
        size += 2 + 4;
      }
      if (DmgMax4 != 0F) {
        size += 2 + 4;
      }
      if (DmgType4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DmgType4);
      }
      if (DmgMin5 != 0F) {
        size += 2 + 4;
      }
      if (DmgMax5 != 0F) {
        size += 2 + 4;
      }
      if (DmgType5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DmgType5);
      }
      if (Armor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Armor);
      }
      size += resistances_.CalculateSize(_map_resistances_codec);
      if (Delay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Delay);
      }
      if (AmmoType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AmmoType);
      }
      if (RangedModRange != 0F) {
        size += 2 + 4;
      }
      if (SpellId1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellId1);
      }
      if (SpellTrigger1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellTrigger1);
      }
      if (SpellCharges1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCharges1);
      }
      if (SpellPpmRate1 != 0F) {
        size += 2 + 4;
      }
      if (SpellCooldown1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCooldown1);
      }
      if (SpellCategory1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCategory1);
      }
      if (SpellCategoryCooldown1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCategoryCooldown1);
      }
      if (SpellId2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellId2);
      }
      if (SpellTrigger2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellTrigger2);
      }
      if (SpellCharges2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCharges2);
      }
      if (SpellPpmRate2 != 0F) {
        size += 2 + 4;
      }
      if (SpellCooldown2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCooldown2);
      }
      if (SpellCategory2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCategory2);
      }
      if (SpellCategoryCooldown2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCategoryCooldown2);
      }
      if (SpellId3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellId3);
      }
      if (SpellTrigger3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellTrigger3);
      }
      if (SpellCharges3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCharges3);
      }
      if (SpellPpmRate3 != 0F) {
        size += 2 + 4;
      }
      if (SpellCooldown3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCooldown3);
      }
      if (SpellCategory3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCategory3);
      }
      if (SpellCategoryCooldown3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCategoryCooldown3);
      }
      if (SpellId4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellId4);
      }
      if (SpellTrigger4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellTrigger4);
      }
      if (SpellCharges4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCharges4);
      }
      if (SpellPpmRate4 != 0F) {
        size += 2 + 4;
      }
      if (SpellCooldown4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCooldown4);
      }
      if (SpellCategory4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCategory4);
      }
      if (SpellCategoryCooldown4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCategoryCooldown4);
      }
      if (SpellId5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellId5);
      }
      if (SpellTrigger5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellTrigger5);
      }
      if (SpellCharges5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCharges5);
      }
      if (SpellPpmRate5 != 0F) {
        size += 2 + 4;
      }
      if (SpellCooldown5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCooldown5);
      }
      if (SpellCategory5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCategory5);
      }
      if (SpellCategoryCooldown5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellCategoryCooldown5);
      }
      if (Bonding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Bonding);
      }
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (PageText != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PageText);
      }
      if (LanguageID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LanguageID);
      }
      if (PageMaterial != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PageMaterial);
      }
      if (StartQuest != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartQuest);
      }
      if (LockId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LockId);
      }
      if (Material != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Material);
      }
      if (Sheath != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Sheath);
      }
      if (RandomProperty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RandomProperty);
      }
      if (Block != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Block);
      }
      if (ItemSet != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemSet);
      }
      if (MaxDurability != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxDurability);
      }
      if (Area != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Area);
      }
      if (Map != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Map);
      }
      if (BagFamily != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BagFamily);
      }
      if (ScriptName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ScriptName);
      }
      if (DisenchantID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisenchantID);
      }
      if (FoodType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FoodType);
      }
      if (MinMoneyLoot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinMoneyLoot);
      }
      if (MaxMoneyLoot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxMoneyLoot);
      }
      if (Duration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (ExtraFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExtraFlags);
      }
      if (OtherTeamEntry != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OtherTeamEntry);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ItemTemplate other) {
      if (other == null) {
        return;
      }
      if (other.Entry != 0) {
        Entry = other.Entry;
      }
      if (other.Patch != 0) {
        Patch = other.Patch;
      }
      if (other.Class != 0) {
        Class = other.Class;
      }
      if (other.Subclass != 0) {
        Subclass = other.Subclass;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayId != 0) {
        DisplayId = other.DisplayId;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.BuyCount != 0) {
        BuyCount = other.BuyCount;
      }
      if (other.BuyPrice != 0) {
        BuyPrice = other.BuyPrice;
      }
      if (other.SellPrice != 0) {
        SellPrice = other.SellPrice;
      }
      if (other.InventoryType != 0) {
        InventoryType = other.InventoryType;
      }
      if (other.AllowableClass != 0) {
        AllowableClass = other.AllowableClass;
      }
      if (other.AllowableRace != 0) {
        AllowableRace = other.AllowableRace;
      }
      if (other.ItemLevel != 0) {
        ItemLevel = other.ItemLevel;
      }
      if (other.RequiredLevel != 0) {
        RequiredLevel = other.RequiredLevel;
      }
      if (other.RequiredSkill != 0) {
        RequiredSkill = other.RequiredSkill;
      }
      if (other.RequiredSkillRank != 0) {
        RequiredSkillRank = other.RequiredSkillRank;
      }
      if (other.RequiredSpell != 0) {
        RequiredSpell = other.RequiredSpell;
      }
      if (other.RequiredHonorRank != 0) {
        RequiredHonorRank = other.RequiredHonorRank;
      }
      if (other.RequiredCityRank != 0) {
        RequiredCityRank = other.RequiredCityRank;
      }
      if (other.RequiredReputationFaction != 0) {
        RequiredReputationFaction = other.RequiredReputationFaction;
      }
      if (other.RequiredReputationRank != 0) {
        RequiredReputationRank = other.RequiredReputationRank;
      }
      if (other.MaxCount != 0) {
        MaxCount = other.MaxCount;
      }
      if (other.Stackable != 0) {
        Stackable = other.Stackable;
      }
      if (other.ContainerSlots != 0) {
        ContainerSlots = other.ContainerSlots;
      }
      stats_.MergeFrom(other.stats_);
      if (other.DmgMin1 != 0F) {
        DmgMin1 = other.DmgMin1;
      }
      if (other.DmgMax1 != 0F) {
        DmgMax1 = other.DmgMax1;
      }
      if (other.DmgType1 != 0) {
        DmgType1 = other.DmgType1;
      }
      if (other.DmgMin2 != 0F) {
        DmgMin2 = other.DmgMin2;
      }
      if (other.DmgMax2 != 0F) {
        DmgMax2 = other.DmgMax2;
      }
      if (other.DmgType2 != 0) {
        DmgType2 = other.DmgType2;
      }
      if (other.DmgMin3 != 0F) {
        DmgMin3 = other.DmgMin3;
      }
      if (other.DmgMax3 != 0F) {
        DmgMax3 = other.DmgMax3;
      }
      if (other.DmgType3 != 0) {
        DmgType3 = other.DmgType3;
      }
      if (other.DmgMin4 != 0F) {
        DmgMin4 = other.DmgMin4;
      }
      if (other.DmgMax4 != 0F) {
        DmgMax4 = other.DmgMax4;
      }
      if (other.DmgType4 != 0) {
        DmgType4 = other.DmgType4;
      }
      if (other.DmgMin5 != 0F) {
        DmgMin5 = other.DmgMin5;
      }
      if (other.DmgMax5 != 0F) {
        DmgMax5 = other.DmgMax5;
      }
      if (other.DmgType5 != 0) {
        DmgType5 = other.DmgType5;
      }
      if (other.Armor != 0) {
        Armor = other.Armor;
      }
      resistances_.MergeFrom(other.resistances_);
      if (other.Delay != 0) {
        Delay = other.Delay;
      }
      if (other.AmmoType != 0) {
        AmmoType = other.AmmoType;
      }
      if (other.RangedModRange != 0F) {
        RangedModRange = other.RangedModRange;
      }
      if (other.SpellId1 != 0) {
        SpellId1 = other.SpellId1;
      }
      if (other.SpellTrigger1 != 0) {
        SpellTrigger1 = other.SpellTrigger1;
      }
      if (other.SpellCharges1 != 0) {
        SpellCharges1 = other.SpellCharges1;
      }
      if (other.SpellPpmRate1 != 0F) {
        SpellPpmRate1 = other.SpellPpmRate1;
      }
      if (other.SpellCooldown1 != 0) {
        SpellCooldown1 = other.SpellCooldown1;
      }
      if (other.SpellCategory1 != 0) {
        SpellCategory1 = other.SpellCategory1;
      }
      if (other.SpellCategoryCooldown1 != 0) {
        SpellCategoryCooldown1 = other.SpellCategoryCooldown1;
      }
      if (other.SpellId2 != 0) {
        SpellId2 = other.SpellId2;
      }
      if (other.SpellTrigger2 != 0) {
        SpellTrigger2 = other.SpellTrigger2;
      }
      if (other.SpellCharges2 != 0) {
        SpellCharges2 = other.SpellCharges2;
      }
      if (other.SpellPpmRate2 != 0F) {
        SpellPpmRate2 = other.SpellPpmRate2;
      }
      if (other.SpellCooldown2 != 0) {
        SpellCooldown2 = other.SpellCooldown2;
      }
      if (other.SpellCategory2 != 0) {
        SpellCategory2 = other.SpellCategory2;
      }
      if (other.SpellCategoryCooldown2 != 0) {
        SpellCategoryCooldown2 = other.SpellCategoryCooldown2;
      }
      if (other.SpellId3 != 0) {
        SpellId3 = other.SpellId3;
      }
      if (other.SpellTrigger3 != 0) {
        SpellTrigger3 = other.SpellTrigger3;
      }
      if (other.SpellCharges3 != 0) {
        SpellCharges3 = other.SpellCharges3;
      }
      if (other.SpellPpmRate3 != 0F) {
        SpellPpmRate3 = other.SpellPpmRate3;
      }
      if (other.SpellCooldown3 != 0) {
        SpellCooldown3 = other.SpellCooldown3;
      }
      if (other.SpellCategory3 != 0) {
        SpellCategory3 = other.SpellCategory3;
      }
      if (other.SpellCategoryCooldown3 != 0) {
        SpellCategoryCooldown3 = other.SpellCategoryCooldown3;
      }
      if (other.SpellId4 != 0) {
        SpellId4 = other.SpellId4;
      }
      if (other.SpellTrigger4 != 0) {
        SpellTrigger4 = other.SpellTrigger4;
      }
      if (other.SpellCharges4 != 0) {
        SpellCharges4 = other.SpellCharges4;
      }
      if (other.SpellPpmRate4 != 0F) {
        SpellPpmRate4 = other.SpellPpmRate4;
      }
      if (other.SpellCooldown4 != 0) {
        SpellCooldown4 = other.SpellCooldown4;
      }
      if (other.SpellCategory4 != 0) {
        SpellCategory4 = other.SpellCategory4;
      }
      if (other.SpellCategoryCooldown4 != 0) {
        SpellCategoryCooldown4 = other.SpellCategoryCooldown4;
      }
      if (other.SpellId5 != 0) {
        SpellId5 = other.SpellId5;
      }
      if (other.SpellTrigger5 != 0) {
        SpellTrigger5 = other.SpellTrigger5;
      }
      if (other.SpellCharges5 != 0) {
        SpellCharges5 = other.SpellCharges5;
      }
      if (other.SpellPpmRate5 != 0F) {
        SpellPpmRate5 = other.SpellPpmRate5;
      }
      if (other.SpellCooldown5 != 0) {
        SpellCooldown5 = other.SpellCooldown5;
      }
      if (other.SpellCategory5 != 0) {
        SpellCategory5 = other.SpellCategory5;
      }
      if (other.SpellCategoryCooldown5 != 0) {
        SpellCategoryCooldown5 = other.SpellCategoryCooldown5;
      }
      if (other.Bonding != 0) {
        Bonding = other.Bonding;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.PageText != 0) {
        PageText = other.PageText;
      }
      if (other.LanguageID != 0) {
        LanguageID = other.LanguageID;
      }
      if (other.PageMaterial != 0) {
        PageMaterial = other.PageMaterial;
      }
      if (other.StartQuest != 0) {
        StartQuest = other.StartQuest;
      }
      if (other.LockId != 0) {
        LockId = other.LockId;
      }
      if (other.Material != 0) {
        Material = other.Material;
      }
      if (other.Sheath != 0) {
        Sheath = other.Sheath;
      }
      if (other.RandomProperty != 0) {
        RandomProperty = other.RandomProperty;
      }
      if (other.Block != 0) {
        Block = other.Block;
      }
      if (other.ItemSet != 0) {
        ItemSet = other.ItemSet;
      }
      if (other.MaxDurability != 0) {
        MaxDurability = other.MaxDurability;
      }
      if (other.Area != 0) {
        Area = other.Area;
      }
      if (other.Map != 0) {
        Map = other.Map;
      }
      if (other.BagFamily != 0) {
        BagFamily = other.BagFamily;
      }
      if (other.ScriptName.Length != 0) {
        ScriptName = other.ScriptName;
      }
      if (other.DisenchantID != 0) {
        DisenchantID = other.DisenchantID;
      }
      if (other.FoodType != 0) {
        FoodType = other.FoodType;
      }
      if (other.MinMoneyLoot != 0) {
        MinMoneyLoot = other.MinMoneyLoot;
      }
      if (other.MaxMoneyLoot != 0) {
        MaxMoneyLoot = other.MaxMoneyLoot;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.ExtraFlags != 0) {
        ExtraFlags = other.ExtraFlags;
      }
      if (other.OtherTeamEntry != 0) {
        OtherTeamEntry = other.OtherTeamEntry;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entry = input.ReadInt32();
            break;
          }
          case 16: {
            Patch = input.ReadInt32();
            break;
          }
          case 24: {
            Class = input.ReadInt32();
            break;
          }
          case 32: {
            Subclass = input.ReadInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            DisplayId = input.ReadInt32();
            break;
          }
          case 56: {
            Quality = input.ReadInt32();
            break;
          }
          case 64: {
            Flags = input.ReadInt32();
            break;
          }
          case 72: {
            BuyCount = input.ReadInt32();
            break;
          }
          case 80: {
            BuyPrice = input.ReadInt32();
            break;
          }
          case 88: {
            SellPrice = input.ReadInt32();
            break;
          }
          case 96: {
            InventoryType = input.ReadInt32();
            break;
          }
          case 104: {
            AllowableClass = input.ReadInt32();
            break;
          }
          case 112: {
            AllowableRace = input.ReadInt32();
            break;
          }
          case 120: {
            ItemLevel = input.ReadInt32();
            break;
          }
          case 128: {
            RequiredLevel = input.ReadInt32();
            break;
          }
          case 136: {
            RequiredSkill = input.ReadInt32();
            break;
          }
          case 144: {
            RequiredSkillRank = input.ReadInt32();
            break;
          }
          case 152: {
            RequiredSpell = input.ReadInt32();
            break;
          }
          case 160: {
            RequiredHonorRank = input.ReadInt32();
            break;
          }
          case 168: {
            RequiredCityRank = input.ReadInt32();
            break;
          }
          case 176: {
            RequiredReputationFaction = input.ReadInt32();
            break;
          }
          case 184: {
            RequiredReputationRank = input.ReadInt32();
            break;
          }
          case 192: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 200: {
            Stackable = input.ReadInt32();
            break;
          }
          case 208: {
            ContainerSlots = input.ReadInt32();
            break;
          }
          case 218: {
            stats_.AddEntriesFrom(input, _map_stats_codec);
            break;
          }
          case 381: {
            DmgMin1 = input.ReadFloat();
            break;
          }
          case 389: {
            DmgMax1 = input.ReadFloat();
            break;
          }
          case 392: {
            DmgType1 = input.ReadInt32();
            break;
          }
          case 405: {
            DmgMin2 = input.ReadFloat();
            break;
          }
          case 413: {
            DmgMax2 = input.ReadFloat();
            break;
          }
          case 416: {
            DmgType2 = input.ReadInt32();
            break;
          }
          case 429: {
            DmgMin3 = input.ReadFloat();
            break;
          }
          case 437: {
            DmgMax3 = input.ReadFloat();
            break;
          }
          case 440: {
            DmgType3 = input.ReadInt32();
            break;
          }
          case 453: {
            DmgMin4 = input.ReadFloat();
            break;
          }
          case 461: {
            DmgMax4 = input.ReadFloat();
            break;
          }
          case 464: {
            DmgType4 = input.ReadInt32();
            break;
          }
          case 477: {
            DmgMin5 = input.ReadFloat();
            break;
          }
          case 485: {
            DmgMax5 = input.ReadFloat();
            break;
          }
          case 488: {
            DmgType5 = input.ReadInt32();
            break;
          }
          case 496: {
            Armor = input.ReadInt32();
            break;
          }
          case 506: {
            resistances_.AddEntriesFrom(input, _map_resistances_codec);
            break;
          }
          case 552: {
            Delay = input.ReadInt32();
            break;
          }
          case 560: {
            AmmoType = input.ReadInt32();
            break;
          }
          case 573: {
            RangedModRange = input.ReadFloat();
            break;
          }
          case 576: {
            SpellId1 = input.ReadInt32();
            break;
          }
          case 584: {
            SpellTrigger1 = input.ReadInt32();
            break;
          }
          case 592: {
            SpellCharges1 = input.ReadInt32();
            break;
          }
          case 605: {
            SpellPpmRate1 = input.ReadFloat();
            break;
          }
          case 608: {
            SpellCooldown1 = input.ReadInt32();
            break;
          }
          case 616: {
            SpellCategory1 = input.ReadInt32();
            break;
          }
          case 624: {
            SpellCategoryCooldown1 = input.ReadInt32();
            break;
          }
          case 632: {
            SpellId2 = input.ReadInt32();
            break;
          }
          case 640: {
            SpellTrigger2 = input.ReadInt32();
            break;
          }
          case 648: {
            SpellCharges2 = input.ReadInt32();
            break;
          }
          case 661: {
            SpellPpmRate2 = input.ReadFloat();
            break;
          }
          case 664: {
            SpellCooldown2 = input.ReadInt32();
            break;
          }
          case 672: {
            SpellCategory2 = input.ReadInt32();
            break;
          }
          case 680: {
            SpellCategoryCooldown2 = input.ReadInt32();
            break;
          }
          case 688: {
            SpellId3 = input.ReadInt32();
            break;
          }
          case 696: {
            SpellTrigger3 = input.ReadInt32();
            break;
          }
          case 704: {
            SpellCharges3 = input.ReadInt32();
            break;
          }
          case 717: {
            SpellPpmRate3 = input.ReadFloat();
            break;
          }
          case 720: {
            SpellCooldown3 = input.ReadInt32();
            break;
          }
          case 728: {
            SpellCategory3 = input.ReadInt32();
            break;
          }
          case 736: {
            SpellCategoryCooldown3 = input.ReadInt32();
            break;
          }
          case 744: {
            SpellId4 = input.ReadInt32();
            break;
          }
          case 752: {
            SpellTrigger4 = input.ReadInt32();
            break;
          }
          case 760: {
            SpellCharges4 = input.ReadInt32();
            break;
          }
          case 773: {
            SpellPpmRate4 = input.ReadFloat();
            break;
          }
          case 776: {
            SpellCooldown4 = input.ReadInt32();
            break;
          }
          case 784: {
            SpellCategory4 = input.ReadInt32();
            break;
          }
          case 792: {
            SpellCategoryCooldown4 = input.ReadInt32();
            break;
          }
          case 800: {
            SpellId5 = input.ReadInt32();
            break;
          }
          case 808: {
            SpellTrigger5 = input.ReadInt32();
            break;
          }
          case 816: {
            SpellCharges5 = input.ReadInt32();
            break;
          }
          case 829: {
            SpellPpmRate5 = input.ReadFloat();
            break;
          }
          case 832: {
            SpellCooldown5 = input.ReadInt32();
            break;
          }
          case 840: {
            SpellCategory5 = input.ReadInt32();
            break;
          }
          case 848: {
            SpellCategoryCooldown5 = input.ReadInt32();
            break;
          }
          case 856: {
            Bonding = input.ReadInt32();
            break;
          }
          case 866: {
            Description = input.ReadString();
            break;
          }
          case 872: {
            PageText = input.ReadInt32();
            break;
          }
          case 880: {
            LanguageID = input.ReadInt32();
            break;
          }
          case 888: {
            PageMaterial = input.ReadInt32();
            break;
          }
          case 896: {
            StartQuest = input.ReadInt32();
            break;
          }
          case 904: {
            LockId = input.ReadInt32();
            break;
          }
          case 912: {
            Material = input.ReadInt32();
            break;
          }
          case 920: {
            Sheath = input.ReadInt32();
            break;
          }
          case 928: {
            RandomProperty = input.ReadInt32();
            break;
          }
          case 936: {
            Block = input.ReadInt32();
            break;
          }
          case 944: {
            ItemSet = input.ReadInt32();
            break;
          }
          case 952: {
            MaxDurability = input.ReadInt32();
            break;
          }
          case 960: {
            Area = input.ReadInt32();
            break;
          }
          case 968: {
            Map = input.ReadInt32();
            break;
          }
          case 976: {
            BagFamily = input.ReadInt32();
            break;
          }
          case 986: {
            ScriptName = input.ReadString();
            break;
          }
          case 992: {
            DisenchantID = input.ReadInt32();
            break;
          }
          case 1000: {
            FoodType = input.ReadInt32();
            break;
          }
          case 1008: {
            MinMoneyLoot = input.ReadInt32();
            break;
          }
          case 1016: {
            MaxMoneyLoot = input.ReadInt32();
            break;
          }
          case 1024: {
            Duration = input.ReadInt32();
            break;
          }
          case 1032: {
            ExtraFlags = input.ReadInt32();
            break;
          }
          case 1040: {
            OtherTeamEntry = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Entry = input.ReadInt32();
            break;
          }
          case 16: {
            Patch = input.ReadInt32();
            break;
          }
          case 24: {
            Class = input.ReadInt32();
            break;
          }
          case 32: {
            Subclass = input.ReadInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            DisplayId = input.ReadInt32();
            break;
          }
          case 56: {
            Quality = input.ReadInt32();
            break;
          }
          case 64: {
            Flags = input.ReadInt32();
            break;
          }
          case 72: {
            BuyCount = input.ReadInt32();
            break;
          }
          case 80: {
            BuyPrice = input.ReadInt32();
            break;
          }
          case 88: {
            SellPrice = input.ReadInt32();
            break;
          }
          case 96: {
            InventoryType = input.ReadInt32();
            break;
          }
          case 104: {
            AllowableClass = input.ReadInt32();
            break;
          }
          case 112: {
            AllowableRace = input.ReadInt32();
            break;
          }
          case 120: {
            ItemLevel = input.ReadInt32();
            break;
          }
          case 128: {
            RequiredLevel = input.ReadInt32();
            break;
          }
          case 136: {
            RequiredSkill = input.ReadInt32();
            break;
          }
          case 144: {
            RequiredSkillRank = input.ReadInt32();
            break;
          }
          case 152: {
            RequiredSpell = input.ReadInt32();
            break;
          }
          case 160: {
            RequiredHonorRank = input.ReadInt32();
            break;
          }
          case 168: {
            RequiredCityRank = input.ReadInt32();
            break;
          }
          case 176: {
            RequiredReputationFaction = input.ReadInt32();
            break;
          }
          case 184: {
            RequiredReputationRank = input.ReadInt32();
            break;
          }
          case 192: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 200: {
            Stackable = input.ReadInt32();
            break;
          }
          case 208: {
            ContainerSlots = input.ReadInt32();
            break;
          }
          case 218: {
            stats_.AddEntriesFrom(ref input, _map_stats_codec);
            break;
          }
          case 381: {
            DmgMin1 = input.ReadFloat();
            break;
          }
          case 389: {
            DmgMax1 = input.ReadFloat();
            break;
          }
          case 392: {
            DmgType1 = input.ReadInt32();
            break;
          }
          case 405: {
            DmgMin2 = input.ReadFloat();
            break;
          }
          case 413: {
            DmgMax2 = input.ReadFloat();
            break;
          }
          case 416: {
            DmgType2 = input.ReadInt32();
            break;
          }
          case 429: {
            DmgMin3 = input.ReadFloat();
            break;
          }
          case 437: {
            DmgMax3 = input.ReadFloat();
            break;
          }
          case 440: {
            DmgType3 = input.ReadInt32();
            break;
          }
          case 453: {
            DmgMin4 = input.ReadFloat();
            break;
          }
          case 461: {
            DmgMax4 = input.ReadFloat();
            break;
          }
          case 464: {
            DmgType4 = input.ReadInt32();
            break;
          }
          case 477: {
            DmgMin5 = input.ReadFloat();
            break;
          }
          case 485: {
            DmgMax5 = input.ReadFloat();
            break;
          }
          case 488: {
            DmgType5 = input.ReadInt32();
            break;
          }
          case 496: {
            Armor = input.ReadInt32();
            break;
          }
          case 506: {
            resistances_.AddEntriesFrom(ref input, _map_resistances_codec);
            break;
          }
          case 552: {
            Delay = input.ReadInt32();
            break;
          }
          case 560: {
            AmmoType = input.ReadInt32();
            break;
          }
          case 573: {
            RangedModRange = input.ReadFloat();
            break;
          }
          case 576: {
            SpellId1 = input.ReadInt32();
            break;
          }
          case 584: {
            SpellTrigger1 = input.ReadInt32();
            break;
          }
          case 592: {
            SpellCharges1 = input.ReadInt32();
            break;
          }
          case 605: {
            SpellPpmRate1 = input.ReadFloat();
            break;
          }
          case 608: {
            SpellCooldown1 = input.ReadInt32();
            break;
          }
          case 616: {
            SpellCategory1 = input.ReadInt32();
            break;
          }
          case 624: {
            SpellCategoryCooldown1 = input.ReadInt32();
            break;
          }
          case 632: {
            SpellId2 = input.ReadInt32();
            break;
          }
          case 640: {
            SpellTrigger2 = input.ReadInt32();
            break;
          }
          case 648: {
            SpellCharges2 = input.ReadInt32();
            break;
          }
          case 661: {
            SpellPpmRate2 = input.ReadFloat();
            break;
          }
          case 664: {
            SpellCooldown2 = input.ReadInt32();
            break;
          }
          case 672: {
            SpellCategory2 = input.ReadInt32();
            break;
          }
          case 680: {
            SpellCategoryCooldown2 = input.ReadInt32();
            break;
          }
          case 688: {
            SpellId3 = input.ReadInt32();
            break;
          }
          case 696: {
            SpellTrigger3 = input.ReadInt32();
            break;
          }
          case 704: {
            SpellCharges3 = input.ReadInt32();
            break;
          }
          case 717: {
            SpellPpmRate3 = input.ReadFloat();
            break;
          }
          case 720: {
            SpellCooldown3 = input.ReadInt32();
            break;
          }
          case 728: {
            SpellCategory3 = input.ReadInt32();
            break;
          }
          case 736: {
            SpellCategoryCooldown3 = input.ReadInt32();
            break;
          }
          case 744: {
            SpellId4 = input.ReadInt32();
            break;
          }
          case 752: {
            SpellTrigger4 = input.ReadInt32();
            break;
          }
          case 760: {
            SpellCharges4 = input.ReadInt32();
            break;
          }
          case 773: {
            SpellPpmRate4 = input.ReadFloat();
            break;
          }
          case 776: {
            SpellCooldown4 = input.ReadInt32();
            break;
          }
          case 784: {
            SpellCategory4 = input.ReadInt32();
            break;
          }
          case 792: {
            SpellCategoryCooldown4 = input.ReadInt32();
            break;
          }
          case 800: {
            SpellId5 = input.ReadInt32();
            break;
          }
          case 808: {
            SpellTrigger5 = input.ReadInt32();
            break;
          }
          case 816: {
            SpellCharges5 = input.ReadInt32();
            break;
          }
          case 829: {
            SpellPpmRate5 = input.ReadFloat();
            break;
          }
          case 832: {
            SpellCooldown5 = input.ReadInt32();
            break;
          }
          case 840: {
            SpellCategory5 = input.ReadInt32();
            break;
          }
          case 848: {
            SpellCategoryCooldown5 = input.ReadInt32();
            break;
          }
          case 856: {
            Bonding = input.ReadInt32();
            break;
          }
          case 866: {
            Description = input.ReadString();
            break;
          }
          case 872: {
            PageText = input.ReadInt32();
            break;
          }
          case 880: {
            LanguageID = input.ReadInt32();
            break;
          }
          case 888: {
            PageMaterial = input.ReadInt32();
            break;
          }
          case 896: {
            StartQuest = input.ReadInt32();
            break;
          }
          case 904: {
            LockId = input.ReadInt32();
            break;
          }
          case 912: {
            Material = input.ReadInt32();
            break;
          }
          case 920: {
            Sheath = input.ReadInt32();
            break;
          }
          case 928: {
            RandomProperty = input.ReadInt32();
            break;
          }
          case 936: {
            Block = input.ReadInt32();
            break;
          }
          case 944: {
            ItemSet = input.ReadInt32();
            break;
          }
          case 952: {
            MaxDurability = input.ReadInt32();
            break;
          }
          case 960: {
            Area = input.ReadInt32();
            break;
          }
          case 968: {
            Map = input.ReadInt32();
            break;
          }
          case 976: {
            BagFamily = input.ReadInt32();
            break;
          }
          case 986: {
            ScriptName = input.ReadString();
            break;
          }
          case 992: {
            DisenchantID = input.ReadInt32();
            break;
          }
          case 1000: {
            FoodType = input.ReadInt32();
            break;
          }
          case 1008: {
            MinMoneyLoot = input.ReadInt32();
            break;
          }
          case 1016: {
            MaxMoneyLoot = input.ReadInt32();
            break;
          }
          case 1024: {
            Duration = input.ReadInt32();
            break;
          }
          case 1032: {
            ExtraFlags = input.ReadInt32();
            break;
          }
          case 1040: {
            OtherTeamEntry = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class NpcVendorEntry : pb::IMessage<NpcVendorEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NpcVendorEntry> _parser = new pb::MessageParser<NpcVendorEntry>(() => new NpcVendorEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NpcVendorEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Database.DatabaseReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NpcVendorEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NpcVendorEntry(NpcVendorEntry other) : this() {
      entry_ = other.entry_;
      item_ = other.item_;
      maxCount_ = other.maxCount_;
      incrTime_ = other.incrTime_;
      slot_ = other.slot_;
      conditionId_ = other.conditionId_;
      comments_ = other.comments_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NpcVendorEntry Clone() {
      return new NpcVendorEntry(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private int entry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Entry {
      get { return entry_; }
      set {
        entry_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 2;
    private int item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "maxCount" field.</summary>
    public const int MaxCountFieldNumber = 3;
    private int maxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    /// <summary>Field number for the "incrTime" field.</summary>
    public const int IncrTimeFieldNumber = 4;
    private int incrTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IncrTime {
      get { return incrTime_; }
      set {
        incrTime_ = value;
      }
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 5;
    private int slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    /// <summary>Field number for the "conditionId" field.</summary>
    public const int ConditionIdFieldNumber = 6;
    private int conditionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ConditionId {
      get { return conditionId_; }
      set {
        conditionId_ = value;
      }
    }

    /// <summary>Field number for the "comments" field.</summary>
    public const int CommentsFieldNumber = 7;
    private string comments_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Comments {
      get { return comments_; }
      set {
        comments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NpcVendorEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NpcVendorEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entry != other.Entry) return false;
      if (Item != other.Item) return false;
      if (MaxCount != other.MaxCount) return false;
      if (IncrTime != other.IncrTime) return false;
      if (Slot != other.Slot) return false;
      if (ConditionId != other.ConditionId) return false;
      if (Comments != other.Comments) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Entry != 0) hash ^= Entry.GetHashCode();
      if (Item != 0) hash ^= Item.GetHashCode();
      if (MaxCount != 0) hash ^= MaxCount.GetHashCode();
      if (IncrTime != 0) hash ^= IncrTime.GetHashCode();
      if (Slot != 0) hash ^= Slot.GetHashCode();
      if (ConditionId != 0) hash ^= ConditionId.GetHashCode();
      if (Comments.Length != 0) hash ^= Comments.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Entry != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entry);
      }
      if (Item != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Item);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxCount);
      }
      if (IncrTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IncrTime);
      }
      if (Slot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Slot);
      }
      if (ConditionId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ConditionId);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Comments);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Entry != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entry);
      }
      if (Item != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Item);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxCount);
      }
      if (IncrTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IncrTime);
      }
      if (Slot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Slot);
      }
      if (ConditionId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ConditionId);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Comments);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Entry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entry);
      }
      if (Item != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Item);
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
      }
      if (IncrTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IncrTime);
      }
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
      }
      if (ConditionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConditionId);
      }
      if (Comments.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comments);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NpcVendorEntry other) {
      if (other == null) {
        return;
      }
      if (other.Entry != 0) {
        Entry = other.Entry;
      }
      if (other.Item != 0) {
        Item = other.Item;
      }
      if (other.MaxCount != 0) {
        MaxCount = other.MaxCount;
      }
      if (other.IncrTime != 0) {
        IncrTime = other.IncrTime;
      }
      if (other.Slot != 0) {
        Slot = other.Slot;
      }
      if (other.ConditionId != 0) {
        ConditionId = other.ConditionId;
      }
      if (other.Comments.Length != 0) {
        Comments = other.Comments;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entry = input.ReadInt32();
            break;
          }
          case 16: {
            Item = input.ReadInt32();
            break;
          }
          case 24: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 32: {
            IncrTime = input.ReadInt32();
            break;
          }
          case 40: {
            Slot = input.ReadInt32();
            break;
          }
          case 48: {
            ConditionId = input.ReadInt32();
            break;
          }
          case 58: {
            Comments = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Entry = input.ReadInt32();
            break;
          }
          case 16: {
            Item = input.ReadInt32();
            break;
          }
          case 24: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 32: {
            IncrTime = input.ReadInt32();
            break;
          }
          case 40: {
            Slot = input.ReadInt32();
            break;
          }
          case 48: {
            ConditionId = input.ReadInt32();
            break;
          }
          case 58: {
            Comments = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class QuestTemplate : pb::IMessage<QuestTemplate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QuestTemplate> _parser = new pb::MessageParser<QuestTemplate>(() => new QuestTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<QuestTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Database.DatabaseReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuestTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuestTemplate(QuestTemplate other) : this() {
      entry_ = other.entry_;
      method_ = other.method_;
      zoneOrSort_ = other.zoneOrSort_;
      minLevel_ = other.minLevel_;
      maxLevel_ = other.maxLevel_;
      questLevel_ = other.questLevel_;
      type_ = other.type_;
      requiredClasses_ = other.requiredClasses_;
      requiredRaces_ = other.requiredRaces_;
      requiredSkill_ = other.requiredSkill_;
      requiredSkillValue_ = other.requiredSkillValue_;
      requiredCondition_ = other.requiredCondition_;
      repObjectiveFaction_ = other.repObjectiveFaction_;
      repObjectiveValue_ = other.repObjectiveValue_;
      requiredMinRepFaction_ = other.requiredMinRepFaction_;
      requiredMinRepValue_ = other.requiredMinRepValue_;
      requiredMaxRepFaction_ = other.requiredMaxRepFaction_;
      requiredMaxRepValue_ = other.requiredMaxRepValue_;
      suggestedPlayers_ = other.suggestedPlayers_;
      limitTime_ = other.limitTime_;
      questFlags_ = other.questFlags_;
      specialFlags_ = other.specialFlags_;
      prevQuestId_ = other.prevQuestId_;
      nextQuestId_ = other.nextQuestId_;
      exclusiveGroup_ = other.exclusiveGroup_;
      breadcrumbForQuestId_ = other.breadcrumbForQuestId_;
      nextQuestInChain_ = other.nextQuestInChain_;
      srcItemId_ = other.srcItemId_;
      srcItemCount_ = other.srcItemCount_;
      srcSpell_ = other.srcSpell_;
      title_ = other.title_;
      details_ = other.details_;
      objectives_ = other.objectives_;
      offerRewardText_ = other.offerRewardText_;
      requestItemsText_ = other.requestItemsText_;
      endText_ = other.endText_;
      objectiveText1_ = other.objectiveText1_;
      objectiveText2_ = other.objectiveText2_;
      objectiveText3_ = other.objectiveText3_;
      objectiveText4_ = other.objectiveText4_;
      reqItemId1_ = other.reqItemId1_;
      reqItemId2_ = other.reqItemId2_;
      reqItemId3_ = other.reqItemId3_;
      reqItemId4_ = other.reqItemId4_;
      reqItemCount1_ = other.reqItemCount1_;
      reqItemCount2_ = other.reqItemCount2_;
      reqItemCount3_ = other.reqItemCount3_;
      reqItemCount4_ = other.reqItemCount4_;
      reqSourceId1_ = other.reqSourceId1_;
      reqSourceId2_ = other.reqSourceId2_;
      reqSourceId3_ = other.reqSourceId3_;
      reqSourceId4_ = other.reqSourceId4_;
      reqSourceCount1_ = other.reqSourceCount1_;
      reqSourceCount2_ = other.reqSourceCount2_;
      reqSourceCount3_ = other.reqSourceCount3_;
      reqSourceCount4_ = other.reqSourceCount4_;
      reqCreatureOrGOId1_ = other.reqCreatureOrGOId1_;
      reqCreatureOrGOId2_ = other.reqCreatureOrGOId2_;
      reqCreatureOrGOId3_ = other.reqCreatureOrGOId3_;
      reqCreatureOrGOId4_ = other.reqCreatureOrGOId4_;
      reqCreatureOrGOCount1_ = other.reqCreatureOrGOCount1_;
      reqCreatureOrGOCount2_ = other.reqCreatureOrGOCount2_;
      reqCreatureOrGOCount3_ = other.reqCreatureOrGOCount3_;
      reqCreatureOrGOCount4_ = other.reqCreatureOrGOCount4_;
      reqSpellCast1_ = other.reqSpellCast1_;
      reqSpellCast2_ = other.reqSpellCast2_;
      reqSpellCast3_ = other.reqSpellCast3_;
      reqSpellCast4_ = other.reqSpellCast4_;
      rawChoiceItemId1_ = other.rawChoiceItemId1_;
      rawChoiceItemId2_ = other.rawChoiceItemId2_;
      rawChoiceItemId3_ = other.rawChoiceItemId3_;
      rawChoiceItemId4_ = other.rawChoiceItemId4_;
      rawChoiceItemId5_ = other.rawChoiceItemId5_;
      rawChoiceItemId6_ = other.rawChoiceItemId6_;
      rawChoiceItemCount1_ = other.rawChoiceItemCount1_;
      rawChoiceItemCount2_ = other.rawChoiceItemCount2_;
      rawChoiceItemCount3_ = other.rawChoiceItemCount3_;
      rawChoiceItemCount4_ = other.rawChoiceItemCount4_;
      rawChoiceItemCount5_ = other.rawChoiceItemCount5_;
      rawChoiceItemCount6_ = other.rawChoiceItemCount6_;
      rawItemId1_ = other.rawItemId1_;
      rawItemId2_ = other.rawItemId2_;
      rawItemId3_ = other.rawItemId3_;
      rawItemId4_ = other.rawItemId4_;
      rawItemCount1_ = other.rawItemCount1_;
      rawItemCount2_ = other.rawItemCount2_;
      rawItemCount3_ = other.rawItemCount3_;
      rawItemCount4_ = other.rawItemCount4_;
      rawRepFaction1_ = other.rawRepFaction1_;
      rawRepFaction2_ = other.rawRepFaction2_;
      rawRepFaction3_ = other.rawRepFaction3_;
      rawRepFaction4_ = other.rawRepFaction4_;
      rawRepFaction5_ = other.rawRepFaction5_;
      rawRepValue1_ = other.rawRepValue1_;
      rawRepValue2_ = other.rawRepValue2_;
      rawRepValue3_ = other.rawRepValue3_;
      rawRepValue4_ = other.rawRepValue4_;
      rawRepValue5_ = other.rawRepValue5_;
      rawOrReqMoney_ = other.rawOrReqMoney_;
      rawMoneyMaxLevel_ = other.rawMoneyMaxLevel_;
      rawSpell_ = other.rawSpell_;
      rawSpellCast_ = other.rawSpellCast_;
      rawMailTemplateId_ = other.rawMailTemplateId_;
      rawMailDelaySecs_ = other.rawMailDelaySecs_;
      pointMapId_ = other.pointMapId_;
      pointX_ = other.pointX_;
      pointY_ = other.pointY_;
      pointOpt_ = other.pointOpt_;
      detailsEmote1_ = other.detailsEmote1_;
      detailsEmote2_ = other.detailsEmote2_;
      detailsEmote3_ = other.detailsEmote3_;
      detailsEmote4_ = other.detailsEmote4_;
      detailsEmoteDelay1_ = other.detailsEmoteDelay1_;
      detailsEmoteDelay2_ = other.detailsEmoteDelay2_;
      detailsEmoteDelay3_ = other.detailsEmoteDelay3_;
      detailsEmoteDelay4_ = other.detailsEmoteDelay4_;
      incompleteEmote_ = other.incompleteEmote_;
      incompleteEmoteDelay_ = other.incompleteEmoteDelay_;
      completeEmote_ = other.completeEmote_;
      completeEmoteDelay_ = other.completeEmoteDelay_;
      offerRewardEmote1_ = other.offerRewardEmote1_;
      offerRewardEmote2_ = other.offerRewardEmote2_;
      offerRewardEmote3_ = other.offerRewardEmote3_;
      offerRewardEmote4_ = other.offerRewardEmote4_;
      offerRewardEmoteDelay1_ = other.offerRewardEmoteDelay1_;
      offerRewardEmoteDelay2_ = other.offerRewardEmoteDelay2_;
      offerRewardEmoteDelay3_ = other.offerRewardEmoteDelay3_;
      offerRewardEmoteDelay4_ = other.offerRewardEmoteDelay4_;
      startScript_ = other.startScript_;
      completeScript_ = other.completeScript_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuestTemplate Clone() {
      return new QuestTemplate(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private int entry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Entry {
      get { return entry_; }
      set {
        entry_ = value;
      }
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 2;
    private int method_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Method {
      get { return method_; }
      set {
        method_ = value;
      }
    }

    /// <summary>Field number for the "zoneOrSort" field.</summary>
    public const int ZoneOrSortFieldNumber = 3;
    private int zoneOrSort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ZoneOrSort {
      get { return zoneOrSort_; }
      set {
        zoneOrSort_ = value;
      }
    }

    /// <summary>Field number for the "minLevel" field.</summary>
    public const int MinLevelFieldNumber = 4;
    private int minLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinLevel {
      get { return minLevel_; }
      set {
        minLevel_ = value;
      }
    }

    /// <summary>Field number for the "maxLevel" field.</summary>
    public const int MaxLevelFieldNumber = 5;
    private int maxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "questLevel" field.</summary>
    public const int QuestLevelFieldNumber = 6;
    private int questLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int QuestLevel {
      get { return questLevel_; }
      set {
        questLevel_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "requiredClasses" field.</summary>
    public const int RequiredClassesFieldNumber = 8;
    private int requiredClasses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredClasses {
      get { return requiredClasses_; }
      set {
        requiredClasses_ = value;
      }
    }

    /// <summary>Field number for the "requiredRaces" field.</summary>
    public const int RequiredRacesFieldNumber = 9;
    private int requiredRaces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredRaces {
      get { return requiredRaces_; }
      set {
        requiredRaces_ = value;
      }
    }

    /// <summary>Field number for the "requiredSkill" field.</summary>
    public const int RequiredSkillFieldNumber = 10;
    private int requiredSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredSkill {
      get { return requiredSkill_; }
      set {
        requiredSkill_ = value;
      }
    }

    /// <summary>Field number for the "requiredSkillValue" field.</summary>
    public const int RequiredSkillValueFieldNumber = 11;
    private int requiredSkillValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredSkillValue {
      get { return requiredSkillValue_; }
      set {
        requiredSkillValue_ = value;
      }
    }

    /// <summary>Field number for the "requiredCondition" field.</summary>
    public const int RequiredConditionFieldNumber = 12;
    private int requiredCondition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredCondition {
      get { return requiredCondition_; }
      set {
        requiredCondition_ = value;
      }
    }

    /// <summary>Field number for the "repObjectiveFaction" field.</summary>
    public const int RepObjectiveFactionFieldNumber = 13;
    private int repObjectiveFaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RepObjectiveFaction {
      get { return repObjectiveFaction_; }
      set {
        repObjectiveFaction_ = value;
      }
    }

    /// <summary>Field number for the "repObjectiveValue" field.</summary>
    public const int RepObjectiveValueFieldNumber = 14;
    private int repObjectiveValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RepObjectiveValue {
      get { return repObjectiveValue_; }
      set {
        repObjectiveValue_ = value;
      }
    }

    /// <summary>Field number for the "requiredMinRepFaction" field.</summary>
    public const int RequiredMinRepFactionFieldNumber = 15;
    private int requiredMinRepFaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredMinRepFaction {
      get { return requiredMinRepFaction_; }
      set {
        requiredMinRepFaction_ = value;
      }
    }

    /// <summary>Field number for the "requiredMinRepValue" field.</summary>
    public const int RequiredMinRepValueFieldNumber = 16;
    private int requiredMinRepValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredMinRepValue {
      get { return requiredMinRepValue_; }
      set {
        requiredMinRepValue_ = value;
      }
    }

    /// <summary>Field number for the "requiredMaxRepFaction" field.</summary>
    public const int RequiredMaxRepFactionFieldNumber = 17;
    private int requiredMaxRepFaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredMaxRepFaction {
      get { return requiredMaxRepFaction_; }
      set {
        requiredMaxRepFaction_ = value;
      }
    }

    /// <summary>Field number for the "requiredMaxRepValue" field.</summary>
    public const int RequiredMaxRepValueFieldNumber = 18;
    private int requiredMaxRepValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RequiredMaxRepValue {
      get { return requiredMaxRepValue_; }
      set {
        requiredMaxRepValue_ = value;
      }
    }

    /// <summary>Field number for the "suggestedPlayers" field.</summary>
    public const int SuggestedPlayersFieldNumber = 19;
    private int suggestedPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuggestedPlayers {
      get { return suggestedPlayers_; }
      set {
        suggestedPlayers_ = value;
      }
    }

    /// <summary>Field number for the "limitTime" field.</summary>
    public const int LimitTimeFieldNumber = 20;
    private int limitTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LimitTime {
      get { return limitTime_; }
      set {
        limitTime_ = value;
      }
    }

    /// <summary>Field number for the "questFlags" field.</summary>
    public const int QuestFlagsFieldNumber = 21;
    private int questFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int QuestFlags {
      get { return questFlags_; }
      set {
        questFlags_ = value;
      }
    }

    /// <summary>Field number for the "specialFlags" field.</summary>
    public const int SpecialFlagsFieldNumber = 22;
    private int specialFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpecialFlags {
      get { return specialFlags_; }
      set {
        specialFlags_ = value;
      }
    }

    /// <summary>Field number for the "prevQuestId" field.</summary>
    public const int PrevQuestIdFieldNumber = 23;
    private int prevQuestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrevQuestId {
      get { return prevQuestId_; }
      set {
        prevQuestId_ = value;
      }
    }

    /// <summary>Field number for the "nextQuestId" field.</summary>
    public const int NextQuestIdFieldNumber = 24;
    private int nextQuestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NextQuestId {
      get { return nextQuestId_; }
      set {
        nextQuestId_ = value;
      }
    }

    /// <summary>Field number for the "exclusiveGroup" field.</summary>
    public const int ExclusiveGroupFieldNumber = 25;
    private int exclusiveGroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExclusiveGroup {
      get { return exclusiveGroup_; }
      set {
        exclusiveGroup_ = value;
      }
    }

    /// <summary>Field number for the "breadcrumbForQuestId" field.</summary>
    public const int BreadcrumbForQuestIdFieldNumber = 26;
    private int breadcrumbForQuestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BreadcrumbForQuestId {
      get { return breadcrumbForQuestId_; }
      set {
        breadcrumbForQuestId_ = value;
      }
    }

    /// <summary>Field number for the "nextQuestInChain" field.</summary>
    public const int NextQuestInChainFieldNumber = 27;
    private int nextQuestInChain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NextQuestInChain {
      get { return nextQuestInChain_; }
      set {
        nextQuestInChain_ = value;
      }
    }

    /// <summary>Field number for the "srcItemId" field.</summary>
    public const int SrcItemIdFieldNumber = 28;
    private int srcItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SrcItemId {
      get { return srcItemId_; }
      set {
        srcItemId_ = value;
      }
    }

    /// <summary>Field number for the "srcItemCount" field.</summary>
    public const int SrcItemCountFieldNumber = 29;
    private int srcItemCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SrcItemCount {
      get { return srcItemCount_; }
      set {
        srcItemCount_ = value;
      }
    }

    /// <summary>Field number for the "srcSpell" field.</summary>
    public const int SrcSpellFieldNumber = 30;
    private int srcSpell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SrcSpell {
      get { return srcSpell_; }
      set {
        srcSpell_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 31;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 32;
    private string details_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Details {
      get { return details_; }
      set {
        details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "objectives" field.</summary>
    public const int ObjectivesFieldNumber = 33;
    private string objectives_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Objectives {
      get { return objectives_; }
      set {
        objectives_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offerRewardText" field.</summary>
    public const int OfferRewardTextFieldNumber = 34;
    private string offerRewardText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OfferRewardText {
      get { return offerRewardText_; }
      set {
        offerRewardText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requestItemsText" field.</summary>
    public const int RequestItemsTextFieldNumber = 35;
    private string requestItemsText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RequestItemsText {
      get { return requestItemsText_; }
      set {
        requestItemsText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endText" field.</summary>
    public const int EndTextFieldNumber = 36;
    private string endText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EndText {
      get { return endText_; }
      set {
        endText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "objectiveText1" field.</summary>
    public const int ObjectiveText1FieldNumber = 37;
    private string objectiveText1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ObjectiveText1 {
      get { return objectiveText1_; }
      set {
        objectiveText1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "objectiveText2" field.</summary>
    public const int ObjectiveText2FieldNumber = 38;
    private string objectiveText2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ObjectiveText2 {
      get { return objectiveText2_; }
      set {
        objectiveText2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "objectiveText3" field.</summary>
    public const int ObjectiveText3FieldNumber = 39;
    private string objectiveText3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ObjectiveText3 {
      get { return objectiveText3_; }
      set {
        objectiveText3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "objectiveText4" field.</summary>
    public const int ObjectiveText4FieldNumber = 40;
    private string objectiveText4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ObjectiveText4 {
      get { return objectiveText4_; }
      set {
        objectiveText4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reqItemId1" field.</summary>
    public const int ReqItemId1FieldNumber = 41;
    private int reqItemId1_;
    /// <summary>
    /// Keeping the unique identifiers and counts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqItemId1 {
      get { return reqItemId1_; }
      set {
        reqItemId1_ = value;
      }
    }

    /// <summary>Field number for the "reqItemId2" field.</summary>
    public const int ReqItemId2FieldNumber = 42;
    private int reqItemId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqItemId2 {
      get { return reqItemId2_; }
      set {
        reqItemId2_ = value;
      }
    }

    /// <summary>Field number for the "reqItemId3" field.</summary>
    public const int ReqItemId3FieldNumber = 43;
    private int reqItemId3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqItemId3 {
      get { return reqItemId3_; }
      set {
        reqItemId3_ = value;
      }
    }

    /// <summary>Field number for the "reqItemId4" field.</summary>
    public const int ReqItemId4FieldNumber = 44;
    private int reqItemId4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqItemId4 {
      get { return reqItemId4_; }
      set {
        reqItemId4_ = value;
      }
    }

    /// <summary>Field number for the "reqItemCount1" field.</summary>
    public const int ReqItemCount1FieldNumber = 45;
    private int reqItemCount1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqItemCount1 {
      get { return reqItemCount1_; }
      set {
        reqItemCount1_ = value;
      }
    }

    /// <summary>Field number for the "reqItemCount2" field.</summary>
    public const int ReqItemCount2FieldNumber = 46;
    private int reqItemCount2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqItemCount2 {
      get { return reqItemCount2_; }
      set {
        reqItemCount2_ = value;
      }
    }

    /// <summary>Field number for the "reqItemCount3" field.</summary>
    public const int ReqItemCount3FieldNumber = 47;
    private int reqItemCount3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqItemCount3 {
      get { return reqItemCount3_; }
      set {
        reqItemCount3_ = value;
      }
    }

    /// <summary>Field number for the "reqItemCount4" field.</summary>
    public const int ReqItemCount4FieldNumber = 48;
    private int reqItemCount4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqItemCount4 {
      get { return reqItemCount4_; }
      set {
        reqItemCount4_ = value;
      }
    }

    /// <summary>Field number for the "reqSourceId1" field.</summary>
    public const int ReqSourceId1FieldNumber = 49;
    private int reqSourceId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSourceId1 {
      get { return reqSourceId1_; }
      set {
        reqSourceId1_ = value;
      }
    }

    /// <summary>Field number for the "reqSourceId2" field.</summary>
    public const int ReqSourceId2FieldNumber = 50;
    private int reqSourceId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSourceId2 {
      get { return reqSourceId2_; }
      set {
        reqSourceId2_ = value;
      }
    }

    /// <summary>Field number for the "reqSourceId3" field.</summary>
    public const int ReqSourceId3FieldNumber = 51;
    private int reqSourceId3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSourceId3 {
      get { return reqSourceId3_; }
      set {
        reqSourceId3_ = value;
      }
    }

    /// <summary>Field number for the "reqSourceId4" field.</summary>
    public const int ReqSourceId4FieldNumber = 52;
    private int reqSourceId4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSourceId4 {
      get { return reqSourceId4_; }
      set {
        reqSourceId4_ = value;
      }
    }

    /// <summary>Field number for the "reqSourceCount1" field.</summary>
    public const int ReqSourceCount1FieldNumber = 53;
    private int reqSourceCount1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSourceCount1 {
      get { return reqSourceCount1_; }
      set {
        reqSourceCount1_ = value;
      }
    }

    /// <summary>Field number for the "reqSourceCount2" field.</summary>
    public const int ReqSourceCount2FieldNumber = 54;
    private int reqSourceCount2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSourceCount2 {
      get { return reqSourceCount2_; }
      set {
        reqSourceCount2_ = value;
      }
    }

    /// <summary>Field number for the "reqSourceCount3" field.</summary>
    public const int ReqSourceCount3FieldNumber = 55;
    private int reqSourceCount3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSourceCount3 {
      get { return reqSourceCount3_; }
      set {
        reqSourceCount3_ = value;
      }
    }

    /// <summary>Field number for the "reqSourceCount4" field.</summary>
    public const int ReqSourceCount4FieldNumber = 56;
    private int reqSourceCount4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSourceCount4 {
      get { return reqSourceCount4_; }
      set {
        reqSourceCount4_ = value;
      }
    }

    /// <summary>Field number for the "reqCreatureOrGOId1" field.</summary>
    public const int ReqCreatureOrGOId1FieldNumber = 57;
    private int reqCreatureOrGOId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqCreatureOrGOId1 {
      get { return reqCreatureOrGOId1_; }
      set {
        reqCreatureOrGOId1_ = value;
      }
    }

    /// <summary>Field number for the "reqCreatureOrGOId2" field.</summary>
    public const int ReqCreatureOrGOId2FieldNumber = 58;
    private int reqCreatureOrGOId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqCreatureOrGOId2 {
      get { return reqCreatureOrGOId2_; }
      set {
        reqCreatureOrGOId2_ = value;
      }
    }

    /// <summary>Field number for the "reqCreatureOrGOId3" field.</summary>
    public const int ReqCreatureOrGOId3FieldNumber = 59;
    private int reqCreatureOrGOId3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqCreatureOrGOId3 {
      get { return reqCreatureOrGOId3_; }
      set {
        reqCreatureOrGOId3_ = value;
      }
    }

    /// <summary>Field number for the "reqCreatureOrGOId4" field.</summary>
    public const int ReqCreatureOrGOId4FieldNumber = 60;
    private int reqCreatureOrGOId4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqCreatureOrGOId4 {
      get { return reqCreatureOrGOId4_; }
      set {
        reqCreatureOrGOId4_ = value;
      }
    }

    /// <summary>Field number for the "reqCreatureOrGOCount1" field.</summary>
    public const int ReqCreatureOrGOCount1FieldNumber = 61;
    private int reqCreatureOrGOCount1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqCreatureOrGOCount1 {
      get { return reqCreatureOrGOCount1_; }
      set {
        reqCreatureOrGOCount1_ = value;
      }
    }

    /// <summary>Field number for the "reqCreatureOrGOCount2" field.</summary>
    public const int ReqCreatureOrGOCount2FieldNumber = 62;
    private int reqCreatureOrGOCount2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqCreatureOrGOCount2 {
      get { return reqCreatureOrGOCount2_; }
      set {
        reqCreatureOrGOCount2_ = value;
      }
    }

    /// <summary>Field number for the "reqCreatureOrGOCount3" field.</summary>
    public const int ReqCreatureOrGOCount3FieldNumber = 63;
    private int reqCreatureOrGOCount3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqCreatureOrGOCount3 {
      get { return reqCreatureOrGOCount3_; }
      set {
        reqCreatureOrGOCount3_ = value;
      }
    }

    /// <summary>Field number for the "reqCreatureOrGOCount4" field.</summary>
    public const int ReqCreatureOrGOCount4FieldNumber = 64;
    private int reqCreatureOrGOCount4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqCreatureOrGOCount4 {
      get { return reqCreatureOrGOCount4_; }
      set {
        reqCreatureOrGOCount4_ = value;
      }
    }

    /// <summary>Field number for the "reqSpellCast1" field.</summary>
    public const int ReqSpellCast1FieldNumber = 65;
    private int reqSpellCast1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSpellCast1 {
      get { return reqSpellCast1_; }
      set {
        reqSpellCast1_ = value;
      }
    }

    /// <summary>Field number for the "reqSpellCast2" field.</summary>
    public const int ReqSpellCast2FieldNumber = 66;
    private int reqSpellCast2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSpellCast2 {
      get { return reqSpellCast2_; }
      set {
        reqSpellCast2_ = value;
      }
    }

    /// <summary>Field number for the "reqSpellCast3" field.</summary>
    public const int ReqSpellCast3FieldNumber = 67;
    private int reqSpellCast3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSpellCast3 {
      get { return reqSpellCast3_; }
      set {
        reqSpellCast3_ = value;
      }
    }

    /// <summary>Field number for the "reqSpellCast4" field.</summary>
    public const int ReqSpellCast4FieldNumber = 68;
    private int reqSpellCast4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSpellCast4 {
      get { return reqSpellCast4_; }
      set {
        reqSpellCast4_ = value;
      }
    }

    /// <summary>Field number for the "rawChoiceItemId1" field.</summary>
    public const int RawChoiceItemId1FieldNumber = 69;
    private int rawChoiceItemId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawChoiceItemId1 {
      get { return rawChoiceItemId1_; }
      set {
        rawChoiceItemId1_ = value;
      }
    }

    /// <summary>Field number for the "rawChoiceItemId2" field.</summary>
    public const int RawChoiceItemId2FieldNumber = 70;
    private int rawChoiceItemId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawChoiceItemId2 {
      get { return rawChoiceItemId2_; }
      set {
        rawChoiceItemId2_ = value;
      }
    }

    /// <summary>Field number for the "rawChoiceItemId3" field.</summary>
    public const int RawChoiceItemId3FieldNumber = 71;
    private int rawChoiceItemId3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawChoiceItemId3 {
      get { return rawChoiceItemId3_; }
      set {
        rawChoiceItemId3_ = value;
      }
    }

    /// <summary>Field number for the "rawChoiceItemId4" field.</summary>
    public const int RawChoiceItemId4FieldNumber = 72;
    private int rawChoiceItemId4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawChoiceItemId4 {
      get { return rawChoiceItemId4_; }
      set {
        rawChoiceItemId4_ = value;
      }
    }

    /// <summary>Field number for the "rawChoiceItemId5" field.</summary>
    public const int RawChoiceItemId5FieldNumber = 73;
    private int rawChoiceItemId5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawChoiceItemId5 {
      get { return rawChoiceItemId5_; }
      set {
        rawChoiceItemId5_ = value;
      }
    }

    /// <summary>Field number for the "rawChoiceItemId6" field.</summary>
    public const int RawChoiceItemId6FieldNumber = 74;
    private int rawChoiceItemId6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawChoiceItemId6 {
      get { return rawChoiceItemId6_; }
      set {
        rawChoiceItemId6_ = value;
      }
    }

    /// <summary>Field number for the "rawChoiceItemCount1" field.</summary>
    public const int RawChoiceItemCount1FieldNumber = 75;
    private int rawChoiceItemCount1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawChoiceItemCount1 {
      get { return rawChoiceItemCount1_; }
      set {
        rawChoiceItemCount1_ = value;
      }
    }

    /// <summary>Field number for the "rawChoiceItemCount2" field.</summary>
    public const int RawChoiceItemCount2FieldNumber = 76;
    private int rawChoiceItemCount2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawChoiceItemCount2 {
      get { return rawChoiceItemCount2_; }
      set {
        rawChoiceItemCount2_ = value;
      }
    }

    /// <summary>Field number for the "rawChoiceItemCount3" field.</summary>
    public const int RawChoiceItemCount3FieldNumber = 77;
    private int rawChoiceItemCount3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawChoiceItemCount3 {
      get { return rawChoiceItemCount3_; }
      set {
        rawChoiceItemCount3_ = value;
      }
    }

    /// <summary>Field number for the "rawChoiceItemCount4" field.</summary>
    public const int RawChoiceItemCount4FieldNumber = 78;
    private int rawChoiceItemCount4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawChoiceItemCount4 {
      get { return rawChoiceItemCount4_; }
      set {
        rawChoiceItemCount4_ = value;
      }
    }

    /// <summary>Field number for the "rawChoiceItemCount5" field.</summary>
    public const int RawChoiceItemCount5FieldNumber = 79;
    private int rawChoiceItemCount5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawChoiceItemCount5 {
      get { return rawChoiceItemCount5_; }
      set {
        rawChoiceItemCount5_ = value;
      }
    }

    /// <summary>Field number for the "rawChoiceItemCount6" field.</summary>
    public const int RawChoiceItemCount6FieldNumber = 80;
    private int rawChoiceItemCount6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawChoiceItemCount6 {
      get { return rawChoiceItemCount6_; }
      set {
        rawChoiceItemCount6_ = value;
      }
    }

    /// <summary>Field number for the "rawItemId1" field.</summary>
    public const int RawItemId1FieldNumber = 81;
    private int rawItemId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawItemId1 {
      get { return rawItemId1_; }
      set {
        rawItemId1_ = value;
      }
    }

    /// <summary>Field number for the "rawItemId2" field.</summary>
    public const int RawItemId2FieldNumber = 82;
    private int rawItemId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawItemId2 {
      get { return rawItemId2_; }
      set {
        rawItemId2_ = value;
      }
    }

    /// <summary>Field number for the "rawItemId3" field.</summary>
    public const int RawItemId3FieldNumber = 83;
    private int rawItemId3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawItemId3 {
      get { return rawItemId3_; }
      set {
        rawItemId3_ = value;
      }
    }

    /// <summary>Field number for the "rawItemId4" field.</summary>
    public const int RawItemId4FieldNumber = 84;
    private int rawItemId4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawItemId4 {
      get { return rawItemId4_; }
      set {
        rawItemId4_ = value;
      }
    }

    /// <summary>Field number for the "rawItemCount1" field.</summary>
    public const int RawItemCount1FieldNumber = 85;
    private int rawItemCount1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawItemCount1 {
      get { return rawItemCount1_; }
      set {
        rawItemCount1_ = value;
      }
    }

    /// <summary>Field number for the "rawItemCount2" field.</summary>
    public const int RawItemCount2FieldNumber = 86;
    private int rawItemCount2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawItemCount2 {
      get { return rawItemCount2_; }
      set {
        rawItemCount2_ = value;
      }
    }

    /// <summary>Field number for the "rawItemCount3" field.</summary>
    public const int RawItemCount3FieldNumber = 87;
    private int rawItemCount3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawItemCount3 {
      get { return rawItemCount3_; }
      set {
        rawItemCount3_ = value;
      }
    }

    /// <summary>Field number for the "rawItemCount4" field.</summary>
    public const int RawItemCount4FieldNumber = 88;
    private int rawItemCount4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawItemCount4 {
      get { return rawItemCount4_; }
      set {
        rawItemCount4_ = value;
      }
    }

    /// <summary>Field number for the "rawRepFaction1" field.</summary>
    public const int RawRepFaction1FieldNumber = 89;
    private int rawRepFaction1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawRepFaction1 {
      get { return rawRepFaction1_; }
      set {
        rawRepFaction1_ = value;
      }
    }

    /// <summary>Field number for the "rawRepFaction2" field.</summary>
    public const int RawRepFaction2FieldNumber = 90;
    private int rawRepFaction2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawRepFaction2 {
      get { return rawRepFaction2_; }
      set {
        rawRepFaction2_ = value;
      }
    }

    /// <summary>Field number for the "rawRepFaction3" field.</summary>
    public const int RawRepFaction3FieldNumber = 91;
    private int rawRepFaction3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawRepFaction3 {
      get { return rawRepFaction3_; }
      set {
        rawRepFaction3_ = value;
      }
    }

    /// <summary>Field number for the "rawRepFaction4" field.</summary>
    public const int RawRepFaction4FieldNumber = 92;
    private int rawRepFaction4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawRepFaction4 {
      get { return rawRepFaction4_; }
      set {
        rawRepFaction4_ = value;
      }
    }

    /// <summary>Field number for the "rawRepFaction5" field.</summary>
    public const int RawRepFaction5FieldNumber = 93;
    private int rawRepFaction5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawRepFaction5 {
      get { return rawRepFaction5_; }
      set {
        rawRepFaction5_ = value;
      }
    }

    /// <summary>Field number for the "rawRepValue1" field.</summary>
    public const int RawRepValue1FieldNumber = 94;
    private int rawRepValue1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawRepValue1 {
      get { return rawRepValue1_; }
      set {
        rawRepValue1_ = value;
      }
    }

    /// <summary>Field number for the "rawRepValue2" field.</summary>
    public const int RawRepValue2FieldNumber = 95;
    private int rawRepValue2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawRepValue2 {
      get { return rawRepValue2_; }
      set {
        rawRepValue2_ = value;
      }
    }

    /// <summary>Field number for the "rawRepValue3" field.</summary>
    public const int RawRepValue3FieldNumber = 96;
    private int rawRepValue3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawRepValue3 {
      get { return rawRepValue3_; }
      set {
        rawRepValue3_ = value;
      }
    }

    /// <summary>Field number for the "rawRepValue4" field.</summary>
    public const int RawRepValue4FieldNumber = 97;
    private int rawRepValue4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawRepValue4 {
      get { return rawRepValue4_; }
      set {
        rawRepValue4_ = value;
      }
    }

    /// <summary>Field number for the "rawRepValue5" field.</summary>
    public const int RawRepValue5FieldNumber = 98;
    private int rawRepValue5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawRepValue5 {
      get { return rawRepValue5_; }
      set {
        rawRepValue5_ = value;
      }
    }

    /// <summary>Field number for the "rawOrReqMoney" field.</summary>
    public const int RawOrReqMoneyFieldNumber = 99;
    private int rawOrReqMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawOrReqMoney {
      get { return rawOrReqMoney_; }
      set {
        rawOrReqMoney_ = value;
      }
    }

    /// <summary>Field number for the "rawMoneyMaxLevel" field.</summary>
    public const int RawMoneyMaxLevelFieldNumber = 100;
    private uint rawMoneyMaxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RawMoneyMaxLevel {
      get { return rawMoneyMaxLevel_; }
      set {
        rawMoneyMaxLevel_ = value;
      }
    }

    /// <summary>Field number for the "rawSpell" field.</summary>
    public const int RawSpellFieldNumber = 101;
    private int rawSpell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawSpell {
      get { return rawSpell_; }
      set {
        rawSpell_ = value;
      }
    }

    /// <summary>Field number for the "rawSpellCast" field.</summary>
    public const int RawSpellCastFieldNumber = 102;
    private int rawSpellCast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawSpellCast {
      get { return rawSpellCast_; }
      set {
        rawSpellCast_ = value;
      }
    }

    /// <summary>Field number for the "rawMailTemplateId" field.</summary>
    public const int RawMailTemplateIdFieldNumber = 103;
    private int rawMailTemplateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RawMailTemplateId {
      get { return rawMailTemplateId_; }
      set {
        rawMailTemplateId_ = value;
      }
    }

    /// <summary>Field number for the "rawMailDelaySecs" field.</summary>
    public const int RawMailDelaySecsFieldNumber = 104;
    private uint rawMailDelaySecs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RawMailDelaySecs {
      get { return rawMailDelaySecs_; }
      set {
        rawMailDelaySecs_ = value;
      }
    }

    /// <summary>Field number for the "pointMapId" field.</summary>
    public const int PointMapIdFieldNumber = 105;
    private int pointMapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PointMapId {
      get { return pointMapId_; }
      set {
        pointMapId_ = value;
      }
    }

    /// <summary>Field number for the "pointX" field.</summary>
    public const int PointXFieldNumber = 106;
    private float pointX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointX {
      get { return pointX_; }
      set {
        pointX_ = value;
      }
    }

    /// <summary>Field number for the "pointY" field.</summary>
    public const int PointYFieldNumber = 107;
    private float pointY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointY {
      get { return pointY_; }
      set {
        pointY_ = value;
      }
    }

    /// <summary>Field number for the "pointOpt" field.</summary>
    public const int PointOptFieldNumber = 108;
    private uint pointOpt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PointOpt {
      get { return pointOpt_; }
      set {
        pointOpt_ = value;
      }
    }

    /// <summary>Field number for the "detailsEmote1" field.</summary>
    public const int DetailsEmote1FieldNumber = 109;
    private int detailsEmote1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DetailsEmote1 {
      get { return detailsEmote1_; }
      set {
        detailsEmote1_ = value;
      }
    }

    /// <summary>Field number for the "detailsEmote2" field.</summary>
    public const int DetailsEmote2FieldNumber = 110;
    private int detailsEmote2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DetailsEmote2 {
      get { return detailsEmote2_; }
      set {
        detailsEmote2_ = value;
      }
    }

    /// <summary>Field number for the "detailsEmote3" field.</summary>
    public const int DetailsEmote3FieldNumber = 111;
    private int detailsEmote3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DetailsEmote3 {
      get { return detailsEmote3_; }
      set {
        detailsEmote3_ = value;
      }
    }

    /// <summary>Field number for the "detailsEmote4" field.</summary>
    public const int DetailsEmote4FieldNumber = 112;
    private int detailsEmote4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DetailsEmote4 {
      get { return detailsEmote4_; }
      set {
        detailsEmote4_ = value;
      }
    }

    /// <summary>Field number for the "detailsEmoteDelay1" field.</summary>
    public const int DetailsEmoteDelay1FieldNumber = 113;
    private int detailsEmoteDelay1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DetailsEmoteDelay1 {
      get { return detailsEmoteDelay1_; }
      set {
        detailsEmoteDelay1_ = value;
      }
    }

    /// <summary>Field number for the "detailsEmoteDelay2" field.</summary>
    public const int DetailsEmoteDelay2FieldNumber = 114;
    private int detailsEmoteDelay2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DetailsEmoteDelay2 {
      get { return detailsEmoteDelay2_; }
      set {
        detailsEmoteDelay2_ = value;
      }
    }

    /// <summary>Field number for the "detailsEmoteDelay3" field.</summary>
    public const int DetailsEmoteDelay3FieldNumber = 115;
    private int detailsEmoteDelay3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DetailsEmoteDelay3 {
      get { return detailsEmoteDelay3_; }
      set {
        detailsEmoteDelay3_ = value;
      }
    }

    /// <summary>Field number for the "detailsEmoteDelay4" field.</summary>
    public const int DetailsEmoteDelay4FieldNumber = 116;
    private int detailsEmoteDelay4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DetailsEmoteDelay4 {
      get { return detailsEmoteDelay4_; }
      set {
        detailsEmoteDelay4_ = value;
      }
    }

    /// <summary>Field number for the "incompleteEmote" field.</summary>
    public const int IncompleteEmoteFieldNumber = 117;
    private int incompleteEmote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IncompleteEmote {
      get { return incompleteEmote_; }
      set {
        incompleteEmote_ = value;
      }
    }

    /// <summary>Field number for the "incompleteEmoteDelay" field.</summary>
    public const int IncompleteEmoteDelayFieldNumber = 118;
    private int incompleteEmoteDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IncompleteEmoteDelay {
      get { return incompleteEmoteDelay_; }
      set {
        incompleteEmoteDelay_ = value;
      }
    }

    /// <summary>Field number for the "completeEmote" field.</summary>
    public const int CompleteEmoteFieldNumber = 119;
    private int completeEmote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CompleteEmote {
      get { return completeEmote_; }
      set {
        completeEmote_ = value;
      }
    }

    /// <summary>Field number for the "completeEmoteDelay" field.</summary>
    public const int CompleteEmoteDelayFieldNumber = 120;
    private int completeEmoteDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CompleteEmoteDelay {
      get { return completeEmoteDelay_; }
      set {
        completeEmoteDelay_ = value;
      }
    }

    /// <summary>Field number for the "offerRewardEmote1" field.</summary>
    public const int OfferRewardEmote1FieldNumber = 121;
    private int offerRewardEmote1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OfferRewardEmote1 {
      get { return offerRewardEmote1_; }
      set {
        offerRewardEmote1_ = value;
      }
    }

    /// <summary>Field number for the "offerRewardEmote2" field.</summary>
    public const int OfferRewardEmote2FieldNumber = 122;
    private int offerRewardEmote2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OfferRewardEmote2 {
      get { return offerRewardEmote2_; }
      set {
        offerRewardEmote2_ = value;
      }
    }

    /// <summary>Field number for the "offerRewardEmote3" field.</summary>
    public const int OfferRewardEmote3FieldNumber = 123;
    private int offerRewardEmote3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OfferRewardEmote3 {
      get { return offerRewardEmote3_; }
      set {
        offerRewardEmote3_ = value;
      }
    }

    /// <summary>Field number for the "offerRewardEmote4" field.</summary>
    public const int OfferRewardEmote4FieldNumber = 124;
    private int offerRewardEmote4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OfferRewardEmote4 {
      get { return offerRewardEmote4_; }
      set {
        offerRewardEmote4_ = value;
      }
    }

    /// <summary>Field number for the "offerRewardEmoteDelay1" field.</summary>
    public const int OfferRewardEmoteDelay1FieldNumber = 125;
    private int offerRewardEmoteDelay1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OfferRewardEmoteDelay1 {
      get { return offerRewardEmoteDelay1_; }
      set {
        offerRewardEmoteDelay1_ = value;
      }
    }

    /// <summary>Field number for the "offerRewardEmoteDelay2" field.</summary>
    public const int OfferRewardEmoteDelay2FieldNumber = 126;
    private int offerRewardEmoteDelay2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OfferRewardEmoteDelay2 {
      get { return offerRewardEmoteDelay2_; }
      set {
        offerRewardEmoteDelay2_ = value;
      }
    }

    /// <summary>Field number for the "offerRewardEmoteDelay3" field.</summary>
    public const int OfferRewardEmoteDelay3FieldNumber = 127;
    private int offerRewardEmoteDelay3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OfferRewardEmoteDelay3 {
      get { return offerRewardEmoteDelay3_; }
      set {
        offerRewardEmoteDelay3_ = value;
      }
    }

    /// <summary>Field number for the "offerRewardEmoteDelay4" field.</summary>
    public const int OfferRewardEmoteDelay4FieldNumber = 128;
    private int offerRewardEmoteDelay4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OfferRewardEmoteDelay4 {
      get { return offerRewardEmoteDelay4_; }
      set {
        offerRewardEmoteDelay4_ = value;
      }
    }

    /// <summary>Field number for the "startScript" field.</summary>
    public const int StartScriptFieldNumber = 129;
    private int startScript_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StartScript {
      get { return startScript_; }
      set {
        startScript_ = value;
      }
    }

    /// <summary>Field number for the "completeScript" field.</summary>
    public const int CompleteScriptFieldNumber = 130;
    private int completeScript_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CompleteScript {
      get { return completeScript_; }
      set {
        completeScript_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as QuestTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(QuestTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entry != other.Entry) return false;
      if (Method != other.Method) return false;
      if (ZoneOrSort != other.ZoneOrSort) return false;
      if (MinLevel != other.MinLevel) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if (QuestLevel != other.QuestLevel) return false;
      if (Type != other.Type) return false;
      if (RequiredClasses != other.RequiredClasses) return false;
      if (RequiredRaces != other.RequiredRaces) return false;
      if (RequiredSkill != other.RequiredSkill) return false;
      if (RequiredSkillValue != other.RequiredSkillValue) return false;
      if (RequiredCondition != other.RequiredCondition) return false;
      if (RepObjectiveFaction != other.RepObjectiveFaction) return false;
      if (RepObjectiveValue != other.RepObjectiveValue) return false;
      if (RequiredMinRepFaction != other.RequiredMinRepFaction) return false;
      if (RequiredMinRepValue != other.RequiredMinRepValue) return false;
      if (RequiredMaxRepFaction != other.RequiredMaxRepFaction) return false;
      if (RequiredMaxRepValue != other.RequiredMaxRepValue) return false;
      if (SuggestedPlayers != other.SuggestedPlayers) return false;
      if (LimitTime != other.LimitTime) return false;
      if (QuestFlags != other.QuestFlags) return false;
      if (SpecialFlags != other.SpecialFlags) return false;
      if (PrevQuestId != other.PrevQuestId) return false;
      if (NextQuestId != other.NextQuestId) return false;
      if (ExclusiveGroup != other.ExclusiveGroup) return false;
      if (BreadcrumbForQuestId != other.BreadcrumbForQuestId) return false;
      if (NextQuestInChain != other.NextQuestInChain) return false;
      if (SrcItemId != other.SrcItemId) return false;
      if (SrcItemCount != other.SrcItemCount) return false;
      if (SrcSpell != other.SrcSpell) return false;
      if (Title != other.Title) return false;
      if (Details != other.Details) return false;
      if (Objectives != other.Objectives) return false;
      if (OfferRewardText != other.OfferRewardText) return false;
      if (RequestItemsText != other.RequestItemsText) return false;
      if (EndText != other.EndText) return false;
      if (ObjectiveText1 != other.ObjectiveText1) return false;
      if (ObjectiveText2 != other.ObjectiveText2) return false;
      if (ObjectiveText3 != other.ObjectiveText3) return false;
      if (ObjectiveText4 != other.ObjectiveText4) return false;
      if (ReqItemId1 != other.ReqItemId1) return false;
      if (ReqItemId2 != other.ReqItemId2) return false;
      if (ReqItemId3 != other.ReqItemId3) return false;
      if (ReqItemId4 != other.ReqItemId4) return false;
      if (ReqItemCount1 != other.ReqItemCount1) return false;
      if (ReqItemCount2 != other.ReqItemCount2) return false;
      if (ReqItemCount3 != other.ReqItemCount3) return false;
      if (ReqItemCount4 != other.ReqItemCount4) return false;
      if (ReqSourceId1 != other.ReqSourceId1) return false;
      if (ReqSourceId2 != other.ReqSourceId2) return false;
      if (ReqSourceId3 != other.ReqSourceId3) return false;
      if (ReqSourceId4 != other.ReqSourceId4) return false;
      if (ReqSourceCount1 != other.ReqSourceCount1) return false;
      if (ReqSourceCount2 != other.ReqSourceCount2) return false;
      if (ReqSourceCount3 != other.ReqSourceCount3) return false;
      if (ReqSourceCount4 != other.ReqSourceCount4) return false;
      if (ReqCreatureOrGOId1 != other.ReqCreatureOrGOId1) return false;
      if (ReqCreatureOrGOId2 != other.ReqCreatureOrGOId2) return false;
      if (ReqCreatureOrGOId3 != other.ReqCreatureOrGOId3) return false;
      if (ReqCreatureOrGOId4 != other.ReqCreatureOrGOId4) return false;
      if (ReqCreatureOrGOCount1 != other.ReqCreatureOrGOCount1) return false;
      if (ReqCreatureOrGOCount2 != other.ReqCreatureOrGOCount2) return false;
      if (ReqCreatureOrGOCount3 != other.ReqCreatureOrGOCount3) return false;
      if (ReqCreatureOrGOCount4 != other.ReqCreatureOrGOCount4) return false;
      if (ReqSpellCast1 != other.ReqSpellCast1) return false;
      if (ReqSpellCast2 != other.ReqSpellCast2) return false;
      if (ReqSpellCast3 != other.ReqSpellCast3) return false;
      if (ReqSpellCast4 != other.ReqSpellCast4) return false;
      if (RawChoiceItemId1 != other.RawChoiceItemId1) return false;
      if (RawChoiceItemId2 != other.RawChoiceItemId2) return false;
      if (RawChoiceItemId3 != other.RawChoiceItemId3) return false;
      if (RawChoiceItemId4 != other.RawChoiceItemId4) return false;
      if (RawChoiceItemId5 != other.RawChoiceItemId5) return false;
      if (RawChoiceItemId6 != other.RawChoiceItemId6) return false;
      if (RawChoiceItemCount1 != other.RawChoiceItemCount1) return false;
      if (RawChoiceItemCount2 != other.RawChoiceItemCount2) return false;
      if (RawChoiceItemCount3 != other.RawChoiceItemCount3) return false;
      if (RawChoiceItemCount4 != other.RawChoiceItemCount4) return false;
      if (RawChoiceItemCount5 != other.RawChoiceItemCount5) return false;
      if (RawChoiceItemCount6 != other.RawChoiceItemCount6) return false;
      if (RawItemId1 != other.RawItemId1) return false;
      if (RawItemId2 != other.RawItemId2) return false;
      if (RawItemId3 != other.RawItemId3) return false;
      if (RawItemId4 != other.RawItemId4) return false;
      if (RawItemCount1 != other.RawItemCount1) return false;
      if (RawItemCount2 != other.RawItemCount2) return false;
      if (RawItemCount3 != other.RawItemCount3) return false;
      if (RawItemCount4 != other.RawItemCount4) return false;
      if (RawRepFaction1 != other.RawRepFaction1) return false;
      if (RawRepFaction2 != other.RawRepFaction2) return false;
      if (RawRepFaction3 != other.RawRepFaction3) return false;
      if (RawRepFaction4 != other.RawRepFaction4) return false;
      if (RawRepFaction5 != other.RawRepFaction5) return false;
      if (RawRepValue1 != other.RawRepValue1) return false;
      if (RawRepValue2 != other.RawRepValue2) return false;
      if (RawRepValue3 != other.RawRepValue3) return false;
      if (RawRepValue4 != other.RawRepValue4) return false;
      if (RawRepValue5 != other.RawRepValue5) return false;
      if (RawOrReqMoney != other.RawOrReqMoney) return false;
      if (RawMoneyMaxLevel != other.RawMoneyMaxLevel) return false;
      if (RawSpell != other.RawSpell) return false;
      if (RawSpellCast != other.RawSpellCast) return false;
      if (RawMailTemplateId != other.RawMailTemplateId) return false;
      if (RawMailDelaySecs != other.RawMailDelaySecs) return false;
      if (PointMapId != other.PointMapId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointX, other.PointX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointY, other.PointY)) return false;
      if (PointOpt != other.PointOpt) return false;
      if (DetailsEmote1 != other.DetailsEmote1) return false;
      if (DetailsEmote2 != other.DetailsEmote2) return false;
      if (DetailsEmote3 != other.DetailsEmote3) return false;
      if (DetailsEmote4 != other.DetailsEmote4) return false;
      if (DetailsEmoteDelay1 != other.DetailsEmoteDelay1) return false;
      if (DetailsEmoteDelay2 != other.DetailsEmoteDelay2) return false;
      if (DetailsEmoteDelay3 != other.DetailsEmoteDelay3) return false;
      if (DetailsEmoteDelay4 != other.DetailsEmoteDelay4) return false;
      if (IncompleteEmote != other.IncompleteEmote) return false;
      if (IncompleteEmoteDelay != other.IncompleteEmoteDelay) return false;
      if (CompleteEmote != other.CompleteEmote) return false;
      if (CompleteEmoteDelay != other.CompleteEmoteDelay) return false;
      if (OfferRewardEmote1 != other.OfferRewardEmote1) return false;
      if (OfferRewardEmote2 != other.OfferRewardEmote2) return false;
      if (OfferRewardEmote3 != other.OfferRewardEmote3) return false;
      if (OfferRewardEmote4 != other.OfferRewardEmote4) return false;
      if (OfferRewardEmoteDelay1 != other.OfferRewardEmoteDelay1) return false;
      if (OfferRewardEmoteDelay2 != other.OfferRewardEmoteDelay2) return false;
      if (OfferRewardEmoteDelay3 != other.OfferRewardEmoteDelay3) return false;
      if (OfferRewardEmoteDelay4 != other.OfferRewardEmoteDelay4) return false;
      if (StartScript != other.StartScript) return false;
      if (CompleteScript != other.CompleteScript) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Entry != 0) hash ^= Entry.GetHashCode();
      if (Method != 0) hash ^= Method.GetHashCode();
      if (ZoneOrSort != 0) hash ^= ZoneOrSort.GetHashCode();
      if (MinLevel != 0) hash ^= MinLevel.GetHashCode();
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      if (QuestLevel != 0) hash ^= QuestLevel.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (RequiredClasses != 0) hash ^= RequiredClasses.GetHashCode();
      if (RequiredRaces != 0) hash ^= RequiredRaces.GetHashCode();
      if (RequiredSkill != 0) hash ^= RequiredSkill.GetHashCode();
      if (RequiredSkillValue != 0) hash ^= RequiredSkillValue.GetHashCode();
      if (RequiredCondition != 0) hash ^= RequiredCondition.GetHashCode();
      if (RepObjectiveFaction != 0) hash ^= RepObjectiveFaction.GetHashCode();
      if (RepObjectiveValue != 0) hash ^= RepObjectiveValue.GetHashCode();
      if (RequiredMinRepFaction != 0) hash ^= RequiredMinRepFaction.GetHashCode();
      if (RequiredMinRepValue != 0) hash ^= RequiredMinRepValue.GetHashCode();
      if (RequiredMaxRepFaction != 0) hash ^= RequiredMaxRepFaction.GetHashCode();
      if (RequiredMaxRepValue != 0) hash ^= RequiredMaxRepValue.GetHashCode();
      if (SuggestedPlayers != 0) hash ^= SuggestedPlayers.GetHashCode();
      if (LimitTime != 0) hash ^= LimitTime.GetHashCode();
      if (QuestFlags != 0) hash ^= QuestFlags.GetHashCode();
      if (SpecialFlags != 0) hash ^= SpecialFlags.GetHashCode();
      if (PrevQuestId != 0) hash ^= PrevQuestId.GetHashCode();
      if (NextQuestId != 0) hash ^= NextQuestId.GetHashCode();
      if (ExclusiveGroup != 0) hash ^= ExclusiveGroup.GetHashCode();
      if (BreadcrumbForQuestId != 0) hash ^= BreadcrumbForQuestId.GetHashCode();
      if (NextQuestInChain != 0) hash ^= NextQuestInChain.GetHashCode();
      if (SrcItemId != 0) hash ^= SrcItemId.GetHashCode();
      if (SrcItemCount != 0) hash ^= SrcItemCount.GetHashCode();
      if (SrcSpell != 0) hash ^= SrcSpell.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Details.Length != 0) hash ^= Details.GetHashCode();
      if (Objectives.Length != 0) hash ^= Objectives.GetHashCode();
      if (OfferRewardText.Length != 0) hash ^= OfferRewardText.GetHashCode();
      if (RequestItemsText.Length != 0) hash ^= RequestItemsText.GetHashCode();
      if (EndText.Length != 0) hash ^= EndText.GetHashCode();
      if (ObjectiveText1.Length != 0) hash ^= ObjectiveText1.GetHashCode();
      if (ObjectiveText2.Length != 0) hash ^= ObjectiveText2.GetHashCode();
      if (ObjectiveText3.Length != 0) hash ^= ObjectiveText3.GetHashCode();
      if (ObjectiveText4.Length != 0) hash ^= ObjectiveText4.GetHashCode();
      if (ReqItemId1 != 0) hash ^= ReqItemId1.GetHashCode();
      if (ReqItemId2 != 0) hash ^= ReqItemId2.GetHashCode();
      if (ReqItemId3 != 0) hash ^= ReqItemId3.GetHashCode();
      if (ReqItemId4 != 0) hash ^= ReqItemId4.GetHashCode();
      if (ReqItemCount1 != 0) hash ^= ReqItemCount1.GetHashCode();
      if (ReqItemCount2 != 0) hash ^= ReqItemCount2.GetHashCode();
      if (ReqItemCount3 != 0) hash ^= ReqItemCount3.GetHashCode();
      if (ReqItemCount4 != 0) hash ^= ReqItemCount4.GetHashCode();
      if (ReqSourceId1 != 0) hash ^= ReqSourceId1.GetHashCode();
      if (ReqSourceId2 != 0) hash ^= ReqSourceId2.GetHashCode();
      if (ReqSourceId3 != 0) hash ^= ReqSourceId3.GetHashCode();
      if (ReqSourceId4 != 0) hash ^= ReqSourceId4.GetHashCode();
      if (ReqSourceCount1 != 0) hash ^= ReqSourceCount1.GetHashCode();
      if (ReqSourceCount2 != 0) hash ^= ReqSourceCount2.GetHashCode();
      if (ReqSourceCount3 != 0) hash ^= ReqSourceCount3.GetHashCode();
      if (ReqSourceCount4 != 0) hash ^= ReqSourceCount4.GetHashCode();
      if (ReqCreatureOrGOId1 != 0) hash ^= ReqCreatureOrGOId1.GetHashCode();
      if (ReqCreatureOrGOId2 != 0) hash ^= ReqCreatureOrGOId2.GetHashCode();
      if (ReqCreatureOrGOId3 != 0) hash ^= ReqCreatureOrGOId3.GetHashCode();
      if (ReqCreatureOrGOId4 != 0) hash ^= ReqCreatureOrGOId4.GetHashCode();
      if (ReqCreatureOrGOCount1 != 0) hash ^= ReqCreatureOrGOCount1.GetHashCode();
      if (ReqCreatureOrGOCount2 != 0) hash ^= ReqCreatureOrGOCount2.GetHashCode();
      if (ReqCreatureOrGOCount3 != 0) hash ^= ReqCreatureOrGOCount3.GetHashCode();
      if (ReqCreatureOrGOCount4 != 0) hash ^= ReqCreatureOrGOCount4.GetHashCode();
      if (ReqSpellCast1 != 0) hash ^= ReqSpellCast1.GetHashCode();
      if (ReqSpellCast2 != 0) hash ^= ReqSpellCast2.GetHashCode();
      if (ReqSpellCast3 != 0) hash ^= ReqSpellCast3.GetHashCode();
      if (ReqSpellCast4 != 0) hash ^= ReqSpellCast4.GetHashCode();
      if (RawChoiceItemId1 != 0) hash ^= RawChoiceItemId1.GetHashCode();
      if (RawChoiceItemId2 != 0) hash ^= RawChoiceItemId2.GetHashCode();
      if (RawChoiceItemId3 != 0) hash ^= RawChoiceItemId3.GetHashCode();
      if (RawChoiceItemId4 != 0) hash ^= RawChoiceItemId4.GetHashCode();
      if (RawChoiceItemId5 != 0) hash ^= RawChoiceItemId5.GetHashCode();
      if (RawChoiceItemId6 != 0) hash ^= RawChoiceItemId6.GetHashCode();
      if (RawChoiceItemCount1 != 0) hash ^= RawChoiceItemCount1.GetHashCode();
      if (RawChoiceItemCount2 != 0) hash ^= RawChoiceItemCount2.GetHashCode();
      if (RawChoiceItemCount3 != 0) hash ^= RawChoiceItemCount3.GetHashCode();
      if (RawChoiceItemCount4 != 0) hash ^= RawChoiceItemCount4.GetHashCode();
      if (RawChoiceItemCount5 != 0) hash ^= RawChoiceItemCount5.GetHashCode();
      if (RawChoiceItemCount6 != 0) hash ^= RawChoiceItemCount6.GetHashCode();
      if (RawItemId1 != 0) hash ^= RawItemId1.GetHashCode();
      if (RawItemId2 != 0) hash ^= RawItemId2.GetHashCode();
      if (RawItemId3 != 0) hash ^= RawItemId3.GetHashCode();
      if (RawItemId4 != 0) hash ^= RawItemId4.GetHashCode();
      if (RawItemCount1 != 0) hash ^= RawItemCount1.GetHashCode();
      if (RawItemCount2 != 0) hash ^= RawItemCount2.GetHashCode();
      if (RawItemCount3 != 0) hash ^= RawItemCount3.GetHashCode();
      if (RawItemCount4 != 0) hash ^= RawItemCount4.GetHashCode();
      if (RawRepFaction1 != 0) hash ^= RawRepFaction1.GetHashCode();
      if (RawRepFaction2 != 0) hash ^= RawRepFaction2.GetHashCode();
      if (RawRepFaction3 != 0) hash ^= RawRepFaction3.GetHashCode();
      if (RawRepFaction4 != 0) hash ^= RawRepFaction4.GetHashCode();
      if (RawRepFaction5 != 0) hash ^= RawRepFaction5.GetHashCode();
      if (RawRepValue1 != 0) hash ^= RawRepValue1.GetHashCode();
      if (RawRepValue2 != 0) hash ^= RawRepValue2.GetHashCode();
      if (RawRepValue3 != 0) hash ^= RawRepValue3.GetHashCode();
      if (RawRepValue4 != 0) hash ^= RawRepValue4.GetHashCode();
      if (RawRepValue5 != 0) hash ^= RawRepValue5.GetHashCode();
      if (RawOrReqMoney != 0) hash ^= RawOrReqMoney.GetHashCode();
      if (RawMoneyMaxLevel != 0) hash ^= RawMoneyMaxLevel.GetHashCode();
      if (RawSpell != 0) hash ^= RawSpell.GetHashCode();
      if (RawSpellCast != 0) hash ^= RawSpellCast.GetHashCode();
      if (RawMailTemplateId != 0) hash ^= RawMailTemplateId.GetHashCode();
      if (RawMailDelaySecs != 0) hash ^= RawMailDelaySecs.GetHashCode();
      if (PointMapId != 0) hash ^= PointMapId.GetHashCode();
      if (PointX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointX);
      if (PointY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointY);
      if (PointOpt != 0) hash ^= PointOpt.GetHashCode();
      if (DetailsEmote1 != 0) hash ^= DetailsEmote1.GetHashCode();
      if (DetailsEmote2 != 0) hash ^= DetailsEmote2.GetHashCode();
      if (DetailsEmote3 != 0) hash ^= DetailsEmote3.GetHashCode();
      if (DetailsEmote4 != 0) hash ^= DetailsEmote4.GetHashCode();
      if (DetailsEmoteDelay1 != 0) hash ^= DetailsEmoteDelay1.GetHashCode();
      if (DetailsEmoteDelay2 != 0) hash ^= DetailsEmoteDelay2.GetHashCode();
      if (DetailsEmoteDelay3 != 0) hash ^= DetailsEmoteDelay3.GetHashCode();
      if (DetailsEmoteDelay4 != 0) hash ^= DetailsEmoteDelay4.GetHashCode();
      if (IncompleteEmote != 0) hash ^= IncompleteEmote.GetHashCode();
      if (IncompleteEmoteDelay != 0) hash ^= IncompleteEmoteDelay.GetHashCode();
      if (CompleteEmote != 0) hash ^= CompleteEmote.GetHashCode();
      if (CompleteEmoteDelay != 0) hash ^= CompleteEmoteDelay.GetHashCode();
      if (OfferRewardEmote1 != 0) hash ^= OfferRewardEmote1.GetHashCode();
      if (OfferRewardEmote2 != 0) hash ^= OfferRewardEmote2.GetHashCode();
      if (OfferRewardEmote3 != 0) hash ^= OfferRewardEmote3.GetHashCode();
      if (OfferRewardEmote4 != 0) hash ^= OfferRewardEmote4.GetHashCode();
      if (OfferRewardEmoteDelay1 != 0) hash ^= OfferRewardEmoteDelay1.GetHashCode();
      if (OfferRewardEmoteDelay2 != 0) hash ^= OfferRewardEmoteDelay2.GetHashCode();
      if (OfferRewardEmoteDelay3 != 0) hash ^= OfferRewardEmoteDelay3.GetHashCode();
      if (OfferRewardEmoteDelay4 != 0) hash ^= OfferRewardEmoteDelay4.GetHashCode();
      if (StartScript != 0) hash ^= StartScript.GetHashCode();
      if (CompleteScript != 0) hash ^= CompleteScript.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Entry != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entry);
      }
      if (Method != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Method);
      }
      if (ZoneOrSort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ZoneOrSort);
      }
      if (MinLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MinLevel);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxLevel);
      }
      if (QuestLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(QuestLevel);
      }
      if (Type != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Type);
      }
      if (RequiredClasses != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RequiredClasses);
      }
      if (RequiredRaces != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RequiredRaces);
      }
      if (RequiredSkill != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RequiredSkill);
      }
      if (RequiredSkillValue != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RequiredSkillValue);
      }
      if (RequiredCondition != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RequiredCondition);
      }
      if (RepObjectiveFaction != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RepObjectiveFaction);
      }
      if (RepObjectiveValue != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RepObjectiveValue);
      }
      if (RequiredMinRepFaction != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(RequiredMinRepFaction);
      }
      if (RequiredMinRepValue != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(RequiredMinRepValue);
      }
      if (RequiredMaxRepFaction != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RequiredMaxRepFaction);
      }
      if (RequiredMaxRepValue != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(RequiredMaxRepValue);
      }
      if (SuggestedPlayers != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(SuggestedPlayers);
      }
      if (LimitTime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(LimitTime);
      }
      if (QuestFlags != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(QuestFlags);
      }
      if (SpecialFlags != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(SpecialFlags);
      }
      if (PrevQuestId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(PrevQuestId);
      }
      if (NextQuestId != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(NextQuestId);
      }
      if (ExclusiveGroup != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(ExclusiveGroup);
      }
      if (BreadcrumbForQuestId != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(BreadcrumbForQuestId);
      }
      if (NextQuestInChain != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(NextQuestInChain);
      }
      if (SrcItemId != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(SrcItemId);
      }
      if (SrcItemCount != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(SrcItemCount);
      }
      if (SrcSpell != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(SrcSpell);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Title);
      }
      if (Details.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(Details);
      }
      if (Objectives.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Objectives);
      }
      if (OfferRewardText.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(OfferRewardText);
      }
      if (RequestItemsText.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(RequestItemsText);
      }
      if (EndText.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(EndText);
      }
      if (ObjectiveText1.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(ObjectiveText1);
      }
      if (ObjectiveText2.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(ObjectiveText2);
      }
      if (ObjectiveText3.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(ObjectiveText3);
      }
      if (ObjectiveText4.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(ObjectiveText4);
      }
      if (ReqItemId1 != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(ReqItemId1);
      }
      if (ReqItemId2 != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(ReqItemId2);
      }
      if (ReqItemId3 != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(ReqItemId3);
      }
      if (ReqItemId4 != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(ReqItemId4);
      }
      if (ReqItemCount1 != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(ReqItemCount1);
      }
      if (ReqItemCount2 != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(ReqItemCount2);
      }
      if (ReqItemCount3 != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(ReqItemCount3);
      }
      if (ReqItemCount4 != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(ReqItemCount4);
      }
      if (ReqSourceId1 != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(ReqSourceId1);
      }
      if (ReqSourceId2 != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(ReqSourceId2);
      }
      if (ReqSourceId3 != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(ReqSourceId3);
      }
      if (ReqSourceId4 != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(ReqSourceId4);
      }
      if (ReqSourceCount1 != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(ReqSourceCount1);
      }
      if (ReqSourceCount2 != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(ReqSourceCount2);
      }
      if (ReqSourceCount3 != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(ReqSourceCount3);
      }
      if (ReqSourceCount4 != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(ReqSourceCount4);
      }
      if (ReqCreatureOrGOId1 != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(ReqCreatureOrGOId1);
      }
      if (ReqCreatureOrGOId2 != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(ReqCreatureOrGOId2);
      }
      if (ReqCreatureOrGOId3 != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(ReqCreatureOrGOId3);
      }
      if (ReqCreatureOrGOId4 != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(ReqCreatureOrGOId4);
      }
      if (ReqCreatureOrGOCount1 != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(ReqCreatureOrGOCount1);
      }
      if (ReqCreatureOrGOCount2 != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(ReqCreatureOrGOCount2);
      }
      if (ReqCreatureOrGOCount3 != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(ReqCreatureOrGOCount3);
      }
      if (ReqCreatureOrGOCount4 != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(ReqCreatureOrGOCount4);
      }
      if (ReqSpellCast1 != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(ReqSpellCast1);
      }
      if (ReqSpellCast2 != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(ReqSpellCast2);
      }
      if (ReqSpellCast3 != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(ReqSpellCast3);
      }
      if (ReqSpellCast4 != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(ReqSpellCast4);
      }
      if (RawChoiceItemId1 != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(RawChoiceItemId1);
      }
      if (RawChoiceItemId2 != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(RawChoiceItemId2);
      }
      if (RawChoiceItemId3 != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(RawChoiceItemId3);
      }
      if (RawChoiceItemId4 != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(RawChoiceItemId4);
      }
      if (RawChoiceItemId5 != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(RawChoiceItemId5);
      }
      if (RawChoiceItemId6 != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(RawChoiceItemId6);
      }
      if (RawChoiceItemCount1 != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(RawChoiceItemCount1);
      }
      if (RawChoiceItemCount2 != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(RawChoiceItemCount2);
      }
      if (RawChoiceItemCount3 != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(RawChoiceItemCount3);
      }
      if (RawChoiceItemCount4 != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(RawChoiceItemCount4);
      }
      if (RawChoiceItemCount5 != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(RawChoiceItemCount5);
      }
      if (RawChoiceItemCount6 != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(RawChoiceItemCount6);
      }
      if (RawItemId1 != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(RawItemId1);
      }
      if (RawItemId2 != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(RawItemId2);
      }
      if (RawItemId3 != 0) {
        output.WriteRawTag(152, 5);
        output.WriteInt32(RawItemId3);
      }
      if (RawItemId4 != 0) {
        output.WriteRawTag(160, 5);
        output.WriteInt32(RawItemId4);
      }
      if (RawItemCount1 != 0) {
        output.WriteRawTag(168, 5);
        output.WriteInt32(RawItemCount1);
      }
      if (RawItemCount2 != 0) {
        output.WriteRawTag(176, 5);
        output.WriteInt32(RawItemCount2);
      }
      if (RawItemCount3 != 0) {
        output.WriteRawTag(184, 5);
        output.WriteInt32(RawItemCount3);
      }
      if (RawItemCount4 != 0) {
        output.WriteRawTag(192, 5);
        output.WriteInt32(RawItemCount4);
      }
      if (RawRepFaction1 != 0) {
        output.WriteRawTag(200, 5);
        output.WriteInt32(RawRepFaction1);
      }
      if (RawRepFaction2 != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RawRepFaction2);
      }
      if (RawRepFaction3 != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(RawRepFaction3);
      }
      if (RawRepFaction4 != 0) {
        output.WriteRawTag(224, 5);
        output.WriteInt32(RawRepFaction4);
      }
      if (RawRepFaction5 != 0) {
        output.WriteRawTag(232, 5);
        output.WriteInt32(RawRepFaction5);
      }
      if (RawRepValue1 != 0) {
        output.WriteRawTag(240, 5);
        output.WriteInt32(RawRepValue1);
      }
      if (RawRepValue2 != 0) {
        output.WriteRawTag(248, 5);
        output.WriteInt32(RawRepValue2);
      }
      if (RawRepValue3 != 0) {
        output.WriteRawTag(128, 6);
        output.WriteInt32(RawRepValue3);
      }
      if (RawRepValue4 != 0) {
        output.WriteRawTag(136, 6);
        output.WriteInt32(RawRepValue4);
      }
      if (RawRepValue5 != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(RawRepValue5);
      }
      if (RawOrReqMoney != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RawOrReqMoney);
      }
      if (RawMoneyMaxLevel != 0) {
        output.WriteRawTag(160, 6);
        output.WriteUInt32(RawMoneyMaxLevel);
      }
      if (RawSpell != 0) {
        output.WriteRawTag(168, 6);
        output.WriteInt32(RawSpell);
      }
      if (RawSpellCast != 0) {
        output.WriteRawTag(176, 6);
        output.WriteInt32(RawSpellCast);
      }
      if (RawMailTemplateId != 0) {
        output.WriteRawTag(184, 6);
        output.WriteInt32(RawMailTemplateId);
      }
      if (RawMailDelaySecs != 0) {
        output.WriteRawTag(192, 6);
        output.WriteUInt32(RawMailDelaySecs);
      }
      if (PointMapId != 0) {
        output.WriteRawTag(200, 6);
        output.WriteInt32(PointMapId);
      }
      if (PointX != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(PointX);
      }
      if (PointY != 0F) {
        output.WriteRawTag(221, 6);
        output.WriteFloat(PointY);
      }
      if (PointOpt != 0) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(PointOpt);
      }
      if (DetailsEmote1 != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(DetailsEmote1);
      }
      if (DetailsEmote2 != 0) {
        output.WriteRawTag(240, 6);
        output.WriteInt32(DetailsEmote2);
      }
      if (DetailsEmote3 != 0) {
        output.WriteRawTag(248, 6);
        output.WriteInt32(DetailsEmote3);
      }
      if (DetailsEmote4 != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(DetailsEmote4);
      }
      if (DetailsEmoteDelay1 != 0) {
        output.WriteRawTag(136, 7);
        output.WriteInt32(DetailsEmoteDelay1);
      }
      if (DetailsEmoteDelay2 != 0) {
        output.WriteRawTag(144, 7);
        output.WriteInt32(DetailsEmoteDelay2);
      }
      if (DetailsEmoteDelay3 != 0) {
        output.WriteRawTag(152, 7);
        output.WriteInt32(DetailsEmoteDelay3);
      }
      if (DetailsEmoteDelay4 != 0) {
        output.WriteRawTag(160, 7);
        output.WriteInt32(DetailsEmoteDelay4);
      }
      if (IncompleteEmote != 0) {
        output.WriteRawTag(168, 7);
        output.WriteInt32(IncompleteEmote);
      }
      if (IncompleteEmoteDelay != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(IncompleteEmoteDelay);
      }
      if (CompleteEmote != 0) {
        output.WriteRawTag(184, 7);
        output.WriteInt32(CompleteEmote);
      }
      if (CompleteEmoteDelay != 0) {
        output.WriteRawTag(192, 7);
        output.WriteInt32(CompleteEmoteDelay);
      }
      if (OfferRewardEmote1 != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(OfferRewardEmote1);
      }
      if (OfferRewardEmote2 != 0) {
        output.WriteRawTag(208, 7);
        output.WriteInt32(OfferRewardEmote2);
      }
      if (OfferRewardEmote3 != 0) {
        output.WriteRawTag(216, 7);
        output.WriteInt32(OfferRewardEmote3);
      }
      if (OfferRewardEmote4 != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(OfferRewardEmote4);
      }
      if (OfferRewardEmoteDelay1 != 0) {
        output.WriteRawTag(232, 7);
        output.WriteInt32(OfferRewardEmoteDelay1);
      }
      if (OfferRewardEmoteDelay2 != 0) {
        output.WriteRawTag(240, 7);
        output.WriteInt32(OfferRewardEmoteDelay2);
      }
      if (OfferRewardEmoteDelay3 != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(OfferRewardEmoteDelay3);
      }
      if (OfferRewardEmoteDelay4 != 0) {
        output.WriteRawTag(128, 8);
        output.WriteInt32(OfferRewardEmoteDelay4);
      }
      if (StartScript != 0) {
        output.WriteRawTag(136, 8);
        output.WriteInt32(StartScript);
      }
      if (CompleteScript != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(CompleteScript);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Entry != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entry);
      }
      if (Method != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Method);
      }
      if (ZoneOrSort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ZoneOrSort);
      }
      if (MinLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MinLevel);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxLevel);
      }
      if (QuestLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(QuestLevel);
      }
      if (Type != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Type);
      }
      if (RequiredClasses != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RequiredClasses);
      }
      if (RequiredRaces != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RequiredRaces);
      }
      if (RequiredSkill != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RequiredSkill);
      }
      if (RequiredSkillValue != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RequiredSkillValue);
      }
      if (RequiredCondition != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RequiredCondition);
      }
      if (RepObjectiveFaction != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RepObjectiveFaction);
      }
      if (RepObjectiveValue != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RepObjectiveValue);
      }
      if (RequiredMinRepFaction != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(RequiredMinRepFaction);
      }
      if (RequiredMinRepValue != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(RequiredMinRepValue);
      }
      if (RequiredMaxRepFaction != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RequiredMaxRepFaction);
      }
      if (RequiredMaxRepValue != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(RequiredMaxRepValue);
      }
      if (SuggestedPlayers != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(SuggestedPlayers);
      }
      if (LimitTime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(LimitTime);
      }
      if (QuestFlags != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(QuestFlags);
      }
      if (SpecialFlags != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(SpecialFlags);
      }
      if (PrevQuestId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(PrevQuestId);
      }
      if (NextQuestId != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(NextQuestId);
      }
      if (ExclusiveGroup != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(ExclusiveGroup);
      }
      if (BreadcrumbForQuestId != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(BreadcrumbForQuestId);
      }
      if (NextQuestInChain != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(NextQuestInChain);
      }
      if (SrcItemId != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(SrcItemId);
      }
      if (SrcItemCount != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(SrcItemCount);
      }
      if (SrcSpell != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(SrcSpell);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Title);
      }
      if (Details.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(Details);
      }
      if (Objectives.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Objectives);
      }
      if (OfferRewardText.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(OfferRewardText);
      }
      if (RequestItemsText.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(RequestItemsText);
      }
      if (EndText.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(EndText);
      }
      if (ObjectiveText1.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(ObjectiveText1);
      }
      if (ObjectiveText2.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(ObjectiveText2);
      }
      if (ObjectiveText3.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(ObjectiveText3);
      }
      if (ObjectiveText4.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(ObjectiveText4);
      }
      if (ReqItemId1 != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(ReqItemId1);
      }
      if (ReqItemId2 != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(ReqItemId2);
      }
      if (ReqItemId3 != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(ReqItemId3);
      }
      if (ReqItemId4 != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(ReqItemId4);
      }
      if (ReqItemCount1 != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(ReqItemCount1);
      }
      if (ReqItemCount2 != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(ReqItemCount2);
      }
      if (ReqItemCount3 != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(ReqItemCount3);
      }
      if (ReqItemCount4 != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(ReqItemCount4);
      }
      if (ReqSourceId1 != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(ReqSourceId1);
      }
      if (ReqSourceId2 != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(ReqSourceId2);
      }
      if (ReqSourceId3 != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(ReqSourceId3);
      }
      if (ReqSourceId4 != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(ReqSourceId4);
      }
      if (ReqSourceCount1 != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(ReqSourceCount1);
      }
      if (ReqSourceCount2 != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(ReqSourceCount2);
      }
      if (ReqSourceCount3 != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(ReqSourceCount3);
      }
      if (ReqSourceCount4 != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(ReqSourceCount4);
      }
      if (ReqCreatureOrGOId1 != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(ReqCreatureOrGOId1);
      }
      if (ReqCreatureOrGOId2 != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(ReqCreatureOrGOId2);
      }
      if (ReqCreatureOrGOId3 != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(ReqCreatureOrGOId3);
      }
      if (ReqCreatureOrGOId4 != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(ReqCreatureOrGOId4);
      }
      if (ReqCreatureOrGOCount1 != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(ReqCreatureOrGOCount1);
      }
      if (ReqCreatureOrGOCount2 != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(ReqCreatureOrGOCount2);
      }
      if (ReqCreatureOrGOCount3 != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(ReqCreatureOrGOCount3);
      }
      if (ReqCreatureOrGOCount4 != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(ReqCreatureOrGOCount4);
      }
      if (ReqSpellCast1 != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(ReqSpellCast1);
      }
      if (ReqSpellCast2 != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(ReqSpellCast2);
      }
      if (ReqSpellCast3 != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(ReqSpellCast3);
      }
      if (ReqSpellCast4 != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(ReqSpellCast4);
      }
      if (RawChoiceItemId1 != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(RawChoiceItemId1);
      }
      if (RawChoiceItemId2 != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(RawChoiceItemId2);
      }
      if (RawChoiceItemId3 != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(RawChoiceItemId3);
      }
      if (RawChoiceItemId4 != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(RawChoiceItemId4);
      }
      if (RawChoiceItemId5 != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(RawChoiceItemId5);
      }
      if (RawChoiceItemId6 != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(RawChoiceItemId6);
      }
      if (RawChoiceItemCount1 != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(RawChoiceItemCount1);
      }
      if (RawChoiceItemCount2 != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(RawChoiceItemCount2);
      }
      if (RawChoiceItemCount3 != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(RawChoiceItemCount3);
      }
      if (RawChoiceItemCount4 != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(RawChoiceItemCount4);
      }
      if (RawChoiceItemCount5 != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(RawChoiceItemCount5);
      }
      if (RawChoiceItemCount6 != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(RawChoiceItemCount6);
      }
      if (RawItemId1 != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(RawItemId1);
      }
      if (RawItemId2 != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(RawItemId2);
      }
      if (RawItemId3 != 0) {
        output.WriteRawTag(152, 5);
        output.WriteInt32(RawItemId3);
      }
      if (RawItemId4 != 0) {
        output.WriteRawTag(160, 5);
        output.WriteInt32(RawItemId4);
      }
      if (RawItemCount1 != 0) {
        output.WriteRawTag(168, 5);
        output.WriteInt32(RawItemCount1);
      }
      if (RawItemCount2 != 0) {
        output.WriteRawTag(176, 5);
        output.WriteInt32(RawItemCount2);
      }
      if (RawItemCount3 != 0) {
        output.WriteRawTag(184, 5);
        output.WriteInt32(RawItemCount3);
      }
      if (RawItemCount4 != 0) {
        output.WriteRawTag(192, 5);
        output.WriteInt32(RawItemCount4);
      }
      if (RawRepFaction1 != 0) {
        output.WriteRawTag(200, 5);
        output.WriteInt32(RawRepFaction1);
      }
      if (RawRepFaction2 != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RawRepFaction2);
      }
      if (RawRepFaction3 != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(RawRepFaction3);
      }
      if (RawRepFaction4 != 0) {
        output.WriteRawTag(224, 5);
        output.WriteInt32(RawRepFaction4);
      }
      if (RawRepFaction5 != 0) {
        output.WriteRawTag(232, 5);
        output.WriteInt32(RawRepFaction5);
      }
      if (RawRepValue1 != 0) {
        output.WriteRawTag(240, 5);
        output.WriteInt32(RawRepValue1);
      }
      if (RawRepValue2 != 0) {
        output.WriteRawTag(248, 5);
        output.WriteInt32(RawRepValue2);
      }
      if (RawRepValue3 != 0) {
        output.WriteRawTag(128, 6);
        output.WriteInt32(RawRepValue3);
      }
      if (RawRepValue4 != 0) {
        output.WriteRawTag(136, 6);
        output.WriteInt32(RawRepValue4);
      }
      if (RawRepValue5 != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(RawRepValue5);
      }
      if (RawOrReqMoney != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RawOrReqMoney);
      }
      if (RawMoneyMaxLevel != 0) {
        output.WriteRawTag(160, 6);
        output.WriteUInt32(RawMoneyMaxLevel);
      }
      if (RawSpell != 0) {
        output.WriteRawTag(168, 6);
        output.WriteInt32(RawSpell);
      }
      if (RawSpellCast != 0) {
        output.WriteRawTag(176, 6);
        output.WriteInt32(RawSpellCast);
      }
      if (RawMailTemplateId != 0) {
        output.WriteRawTag(184, 6);
        output.WriteInt32(RawMailTemplateId);
      }
      if (RawMailDelaySecs != 0) {
        output.WriteRawTag(192, 6);
        output.WriteUInt32(RawMailDelaySecs);
      }
      if (PointMapId != 0) {
        output.WriteRawTag(200, 6);
        output.WriteInt32(PointMapId);
      }
      if (PointX != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(PointX);
      }
      if (PointY != 0F) {
        output.WriteRawTag(221, 6);
        output.WriteFloat(PointY);
      }
      if (PointOpt != 0) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(PointOpt);
      }
      if (DetailsEmote1 != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(DetailsEmote1);
      }
      if (DetailsEmote2 != 0) {
        output.WriteRawTag(240, 6);
        output.WriteInt32(DetailsEmote2);
      }
      if (DetailsEmote3 != 0) {
        output.WriteRawTag(248, 6);
        output.WriteInt32(DetailsEmote3);
      }
      if (DetailsEmote4 != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(DetailsEmote4);
      }
      if (DetailsEmoteDelay1 != 0) {
        output.WriteRawTag(136, 7);
        output.WriteInt32(DetailsEmoteDelay1);
      }
      if (DetailsEmoteDelay2 != 0) {
        output.WriteRawTag(144, 7);
        output.WriteInt32(DetailsEmoteDelay2);
      }
      if (DetailsEmoteDelay3 != 0) {
        output.WriteRawTag(152, 7);
        output.WriteInt32(DetailsEmoteDelay3);
      }
      if (DetailsEmoteDelay4 != 0) {
        output.WriteRawTag(160, 7);
        output.WriteInt32(DetailsEmoteDelay4);
      }
      if (IncompleteEmote != 0) {
        output.WriteRawTag(168, 7);
        output.WriteInt32(IncompleteEmote);
      }
      if (IncompleteEmoteDelay != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(IncompleteEmoteDelay);
      }
      if (CompleteEmote != 0) {
        output.WriteRawTag(184, 7);
        output.WriteInt32(CompleteEmote);
      }
      if (CompleteEmoteDelay != 0) {
        output.WriteRawTag(192, 7);
        output.WriteInt32(CompleteEmoteDelay);
      }
      if (OfferRewardEmote1 != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(OfferRewardEmote1);
      }
      if (OfferRewardEmote2 != 0) {
        output.WriteRawTag(208, 7);
        output.WriteInt32(OfferRewardEmote2);
      }
      if (OfferRewardEmote3 != 0) {
        output.WriteRawTag(216, 7);
        output.WriteInt32(OfferRewardEmote3);
      }
      if (OfferRewardEmote4 != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(OfferRewardEmote4);
      }
      if (OfferRewardEmoteDelay1 != 0) {
        output.WriteRawTag(232, 7);
        output.WriteInt32(OfferRewardEmoteDelay1);
      }
      if (OfferRewardEmoteDelay2 != 0) {
        output.WriteRawTag(240, 7);
        output.WriteInt32(OfferRewardEmoteDelay2);
      }
      if (OfferRewardEmoteDelay3 != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(OfferRewardEmoteDelay3);
      }
      if (OfferRewardEmoteDelay4 != 0) {
        output.WriteRawTag(128, 8);
        output.WriteInt32(OfferRewardEmoteDelay4);
      }
      if (StartScript != 0) {
        output.WriteRawTag(136, 8);
        output.WriteInt32(StartScript);
      }
      if (CompleteScript != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(CompleteScript);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Entry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entry);
      }
      if (Method != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Method);
      }
      if (ZoneOrSort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZoneOrSort);
      }
      if (MinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinLevel);
      }
      if (MaxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLevel);
      }
      if (QuestLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestLevel);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (RequiredClasses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredClasses);
      }
      if (RequiredRaces != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredRaces);
      }
      if (RequiredSkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredSkill);
      }
      if (RequiredSkillValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredSkillValue);
      }
      if (RequiredCondition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredCondition);
      }
      if (RepObjectiveFaction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepObjectiveFaction);
      }
      if (RepObjectiveValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepObjectiveValue);
      }
      if (RequiredMinRepFaction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredMinRepFaction);
      }
      if (RequiredMinRepValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequiredMinRepValue);
      }
      if (RequiredMaxRepFaction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequiredMaxRepFaction);
      }
      if (RequiredMaxRepValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequiredMaxRepValue);
      }
      if (SuggestedPlayers != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuggestedPlayers);
      }
      if (LimitTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LimitTime);
      }
      if (QuestFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(QuestFlags);
      }
      if (SpecialFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpecialFlags);
      }
      if (PrevQuestId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrevQuestId);
      }
      if (NextQuestId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NextQuestId);
      }
      if (ExclusiveGroup != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExclusiveGroup);
      }
      if (BreadcrumbForQuestId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BreadcrumbForQuestId);
      }
      if (NextQuestInChain != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NextQuestInChain);
      }
      if (SrcItemId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SrcItemId);
      }
      if (SrcItemCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SrcItemCount);
      }
      if (SrcSpell != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SrcSpell);
      }
      if (Title.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Details.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Details);
      }
      if (Objectives.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Objectives);
      }
      if (OfferRewardText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OfferRewardText);
      }
      if (RequestItemsText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RequestItemsText);
      }
      if (EndText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EndText);
      }
      if (ObjectiveText1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ObjectiveText1);
      }
      if (ObjectiveText2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ObjectiveText2);
      }
      if (ObjectiveText3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ObjectiveText3);
      }
      if (ObjectiveText4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ObjectiveText4);
      }
      if (ReqItemId1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqItemId1);
      }
      if (ReqItemId2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqItemId2);
      }
      if (ReqItemId3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqItemId3);
      }
      if (ReqItemId4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqItemId4);
      }
      if (ReqItemCount1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqItemCount1);
      }
      if (ReqItemCount2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqItemCount2);
      }
      if (ReqItemCount3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqItemCount3);
      }
      if (ReqItemCount4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqItemCount4);
      }
      if (ReqSourceId1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqSourceId1);
      }
      if (ReqSourceId2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqSourceId2);
      }
      if (ReqSourceId3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqSourceId3);
      }
      if (ReqSourceId4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqSourceId4);
      }
      if (ReqSourceCount1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqSourceCount1);
      }
      if (ReqSourceCount2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqSourceCount2);
      }
      if (ReqSourceCount3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqSourceCount3);
      }
      if (ReqSourceCount4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqSourceCount4);
      }
      if (ReqCreatureOrGOId1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqCreatureOrGOId1);
      }
      if (ReqCreatureOrGOId2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqCreatureOrGOId2);
      }
      if (ReqCreatureOrGOId3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqCreatureOrGOId3);
      }
      if (ReqCreatureOrGOId4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqCreatureOrGOId4);
      }
      if (ReqCreatureOrGOCount1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqCreatureOrGOCount1);
      }
      if (ReqCreatureOrGOCount2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqCreatureOrGOCount2);
      }
      if (ReqCreatureOrGOCount3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqCreatureOrGOCount3);
      }
      if (ReqCreatureOrGOCount4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqCreatureOrGOCount4);
      }
      if (ReqSpellCast1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqSpellCast1);
      }
      if (ReqSpellCast2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqSpellCast2);
      }
      if (ReqSpellCast3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqSpellCast3);
      }
      if (ReqSpellCast4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReqSpellCast4);
      }
      if (RawChoiceItemId1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawChoiceItemId1);
      }
      if (RawChoiceItemId2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawChoiceItemId2);
      }
      if (RawChoiceItemId3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawChoiceItemId3);
      }
      if (RawChoiceItemId4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawChoiceItemId4);
      }
      if (RawChoiceItemId5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawChoiceItemId5);
      }
      if (RawChoiceItemId6 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawChoiceItemId6);
      }
      if (RawChoiceItemCount1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawChoiceItemCount1);
      }
      if (RawChoiceItemCount2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawChoiceItemCount2);
      }
      if (RawChoiceItemCount3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawChoiceItemCount3);
      }
      if (RawChoiceItemCount4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawChoiceItemCount4);
      }
      if (RawChoiceItemCount5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawChoiceItemCount5);
      }
      if (RawChoiceItemCount6 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawChoiceItemCount6);
      }
      if (RawItemId1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawItemId1);
      }
      if (RawItemId2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawItemId2);
      }
      if (RawItemId3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawItemId3);
      }
      if (RawItemId4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawItemId4);
      }
      if (RawItemCount1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawItemCount1);
      }
      if (RawItemCount2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawItemCount2);
      }
      if (RawItemCount3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawItemCount3);
      }
      if (RawItemCount4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawItemCount4);
      }
      if (RawRepFaction1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawRepFaction1);
      }
      if (RawRepFaction2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawRepFaction2);
      }
      if (RawRepFaction3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawRepFaction3);
      }
      if (RawRepFaction4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawRepFaction4);
      }
      if (RawRepFaction5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawRepFaction5);
      }
      if (RawRepValue1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawRepValue1);
      }
      if (RawRepValue2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawRepValue2);
      }
      if (RawRepValue3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawRepValue3);
      }
      if (RawRepValue4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawRepValue4);
      }
      if (RawRepValue5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawRepValue5);
      }
      if (RawOrReqMoney != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawOrReqMoney);
      }
      if (RawMoneyMaxLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RawMoneyMaxLevel);
      }
      if (RawSpell != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawSpell);
      }
      if (RawSpellCast != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawSpellCast);
      }
      if (RawMailTemplateId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RawMailTemplateId);
      }
      if (RawMailDelaySecs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RawMailDelaySecs);
      }
      if (PointMapId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PointMapId);
      }
      if (PointX != 0F) {
        size += 2 + 4;
      }
      if (PointY != 0F) {
        size += 2 + 4;
      }
      if (PointOpt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PointOpt);
      }
      if (DetailsEmote1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DetailsEmote1);
      }
      if (DetailsEmote2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DetailsEmote2);
      }
      if (DetailsEmote3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DetailsEmote3);
      }
      if (DetailsEmote4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DetailsEmote4);
      }
      if (DetailsEmoteDelay1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DetailsEmoteDelay1);
      }
      if (DetailsEmoteDelay2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DetailsEmoteDelay2);
      }
      if (DetailsEmoteDelay3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DetailsEmoteDelay3);
      }
      if (DetailsEmoteDelay4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DetailsEmoteDelay4);
      }
      if (IncompleteEmote != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IncompleteEmote);
      }
      if (IncompleteEmoteDelay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IncompleteEmoteDelay);
      }
      if (CompleteEmote != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CompleteEmote);
      }
      if (CompleteEmoteDelay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CompleteEmoteDelay);
      }
      if (OfferRewardEmote1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardEmote1);
      }
      if (OfferRewardEmote2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardEmote2);
      }
      if (OfferRewardEmote3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardEmote3);
      }
      if (OfferRewardEmote4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardEmote4);
      }
      if (OfferRewardEmoteDelay1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardEmoteDelay1);
      }
      if (OfferRewardEmoteDelay2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardEmoteDelay2);
      }
      if (OfferRewardEmoteDelay3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardEmoteDelay3);
      }
      if (OfferRewardEmoteDelay4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardEmoteDelay4);
      }
      if (StartScript != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartScript);
      }
      if (CompleteScript != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CompleteScript);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(QuestTemplate other) {
      if (other == null) {
        return;
      }
      if (other.Entry != 0) {
        Entry = other.Entry;
      }
      if (other.Method != 0) {
        Method = other.Method;
      }
      if (other.ZoneOrSort != 0) {
        ZoneOrSort = other.ZoneOrSort;
      }
      if (other.MinLevel != 0) {
        MinLevel = other.MinLevel;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      if (other.QuestLevel != 0) {
        QuestLevel = other.QuestLevel;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.RequiredClasses != 0) {
        RequiredClasses = other.RequiredClasses;
      }
      if (other.RequiredRaces != 0) {
        RequiredRaces = other.RequiredRaces;
      }
      if (other.RequiredSkill != 0) {
        RequiredSkill = other.RequiredSkill;
      }
      if (other.RequiredSkillValue != 0) {
        RequiredSkillValue = other.RequiredSkillValue;
      }
      if (other.RequiredCondition != 0) {
        RequiredCondition = other.RequiredCondition;
      }
      if (other.RepObjectiveFaction != 0) {
        RepObjectiveFaction = other.RepObjectiveFaction;
      }
      if (other.RepObjectiveValue != 0) {
        RepObjectiveValue = other.RepObjectiveValue;
      }
      if (other.RequiredMinRepFaction != 0) {
        RequiredMinRepFaction = other.RequiredMinRepFaction;
      }
      if (other.RequiredMinRepValue != 0) {
        RequiredMinRepValue = other.RequiredMinRepValue;
      }
      if (other.RequiredMaxRepFaction != 0) {
        RequiredMaxRepFaction = other.RequiredMaxRepFaction;
      }
      if (other.RequiredMaxRepValue != 0) {
        RequiredMaxRepValue = other.RequiredMaxRepValue;
      }
      if (other.SuggestedPlayers != 0) {
        SuggestedPlayers = other.SuggestedPlayers;
      }
      if (other.LimitTime != 0) {
        LimitTime = other.LimitTime;
      }
      if (other.QuestFlags != 0) {
        QuestFlags = other.QuestFlags;
      }
      if (other.SpecialFlags != 0) {
        SpecialFlags = other.SpecialFlags;
      }
      if (other.PrevQuestId != 0) {
        PrevQuestId = other.PrevQuestId;
      }
      if (other.NextQuestId != 0) {
        NextQuestId = other.NextQuestId;
      }
      if (other.ExclusiveGroup != 0) {
        ExclusiveGroup = other.ExclusiveGroup;
      }
      if (other.BreadcrumbForQuestId != 0) {
        BreadcrumbForQuestId = other.BreadcrumbForQuestId;
      }
      if (other.NextQuestInChain != 0) {
        NextQuestInChain = other.NextQuestInChain;
      }
      if (other.SrcItemId != 0) {
        SrcItemId = other.SrcItemId;
      }
      if (other.SrcItemCount != 0) {
        SrcItemCount = other.SrcItemCount;
      }
      if (other.SrcSpell != 0) {
        SrcSpell = other.SrcSpell;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Details.Length != 0) {
        Details = other.Details;
      }
      if (other.Objectives.Length != 0) {
        Objectives = other.Objectives;
      }
      if (other.OfferRewardText.Length != 0) {
        OfferRewardText = other.OfferRewardText;
      }
      if (other.RequestItemsText.Length != 0) {
        RequestItemsText = other.RequestItemsText;
      }
      if (other.EndText.Length != 0) {
        EndText = other.EndText;
      }
      if (other.ObjectiveText1.Length != 0) {
        ObjectiveText1 = other.ObjectiveText1;
      }
      if (other.ObjectiveText2.Length != 0) {
        ObjectiveText2 = other.ObjectiveText2;
      }
      if (other.ObjectiveText3.Length != 0) {
        ObjectiveText3 = other.ObjectiveText3;
      }
      if (other.ObjectiveText4.Length != 0) {
        ObjectiveText4 = other.ObjectiveText4;
      }
      if (other.ReqItemId1 != 0) {
        ReqItemId1 = other.ReqItemId1;
      }
      if (other.ReqItemId2 != 0) {
        ReqItemId2 = other.ReqItemId2;
      }
      if (other.ReqItemId3 != 0) {
        ReqItemId3 = other.ReqItemId3;
      }
      if (other.ReqItemId4 != 0) {
        ReqItemId4 = other.ReqItemId4;
      }
      if (other.ReqItemCount1 != 0) {
        ReqItemCount1 = other.ReqItemCount1;
      }
      if (other.ReqItemCount2 != 0) {
        ReqItemCount2 = other.ReqItemCount2;
      }
      if (other.ReqItemCount3 != 0) {
        ReqItemCount3 = other.ReqItemCount3;
      }
      if (other.ReqItemCount4 != 0) {
        ReqItemCount4 = other.ReqItemCount4;
      }
      if (other.ReqSourceId1 != 0) {
        ReqSourceId1 = other.ReqSourceId1;
      }
      if (other.ReqSourceId2 != 0) {
        ReqSourceId2 = other.ReqSourceId2;
      }
      if (other.ReqSourceId3 != 0) {
        ReqSourceId3 = other.ReqSourceId3;
      }
      if (other.ReqSourceId4 != 0) {
        ReqSourceId4 = other.ReqSourceId4;
      }
      if (other.ReqSourceCount1 != 0) {
        ReqSourceCount1 = other.ReqSourceCount1;
      }
      if (other.ReqSourceCount2 != 0) {
        ReqSourceCount2 = other.ReqSourceCount2;
      }
      if (other.ReqSourceCount3 != 0) {
        ReqSourceCount3 = other.ReqSourceCount3;
      }
      if (other.ReqSourceCount4 != 0) {
        ReqSourceCount4 = other.ReqSourceCount4;
      }
      if (other.ReqCreatureOrGOId1 != 0) {
        ReqCreatureOrGOId1 = other.ReqCreatureOrGOId1;
      }
      if (other.ReqCreatureOrGOId2 != 0) {
        ReqCreatureOrGOId2 = other.ReqCreatureOrGOId2;
      }
      if (other.ReqCreatureOrGOId3 != 0) {
        ReqCreatureOrGOId3 = other.ReqCreatureOrGOId3;
      }
      if (other.ReqCreatureOrGOId4 != 0) {
        ReqCreatureOrGOId4 = other.ReqCreatureOrGOId4;
      }
      if (other.ReqCreatureOrGOCount1 != 0) {
        ReqCreatureOrGOCount1 = other.ReqCreatureOrGOCount1;
      }
      if (other.ReqCreatureOrGOCount2 != 0) {
        ReqCreatureOrGOCount2 = other.ReqCreatureOrGOCount2;
      }
      if (other.ReqCreatureOrGOCount3 != 0) {
        ReqCreatureOrGOCount3 = other.ReqCreatureOrGOCount3;
      }
      if (other.ReqCreatureOrGOCount4 != 0) {
        ReqCreatureOrGOCount4 = other.ReqCreatureOrGOCount4;
      }
      if (other.ReqSpellCast1 != 0) {
        ReqSpellCast1 = other.ReqSpellCast1;
      }
      if (other.ReqSpellCast2 != 0) {
        ReqSpellCast2 = other.ReqSpellCast2;
      }
      if (other.ReqSpellCast3 != 0) {
        ReqSpellCast3 = other.ReqSpellCast3;
      }
      if (other.ReqSpellCast4 != 0) {
        ReqSpellCast4 = other.ReqSpellCast4;
      }
      if (other.RawChoiceItemId1 != 0) {
        RawChoiceItemId1 = other.RawChoiceItemId1;
      }
      if (other.RawChoiceItemId2 != 0) {
        RawChoiceItemId2 = other.RawChoiceItemId2;
      }
      if (other.RawChoiceItemId3 != 0) {
        RawChoiceItemId3 = other.RawChoiceItemId3;
      }
      if (other.RawChoiceItemId4 != 0) {
        RawChoiceItemId4 = other.RawChoiceItemId4;
      }
      if (other.RawChoiceItemId5 != 0) {
        RawChoiceItemId5 = other.RawChoiceItemId5;
      }
      if (other.RawChoiceItemId6 != 0) {
        RawChoiceItemId6 = other.RawChoiceItemId6;
      }
      if (other.RawChoiceItemCount1 != 0) {
        RawChoiceItemCount1 = other.RawChoiceItemCount1;
      }
      if (other.RawChoiceItemCount2 != 0) {
        RawChoiceItemCount2 = other.RawChoiceItemCount2;
      }
      if (other.RawChoiceItemCount3 != 0) {
        RawChoiceItemCount3 = other.RawChoiceItemCount3;
      }
      if (other.RawChoiceItemCount4 != 0) {
        RawChoiceItemCount4 = other.RawChoiceItemCount4;
      }
      if (other.RawChoiceItemCount5 != 0) {
        RawChoiceItemCount5 = other.RawChoiceItemCount5;
      }
      if (other.RawChoiceItemCount6 != 0) {
        RawChoiceItemCount6 = other.RawChoiceItemCount6;
      }
      if (other.RawItemId1 != 0) {
        RawItemId1 = other.RawItemId1;
      }
      if (other.RawItemId2 != 0) {
        RawItemId2 = other.RawItemId2;
      }
      if (other.RawItemId3 != 0) {
        RawItemId3 = other.RawItemId3;
      }
      if (other.RawItemId4 != 0) {
        RawItemId4 = other.RawItemId4;
      }
      if (other.RawItemCount1 != 0) {
        RawItemCount1 = other.RawItemCount1;
      }
      if (other.RawItemCount2 != 0) {
        RawItemCount2 = other.RawItemCount2;
      }
      if (other.RawItemCount3 != 0) {
        RawItemCount3 = other.RawItemCount3;
      }
      if (other.RawItemCount4 != 0) {
        RawItemCount4 = other.RawItemCount4;
      }
      if (other.RawRepFaction1 != 0) {
        RawRepFaction1 = other.RawRepFaction1;
      }
      if (other.RawRepFaction2 != 0) {
        RawRepFaction2 = other.RawRepFaction2;
      }
      if (other.RawRepFaction3 != 0) {
        RawRepFaction3 = other.RawRepFaction3;
      }
      if (other.RawRepFaction4 != 0) {
        RawRepFaction4 = other.RawRepFaction4;
      }
      if (other.RawRepFaction5 != 0) {
        RawRepFaction5 = other.RawRepFaction5;
      }
      if (other.RawRepValue1 != 0) {
        RawRepValue1 = other.RawRepValue1;
      }
      if (other.RawRepValue2 != 0) {
        RawRepValue2 = other.RawRepValue2;
      }
      if (other.RawRepValue3 != 0) {
        RawRepValue3 = other.RawRepValue3;
      }
      if (other.RawRepValue4 != 0) {
        RawRepValue4 = other.RawRepValue4;
      }
      if (other.RawRepValue5 != 0) {
        RawRepValue5 = other.RawRepValue5;
      }
      if (other.RawOrReqMoney != 0) {
        RawOrReqMoney = other.RawOrReqMoney;
      }
      if (other.RawMoneyMaxLevel != 0) {
        RawMoneyMaxLevel = other.RawMoneyMaxLevel;
      }
      if (other.RawSpell != 0) {
        RawSpell = other.RawSpell;
      }
      if (other.RawSpellCast != 0) {
        RawSpellCast = other.RawSpellCast;
      }
      if (other.RawMailTemplateId != 0) {
        RawMailTemplateId = other.RawMailTemplateId;
      }
      if (other.RawMailDelaySecs != 0) {
        RawMailDelaySecs = other.RawMailDelaySecs;
      }
      if (other.PointMapId != 0) {
        PointMapId = other.PointMapId;
      }
      if (other.PointX != 0F) {
        PointX = other.PointX;
      }
      if (other.PointY != 0F) {
        PointY = other.PointY;
      }
      if (other.PointOpt != 0) {
        PointOpt = other.PointOpt;
      }
      if (other.DetailsEmote1 != 0) {
        DetailsEmote1 = other.DetailsEmote1;
      }
      if (other.DetailsEmote2 != 0) {
        DetailsEmote2 = other.DetailsEmote2;
      }
      if (other.DetailsEmote3 != 0) {
        DetailsEmote3 = other.DetailsEmote3;
      }
      if (other.DetailsEmote4 != 0) {
        DetailsEmote4 = other.DetailsEmote4;
      }
      if (other.DetailsEmoteDelay1 != 0) {
        DetailsEmoteDelay1 = other.DetailsEmoteDelay1;
      }
      if (other.DetailsEmoteDelay2 != 0) {
        DetailsEmoteDelay2 = other.DetailsEmoteDelay2;
      }
      if (other.DetailsEmoteDelay3 != 0) {
        DetailsEmoteDelay3 = other.DetailsEmoteDelay3;
      }
      if (other.DetailsEmoteDelay4 != 0) {
        DetailsEmoteDelay4 = other.DetailsEmoteDelay4;
      }
      if (other.IncompleteEmote != 0) {
        IncompleteEmote = other.IncompleteEmote;
      }
      if (other.IncompleteEmoteDelay != 0) {
        IncompleteEmoteDelay = other.IncompleteEmoteDelay;
      }
      if (other.CompleteEmote != 0) {
        CompleteEmote = other.CompleteEmote;
      }
      if (other.CompleteEmoteDelay != 0) {
        CompleteEmoteDelay = other.CompleteEmoteDelay;
      }
      if (other.OfferRewardEmote1 != 0) {
        OfferRewardEmote1 = other.OfferRewardEmote1;
      }
      if (other.OfferRewardEmote2 != 0) {
        OfferRewardEmote2 = other.OfferRewardEmote2;
      }
      if (other.OfferRewardEmote3 != 0) {
        OfferRewardEmote3 = other.OfferRewardEmote3;
      }
      if (other.OfferRewardEmote4 != 0) {
        OfferRewardEmote4 = other.OfferRewardEmote4;
      }
      if (other.OfferRewardEmoteDelay1 != 0) {
        OfferRewardEmoteDelay1 = other.OfferRewardEmoteDelay1;
      }
      if (other.OfferRewardEmoteDelay2 != 0) {
        OfferRewardEmoteDelay2 = other.OfferRewardEmoteDelay2;
      }
      if (other.OfferRewardEmoteDelay3 != 0) {
        OfferRewardEmoteDelay3 = other.OfferRewardEmoteDelay3;
      }
      if (other.OfferRewardEmoteDelay4 != 0) {
        OfferRewardEmoteDelay4 = other.OfferRewardEmoteDelay4;
      }
      if (other.StartScript != 0) {
        StartScript = other.StartScript;
      }
      if (other.CompleteScript != 0) {
        CompleteScript = other.CompleteScript;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entry = input.ReadInt32();
            break;
          }
          case 16: {
            Method = input.ReadInt32();
            break;
          }
          case 24: {
            ZoneOrSort = input.ReadInt32();
            break;
          }
          case 32: {
            MinLevel = input.ReadInt32();
            break;
          }
          case 40: {
            MaxLevel = input.ReadInt32();
            break;
          }
          case 48: {
            QuestLevel = input.ReadInt32();
            break;
          }
          case 56: {
            Type = input.ReadInt32();
            break;
          }
          case 64: {
            RequiredClasses = input.ReadInt32();
            break;
          }
          case 72: {
            RequiredRaces = input.ReadInt32();
            break;
          }
          case 80: {
            RequiredSkill = input.ReadInt32();
            break;
          }
          case 88: {
            RequiredSkillValue = input.ReadInt32();
            break;
          }
          case 96: {
            RequiredCondition = input.ReadInt32();
            break;
          }
          case 104: {
            RepObjectiveFaction = input.ReadInt32();
            break;
          }
          case 112: {
            RepObjectiveValue = input.ReadInt32();
            break;
          }
          case 120: {
            RequiredMinRepFaction = input.ReadInt32();
            break;
          }
          case 128: {
            RequiredMinRepValue = input.ReadInt32();
            break;
          }
          case 136: {
            RequiredMaxRepFaction = input.ReadInt32();
            break;
          }
          case 144: {
            RequiredMaxRepValue = input.ReadInt32();
            break;
          }
          case 152: {
            SuggestedPlayers = input.ReadInt32();
            break;
          }
          case 160: {
            LimitTime = input.ReadInt32();
            break;
          }
          case 168: {
            QuestFlags = input.ReadInt32();
            break;
          }
          case 176: {
            SpecialFlags = input.ReadInt32();
            break;
          }
          case 184: {
            PrevQuestId = input.ReadInt32();
            break;
          }
          case 192: {
            NextQuestId = input.ReadInt32();
            break;
          }
          case 200: {
            ExclusiveGroup = input.ReadInt32();
            break;
          }
          case 208: {
            BreadcrumbForQuestId = input.ReadInt32();
            break;
          }
          case 216: {
            NextQuestInChain = input.ReadInt32();
            break;
          }
          case 224: {
            SrcItemId = input.ReadInt32();
            break;
          }
          case 232: {
            SrcItemCount = input.ReadInt32();
            break;
          }
          case 240: {
            SrcSpell = input.ReadInt32();
            break;
          }
          case 250: {
            Title = input.ReadString();
            break;
          }
          case 258: {
            Details = input.ReadString();
            break;
          }
          case 266: {
            Objectives = input.ReadString();
            break;
          }
          case 274: {
            OfferRewardText = input.ReadString();
            break;
          }
          case 282: {
            RequestItemsText = input.ReadString();
            break;
          }
          case 290: {
            EndText = input.ReadString();
            break;
          }
          case 298: {
            ObjectiveText1 = input.ReadString();
            break;
          }
          case 306: {
            ObjectiveText2 = input.ReadString();
            break;
          }
          case 314: {
            ObjectiveText3 = input.ReadString();
            break;
          }
          case 322: {
            ObjectiveText4 = input.ReadString();
            break;
          }
          case 328: {
            ReqItemId1 = input.ReadInt32();
            break;
          }
          case 336: {
            ReqItemId2 = input.ReadInt32();
            break;
          }
          case 344: {
            ReqItemId3 = input.ReadInt32();
            break;
          }
          case 352: {
            ReqItemId4 = input.ReadInt32();
            break;
          }
          case 360: {
            ReqItemCount1 = input.ReadInt32();
            break;
          }
          case 368: {
            ReqItemCount2 = input.ReadInt32();
            break;
          }
          case 376: {
            ReqItemCount3 = input.ReadInt32();
            break;
          }
          case 384: {
            ReqItemCount4 = input.ReadInt32();
            break;
          }
          case 392: {
            ReqSourceId1 = input.ReadInt32();
            break;
          }
          case 400: {
            ReqSourceId2 = input.ReadInt32();
            break;
          }
          case 408: {
            ReqSourceId3 = input.ReadInt32();
            break;
          }
          case 416: {
            ReqSourceId4 = input.ReadInt32();
            break;
          }
          case 424: {
            ReqSourceCount1 = input.ReadInt32();
            break;
          }
          case 432: {
            ReqSourceCount2 = input.ReadInt32();
            break;
          }
          case 440: {
            ReqSourceCount3 = input.ReadInt32();
            break;
          }
          case 448: {
            ReqSourceCount4 = input.ReadInt32();
            break;
          }
          case 456: {
            ReqCreatureOrGOId1 = input.ReadInt32();
            break;
          }
          case 464: {
            ReqCreatureOrGOId2 = input.ReadInt32();
            break;
          }
          case 472: {
            ReqCreatureOrGOId3 = input.ReadInt32();
            break;
          }
          case 480: {
            ReqCreatureOrGOId4 = input.ReadInt32();
            break;
          }
          case 488: {
            ReqCreatureOrGOCount1 = input.ReadInt32();
            break;
          }
          case 496: {
            ReqCreatureOrGOCount2 = input.ReadInt32();
            break;
          }
          case 504: {
            ReqCreatureOrGOCount3 = input.ReadInt32();
            break;
          }
          case 512: {
            ReqCreatureOrGOCount4 = input.ReadInt32();
            break;
          }
          case 520: {
            ReqSpellCast1 = input.ReadInt32();
            break;
          }
          case 528: {
            ReqSpellCast2 = input.ReadInt32();
            break;
          }
          case 536: {
            ReqSpellCast3 = input.ReadInt32();
            break;
          }
          case 544: {
            ReqSpellCast4 = input.ReadInt32();
            break;
          }
          case 552: {
            RawChoiceItemId1 = input.ReadInt32();
            break;
          }
          case 560: {
            RawChoiceItemId2 = input.ReadInt32();
            break;
          }
          case 568: {
            RawChoiceItemId3 = input.ReadInt32();
            break;
          }
          case 576: {
            RawChoiceItemId4 = input.ReadInt32();
            break;
          }
          case 584: {
            RawChoiceItemId5 = input.ReadInt32();
            break;
          }
          case 592: {
            RawChoiceItemId6 = input.ReadInt32();
            break;
          }
          case 600: {
            RawChoiceItemCount1 = input.ReadInt32();
            break;
          }
          case 608: {
            RawChoiceItemCount2 = input.ReadInt32();
            break;
          }
          case 616: {
            RawChoiceItemCount3 = input.ReadInt32();
            break;
          }
          case 624: {
            RawChoiceItemCount4 = input.ReadInt32();
            break;
          }
          case 632: {
            RawChoiceItemCount5 = input.ReadInt32();
            break;
          }
          case 640: {
            RawChoiceItemCount6 = input.ReadInt32();
            break;
          }
          case 648: {
            RawItemId1 = input.ReadInt32();
            break;
          }
          case 656: {
            RawItemId2 = input.ReadInt32();
            break;
          }
          case 664: {
            RawItemId3 = input.ReadInt32();
            break;
          }
          case 672: {
            RawItemId4 = input.ReadInt32();
            break;
          }
          case 680: {
            RawItemCount1 = input.ReadInt32();
            break;
          }
          case 688: {
            RawItemCount2 = input.ReadInt32();
            break;
          }
          case 696: {
            RawItemCount3 = input.ReadInt32();
            break;
          }
          case 704: {
            RawItemCount4 = input.ReadInt32();
            break;
          }
          case 712: {
            RawRepFaction1 = input.ReadInt32();
            break;
          }
          case 720: {
            RawRepFaction2 = input.ReadInt32();
            break;
          }
          case 728: {
            RawRepFaction3 = input.ReadInt32();
            break;
          }
          case 736: {
            RawRepFaction4 = input.ReadInt32();
            break;
          }
          case 744: {
            RawRepFaction5 = input.ReadInt32();
            break;
          }
          case 752: {
            RawRepValue1 = input.ReadInt32();
            break;
          }
          case 760: {
            RawRepValue2 = input.ReadInt32();
            break;
          }
          case 768: {
            RawRepValue3 = input.ReadInt32();
            break;
          }
          case 776: {
            RawRepValue4 = input.ReadInt32();
            break;
          }
          case 784: {
            RawRepValue5 = input.ReadInt32();
            break;
          }
          case 792: {
            RawOrReqMoney = input.ReadInt32();
            break;
          }
          case 800: {
            RawMoneyMaxLevel = input.ReadUInt32();
            break;
          }
          case 808: {
            RawSpell = input.ReadInt32();
            break;
          }
          case 816: {
            RawSpellCast = input.ReadInt32();
            break;
          }
          case 824: {
            RawMailTemplateId = input.ReadInt32();
            break;
          }
          case 832: {
            RawMailDelaySecs = input.ReadUInt32();
            break;
          }
          case 840: {
            PointMapId = input.ReadInt32();
            break;
          }
          case 853: {
            PointX = input.ReadFloat();
            break;
          }
          case 861: {
            PointY = input.ReadFloat();
            break;
          }
          case 864: {
            PointOpt = input.ReadUInt32();
            break;
          }
          case 872: {
            DetailsEmote1 = input.ReadInt32();
            break;
          }
          case 880: {
            DetailsEmote2 = input.ReadInt32();
            break;
          }
          case 888: {
            DetailsEmote3 = input.ReadInt32();
            break;
          }
          case 896: {
            DetailsEmote4 = input.ReadInt32();
            break;
          }
          case 904: {
            DetailsEmoteDelay1 = input.ReadInt32();
            break;
          }
          case 912: {
            DetailsEmoteDelay2 = input.ReadInt32();
            break;
          }
          case 920: {
            DetailsEmoteDelay3 = input.ReadInt32();
            break;
          }
          case 928: {
            DetailsEmoteDelay4 = input.ReadInt32();
            break;
          }
          case 936: {
            IncompleteEmote = input.ReadInt32();
            break;
          }
          case 944: {
            IncompleteEmoteDelay = input.ReadInt32();
            break;
          }
          case 952: {
            CompleteEmote = input.ReadInt32();
            break;
          }
          case 960: {
            CompleteEmoteDelay = input.ReadInt32();
            break;
          }
          case 968: {
            OfferRewardEmote1 = input.ReadInt32();
            break;
          }
          case 976: {
            OfferRewardEmote2 = input.ReadInt32();
            break;
          }
          case 984: {
            OfferRewardEmote3 = input.ReadInt32();
            break;
          }
          case 992: {
            OfferRewardEmote4 = input.ReadInt32();
            break;
          }
          case 1000: {
            OfferRewardEmoteDelay1 = input.ReadInt32();
            break;
          }
          case 1008: {
            OfferRewardEmoteDelay2 = input.ReadInt32();
            break;
          }
          case 1016: {
            OfferRewardEmoteDelay3 = input.ReadInt32();
            break;
          }
          case 1024: {
            OfferRewardEmoteDelay4 = input.ReadInt32();
            break;
          }
          case 1032: {
            StartScript = input.ReadInt32();
            break;
          }
          case 1040: {
            CompleteScript = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Entry = input.ReadInt32();
            break;
          }
          case 16: {
            Method = input.ReadInt32();
            break;
          }
          case 24: {
            ZoneOrSort = input.ReadInt32();
            break;
          }
          case 32: {
            MinLevel = input.ReadInt32();
            break;
          }
          case 40: {
            MaxLevel = input.ReadInt32();
            break;
          }
          case 48: {
            QuestLevel = input.ReadInt32();
            break;
          }
          case 56: {
            Type = input.ReadInt32();
            break;
          }
          case 64: {
            RequiredClasses = input.ReadInt32();
            break;
          }
          case 72: {
            RequiredRaces = input.ReadInt32();
            break;
          }
          case 80: {
            RequiredSkill = input.ReadInt32();
            break;
          }
          case 88: {
            RequiredSkillValue = input.ReadInt32();
            break;
          }
          case 96: {
            RequiredCondition = input.ReadInt32();
            break;
          }
          case 104: {
            RepObjectiveFaction = input.ReadInt32();
            break;
          }
          case 112: {
            RepObjectiveValue = input.ReadInt32();
            break;
          }
          case 120: {
            RequiredMinRepFaction = input.ReadInt32();
            break;
          }
          case 128: {
            RequiredMinRepValue = input.ReadInt32();
            break;
          }
          case 136: {
            RequiredMaxRepFaction = input.ReadInt32();
            break;
          }
          case 144: {
            RequiredMaxRepValue = input.ReadInt32();
            break;
          }
          case 152: {
            SuggestedPlayers = input.ReadInt32();
            break;
          }
          case 160: {
            LimitTime = input.ReadInt32();
            break;
          }
          case 168: {
            QuestFlags = input.ReadInt32();
            break;
          }
          case 176: {
            SpecialFlags = input.ReadInt32();
            break;
          }
          case 184: {
            PrevQuestId = input.ReadInt32();
            break;
          }
          case 192: {
            NextQuestId = input.ReadInt32();
            break;
          }
          case 200: {
            ExclusiveGroup = input.ReadInt32();
            break;
          }
          case 208: {
            BreadcrumbForQuestId = input.ReadInt32();
            break;
          }
          case 216: {
            NextQuestInChain = input.ReadInt32();
            break;
          }
          case 224: {
            SrcItemId = input.ReadInt32();
            break;
          }
          case 232: {
            SrcItemCount = input.ReadInt32();
            break;
          }
          case 240: {
            SrcSpell = input.ReadInt32();
            break;
          }
          case 250: {
            Title = input.ReadString();
            break;
          }
          case 258: {
            Details = input.ReadString();
            break;
          }
          case 266: {
            Objectives = input.ReadString();
            break;
          }
          case 274: {
            OfferRewardText = input.ReadString();
            break;
          }
          case 282: {
            RequestItemsText = input.ReadString();
            break;
          }
          case 290: {
            EndText = input.ReadString();
            break;
          }
          case 298: {
            ObjectiveText1 = input.ReadString();
            break;
          }
          case 306: {
            ObjectiveText2 = input.ReadString();
            break;
          }
          case 314: {
            ObjectiveText3 = input.ReadString();
            break;
          }
          case 322: {
            ObjectiveText4 = input.ReadString();
            break;
          }
          case 328: {
            ReqItemId1 = input.ReadInt32();
            break;
          }
          case 336: {
            ReqItemId2 = input.ReadInt32();
            break;
          }
          case 344: {
            ReqItemId3 = input.ReadInt32();
            break;
          }
          case 352: {
            ReqItemId4 = input.ReadInt32();
            break;
          }
          case 360: {
            ReqItemCount1 = input.ReadInt32();
            break;
          }
          case 368: {
            ReqItemCount2 = input.ReadInt32();
            break;
          }
          case 376: {
            ReqItemCount3 = input.ReadInt32();
            break;
          }
          case 384: {
            ReqItemCount4 = input.ReadInt32();
            break;
          }
          case 392: {
            ReqSourceId1 = input.ReadInt32();
            break;
          }
          case 400: {
            ReqSourceId2 = input.ReadInt32();
            break;
          }
          case 408: {
            ReqSourceId3 = input.ReadInt32();
            break;
          }
          case 416: {
            ReqSourceId4 = input.ReadInt32();
            break;
          }
          case 424: {
            ReqSourceCount1 = input.ReadInt32();
            break;
          }
          case 432: {
            ReqSourceCount2 = input.ReadInt32();
            break;
          }
          case 440: {
            ReqSourceCount3 = input.ReadInt32();
            break;
          }
          case 448: {
            ReqSourceCount4 = input.ReadInt32();
            break;
          }
          case 456: {
            ReqCreatureOrGOId1 = input.ReadInt32();
            break;
          }
          case 464: {
            ReqCreatureOrGOId2 = input.ReadInt32();
            break;
          }
          case 472: {
            ReqCreatureOrGOId3 = input.ReadInt32();
            break;
          }
          case 480: {
            ReqCreatureOrGOId4 = input.ReadInt32();
            break;
          }
          case 488: {
            ReqCreatureOrGOCount1 = input.ReadInt32();
            break;
          }
          case 496: {
            ReqCreatureOrGOCount2 = input.ReadInt32();
            break;
          }
          case 504: {
            ReqCreatureOrGOCount3 = input.ReadInt32();
            break;
          }
          case 512: {
            ReqCreatureOrGOCount4 = input.ReadInt32();
            break;
          }
          case 520: {
            ReqSpellCast1 = input.ReadInt32();
            break;
          }
          case 528: {
            ReqSpellCast2 = input.ReadInt32();
            break;
          }
          case 536: {
            ReqSpellCast3 = input.ReadInt32();
            break;
          }
          case 544: {
            ReqSpellCast4 = input.ReadInt32();
            break;
          }
          case 552: {
            RawChoiceItemId1 = input.ReadInt32();
            break;
          }
          case 560: {
            RawChoiceItemId2 = input.ReadInt32();
            break;
          }
          case 568: {
            RawChoiceItemId3 = input.ReadInt32();
            break;
          }
          case 576: {
            RawChoiceItemId4 = input.ReadInt32();
            break;
          }
          case 584: {
            RawChoiceItemId5 = input.ReadInt32();
            break;
          }
          case 592: {
            RawChoiceItemId6 = input.ReadInt32();
            break;
          }
          case 600: {
            RawChoiceItemCount1 = input.ReadInt32();
            break;
          }
          case 608: {
            RawChoiceItemCount2 = input.ReadInt32();
            break;
          }
          case 616: {
            RawChoiceItemCount3 = input.ReadInt32();
            break;
          }
          case 624: {
            RawChoiceItemCount4 = input.ReadInt32();
            break;
          }
          case 632: {
            RawChoiceItemCount5 = input.ReadInt32();
            break;
          }
          case 640: {
            RawChoiceItemCount6 = input.ReadInt32();
            break;
          }
          case 648: {
            RawItemId1 = input.ReadInt32();
            break;
          }
          case 656: {
            RawItemId2 = input.ReadInt32();
            break;
          }
          case 664: {
            RawItemId3 = input.ReadInt32();
            break;
          }
          case 672: {
            RawItemId4 = input.ReadInt32();
            break;
          }
          case 680: {
            RawItemCount1 = input.ReadInt32();
            break;
          }
          case 688: {
            RawItemCount2 = input.ReadInt32();
            break;
          }
          case 696: {
            RawItemCount3 = input.ReadInt32();
            break;
          }
          case 704: {
            RawItemCount4 = input.ReadInt32();
            break;
          }
          case 712: {
            RawRepFaction1 = input.ReadInt32();
            break;
          }
          case 720: {
            RawRepFaction2 = input.ReadInt32();
            break;
          }
          case 728: {
            RawRepFaction3 = input.ReadInt32();
            break;
          }
          case 736: {
            RawRepFaction4 = input.ReadInt32();
            break;
          }
          case 744: {
            RawRepFaction5 = input.ReadInt32();
            break;
          }
          case 752: {
            RawRepValue1 = input.ReadInt32();
            break;
          }
          case 760: {
            RawRepValue2 = input.ReadInt32();
            break;
          }
          case 768: {
            RawRepValue3 = input.ReadInt32();
            break;
          }
          case 776: {
            RawRepValue4 = input.ReadInt32();
            break;
          }
          case 784: {
            RawRepValue5 = input.ReadInt32();
            break;
          }
          case 792: {
            RawOrReqMoney = input.ReadInt32();
            break;
          }
          case 800: {
            RawMoneyMaxLevel = input.ReadUInt32();
            break;
          }
          case 808: {
            RawSpell = input.ReadInt32();
            break;
          }
          case 816: {
            RawSpellCast = input.ReadInt32();
            break;
          }
          case 824: {
            RawMailTemplateId = input.ReadInt32();
            break;
          }
          case 832: {
            RawMailDelaySecs = input.ReadUInt32();
            break;
          }
          case 840: {
            PointMapId = input.ReadInt32();
            break;
          }
          case 853: {
            PointX = input.ReadFloat();
            break;
          }
          case 861: {
            PointY = input.ReadFloat();
            break;
          }
          case 864: {
            PointOpt = input.ReadUInt32();
            break;
          }
          case 872: {
            DetailsEmote1 = input.ReadInt32();
            break;
          }
          case 880: {
            DetailsEmote2 = input.ReadInt32();
            break;
          }
          case 888: {
            DetailsEmote3 = input.ReadInt32();
            break;
          }
          case 896: {
            DetailsEmote4 = input.ReadInt32();
            break;
          }
          case 904: {
            DetailsEmoteDelay1 = input.ReadInt32();
            break;
          }
          case 912: {
            DetailsEmoteDelay2 = input.ReadInt32();
            break;
          }
          case 920: {
            DetailsEmoteDelay3 = input.ReadInt32();
            break;
          }
          case 928: {
            DetailsEmoteDelay4 = input.ReadInt32();
            break;
          }
          case 936: {
            IncompleteEmote = input.ReadInt32();
            break;
          }
          case 944: {
            IncompleteEmoteDelay = input.ReadInt32();
            break;
          }
          case 952: {
            CompleteEmote = input.ReadInt32();
            break;
          }
          case 960: {
            CompleteEmoteDelay = input.ReadInt32();
            break;
          }
          case 968: {
            OfferRewardEmote1 = input.ReadInt32();
            break;
          }
          case 976: {
            OfferRewardEmote2 = input.ReadInt32();
            break;
          }
          case 984: {
            OfferRewardEmote3 = input.ReadInt32();
            break;
          }
          case 992: {
            OfferRewardEmote4 = input.ReadInt32();
            break;
          }
          case 1000: {
            OfferRewardEmoteDelay1 = input.ReadInt32();
            break;
          }
          case 1008: {
            OfferRewardEmoteDelay2 = input.ReadInt32();
            break;
          }
          case 1016: {
            OfferRewardEmoteDelay3 = input.ReadInt32();
            break;
          }
          case 1024: {
            OfferRewardEmoteDelay4 = input.ReadInt32();
            break;
          }
          case 1032: {
            StartScript = input.ReadInt32();
            break;
          }
          case 1040: {
            CompleteScript = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
