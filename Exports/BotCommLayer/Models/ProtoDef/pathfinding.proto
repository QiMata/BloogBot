syntax = "proto3";

package pathfinding;

import "game.proto";          // re-uses game.Position (x,y,z)

/* ─────────────────────── Detour / Recast nav-mesh metadata ─────────────────────── */

/** Bit-field of per-polygon capabilities (matches NavMeshDefines.h). */
enum NavPolyFlag {
  POLY_FLAG_NONE     = 0;   // 0x00 – not walkable
  POLY_FLAG_WALK     = 1;   // 0x01 – land-unit can traverse
  POLY_FLAG_SWIM     = 2;   // 0x02 – requires swimming
  POLY_FLAG_DOOR     = 4;   // 0x04 – door that toggles WALK at runtime
  POLY_FLAG_JUMP     = 8;   // 0x08 – explicit jump link
  POLY_FLAG_DISABLED = 16;  // 0x10 – temporarily disabled (dynamic obstacle)
  POLY_FLAG_TELEPORT = 32;  // 0x20 – one-way teleporter surface
  POLY_FLAG_ALL      = 65535; // helper mask (0xFFFF)
}

/** Area‐IDs carved into the mesh during build (must start at 0 for proto3). */
enum NavTerrain {
  NAV_EMPTY   = 0;   // 0x00 – no terrain bits set
  NAV_GROUND  = 1;   // 0x01
  NAV_MAGMA   = 2;   // 0x02
  NAV_SLIME   = 4;   // 0x04
  NAV_WATER   = 8;   // 0x08
  NAV_UNUSED1 = 16;  // 0x10
  NAV_UNUSED2 = 32;  // 0x20
  NAV_UNUSED3 = 64;  // 0x40
  NAV_UNUSED4 = 128; // 0x80
}

/* ────────── atomic request / response types ────────── */

message CalculatePathRequest {
  uint32        map_id   = 1;
  game.Position start    = 2;
  game.Position end      = 3;
  bool          straight = 4;   // Detour “straight path” mode
}

message CalculatePathResponse {
  repeated game.Position corners = 1;
}

message LineOfSightRequest {
  uint32        map_id = 1;
  game.Position from   = 2;
  game.Position to     = 3;
}
message LineOfSightResponse { bool in_los = 1; }

message TerrainProbeRequest {
  uint32        map_id         = 1;
  game.Position position       = 2;
  float         capsule_radius = 3;
  float         capsule_height = 4;
}

message NavPolyHit {
  uint64       ref_id  = 1;                // dtPolyRef
  NavTerrain  area    = 2;                // baked area-id
  NavPolyFlag       flags   = 3;                // bit-mask – see NavPolyFlag
  repeated game.Position verts = 4;        // convex hull verts (debug / visualisation)
}

message TerrainProbeResponse {
  float               ground_z      = 1;   // best-fit walkable Z (or NaN)
  float               liquid_z      = 2;   // water surface (or NaN)
  uint32              terrain_flags = 3;   // reserved – e.g. MASK_LIQUID / INDOORS
  repeated NavPolyHit overlaps      = 4;   // all polys intersecting the query capsule
}

/* ────────── error helper ────────── */
message Error { string message = 1; }

/* ────────── wrapper envelopes ────────── */

message PathfindingRequest {
  oneof payload {
    CalculatePathRequest path     = 1;
    LineOfSightRequest   los      = 2;
    TerrainProbeRequest  terrain  = 3;
  }
}

message PathfindingResponse {
  oneof payload {
    CalculatePathResponse path     = 1;
    LineOfSightResponse   los      = 2;
    TerrainProbeResponse  terrain  = 3;
    Error                 error    = 4;
  }
}
