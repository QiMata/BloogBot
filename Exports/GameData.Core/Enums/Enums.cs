using System.ComponentModel;
using System.Reflection;

namespace GameData.Core.Enums
{
    public enum Opcode : uint
    {
        MSG_NULL_ACTION = 0x000,
        CMSG_BOOTME = 0x001,
        CMSG_DBLOOKUP = 0x002,
        SMSG_DBLOOKUP = 0x003,
        CMSG_QUERY_OBJECT_POSITION = 0x004,
        SMSG_QUERY_OBJECT_POSITION = 0x005,
        CMSG_QUERY_OBJECT_ROTATION = 0x006,
        SMSG_QUERY_OBJECT_ROTATION = 0x007,
        CMSG_WORLD_TELEPORT = 0x008,
        CMSG_TELEPORT_TO_UNIT = 0x009,
        CMSG_ZONE_MAP = 0x00A,
        SMSG_ZONE_MAP = 0x00B,
        CMSG_DEBUG_CHANGECELLZONE = 0x00C,
        CMSG_EMBLAZON_TABARD_OBSOLETE = 0x00D,
        CMSG_UNEMBLAZON_TABARD_OBSOLETE = 0x00E,
        CMSG_RECHARGE = 0x00F,
        CMSG_LEARN_SPELL = 0x010,
        CMSG_CREATEMONSTER = 0x011,
        CMSG_DESTROYMONSTER = 0x012,
        CMSG_CREATEITEM = 0x013,
        CMSG_CREATEGAMEOBJECT = 0x014,
        SMSG_CHECK_FOR_BOTS = 0x015,
        CMSG_MAKEMONSTERATTACKGUID = 0x016,
        CMSG_BOT_DETECTED2 = 0x017,
        CMSG_FORCEACTION = 0x018,
        CMSG_FORCEACTIONONOTHER = 0x019,
        CMSG_FORCEACTIONSHOW = 0x01A,
        SMSG_FORCEACTIONSHOW = 0x01B,
        CMSG_PETGODMODE = 0x01C,
        SMSG_PETGODMODE = 0x01D,
        SMSG_DEBUGINFOSPELLMISS_OBSOLETE = 0x01E,
        CMSG_WEATHER_SPEED_CHEAT = 0x01F,
        CMSG_UNDRESSPLAYER = 0x020,
        CMSG_BEASTMASTER = 0x021,
        CMSG_GODMODE = 0x022,
        SMSG_GODMODE = 0x023,
        CMSG_CHEAT_SETMONEY = 0x024,
        CMSG_LEVEL_CHEAT = 0x025,
        CMSG_PET_LEVEL_CHEAT = 0x026,
        CMSG_SET_WORLDSTATE = 0x027,
        CMSG_COOLDOWN_CHEAT = 0x028,
        CMSG_USE_SKILL_CHEAT = 0x029,
        CMSG_FLAG_QUEST = 0x02A,
        CMSG_FLAG_QUEST_FINISH = 0x02B,
        CMSG_CLEAR_QUEST = 0x02C,
        CMSG_SEND_EVENT = 0x02D,
        CMSG_DEBUG_AISTATE = 0x02E,
        SMSG_DEBUG_AISTATE = 0x02F,
        CMSG_DISABLE_PVP_CHEAT = 0x030,
        CMSG_ADVANCE_SPAWN_TIME = 0x031,
        CMSG_PVP_PORT_OBSOLETE = 0x032,
        CMSG_AUTH_SRP6_BEGIN = 0x033,
        CMSG_AUTH_SRP6_PROOF = 0x034,
        CMSG_AUTH_SRP6_RECODE = 0x035,
        CMSG_CHAR_CREATE = 0x036,
        CMSG_CHAR_ENUM = 0x037,
        CMSG_CHAR_DELETE = 0x038,
        SMSG_AUTH_SRP6_RESPONSE = 0x039,
        SMSG_CHAR_CREATE = 0x03A,
        SMSG_CHAR_ENUM = 0x03B,
        SMSG_CHAR_DELETE = 0x03C,
        CMSG_PLAYER_LOGIN = 0x03D,
        SMSG_NEW_WORLD = 0x03E,
        SMSG_TRANSFER_PENDING = 0x03F,
        SMSG_TRANSFER_ABORTED = 0x040,
        SMSG_CHARACTER_LOGIN_FAILED = 0x041,
        SMSG_LOGIN_SETTIMESPEED = 0x042,
        SMSG_GAMETIME_UPDATE = 0x043,
        CMSG_GAMETIME_SET = 0x044,
        SMSG_GAMETIME_SET = 0x045,
        CMSG_GAMESPEED_SET = 0x046,
        SMSG_GAMESPEED_SET = 0x047,
        CMSG_SERVERTIME = 0x048,
        SMSG_SERVERTIME = 0x049,
        CMSG_PLAYER_LOGOUT = 0x04A,
        CMSG_LOGOUT_REQUEST = 0x04B,
        SMSG_LOGOUT_RESPONSE = 0x04C,
        SMSG_LOGOUT_COMPLETE = 0x04D,
        CMSG_LOGOUT_CANCEL = 0x04E,
        SMSG_LOGOUT_CANCEL_ACK = 0x04F,
        CMSG_NAME_QUERY = 0x050,
        SMSG_NAME_QUERY_RESPONSE = 0x051,
        CMSG_PET_NAME_QUERY = 0x052,
        SMSG_PET_NAME_QUERY_RESPONSE = 0x053,
        CMSG_GUILD_QUERY = 0x054,
        SMSG_GUILD_QUERY_RESPONSE = 0x055,
        CMSG_ITEM_QUERY_SINGLE = 0x056,
        CMSG_ITEM_QUERY_MULTIPLE = 0x057,
        SMSG_ITEM_QUERY_SINGLE_RESPONSE = 0x058,
        SMSG_ITEM_QUERY_MULTIPLE_RESPONSE = 0x059,
        CMSG_PAGE_TEXT_QUERY = 0x05A,
        SMSG_PAGE_TEXT_QUERY_RESPONSE = 0x05B,
        CMSG_QUEST_QUERY = 0x05C,
        SMSG_QUEST_QUERY_RESPONSE = 0x05D,
        CMSG_GAMEOBJECT_QUERY = 0x05E,
        SMSG_GAMEOBJECT_QUERY_RESPONSE = 0x05F,
        CMSG_CREATURE_QUERY = 0x060,
        SMSG_CREATURE_QUERY_RESPONSE = 0x061,
        CMSG_WHO = 0x062,
        SMSG_WHO = 0x063,
        CMSG_WHOIS = 0x064,
        SMSG_WHOIS = 0x065,
        CMSG_FRIEND_LIST = 0x066,
        SMSG_FRIEND_LIST = 0x067,
        SMSG_FRIEND_STATUS = 0x068,
        CMSG_ADD_FRIEND = 0x069,
        CMSG_DEL_FRIEND = 0x06A,
        SMSG_IGNORE_LIST = 0x06B,
        CMSG_ADD_IGNORE = 0x06C,
        CMSG_DEL_IGNORE = 0x06D,
        CMSG_GROUP_INVITE = 0x06E,
        SMSG_GROUP_INVITE = 0x06F,
        CMSG_GROUP_CANCEL = 0x070,
        SMSG_GROUP_CANCEL = 0x071,
        CMSG_GROUP_ACCEPT = 0x072,
        CMSG_GROUP_DECLINE = 0x073,
        SMSG_GROUP_DECLINE = 0x074,
        CMSG_GROUP_UNINVITE = 0x075,
        CMSG_GROUP_UNINVITE_GUID = 0x076,
        SMSG_GROUP_UNINVITE = 0x077,
        CMSG_GROUP_SET_LEADER = 0x078,
        SMSG_GROUP_SET_LEADER = 0x079,
        CMSG_LOOT_METHOD = 0x07A,
        CMSG_GROUP_DISBAND = 0x07B,
        SMSG_GROUP_DESTROYED = 0x07C,
        SMSG_GROUP_LIST = 0x07D,
        SMSG_PARTY_MEMBER_STATS = 0x07E,
        SMSG_PARTY_COMMAND_RESULT = 0x07F,
        UMSG_UPDATE_GROUP_MEMBERS = 0x080,
        CMSG_GUILD_CREATE = 0x081,
        CMSG_GUILD_INVITE = 0x082,
        SMSG_GUILD_INVITE = 0x083,
        CMSG_GUILD_ACCEPT = 0x084,
        CMSG_GUILD_DECLINE = 0x085,
        SMSG_GUILD_DECLINE = 0x086,
        CMSG_GUILD_INFO = 0x087,
        SMSG_GUILD_INFO = 0x088,
        CMSG_GUILD_ROSTER = 0x089,
        SMSG_GUILD_ROSTER = 0x08A,
        CMSG_GUILD_PROMOTE = 0x08B,
        CMSG_GUILD_DEMOTE = 0x08C,
        CMSG_GUILD_LEAVE = 0x08D,
        CMSG_GUILD_REMOVE = 0x08E,
        CMSG_GUILD_DISBAND = 0x08F,
        CMSG_GUILD_LEADER = 0x090,
        CMSG_GUILD_MOTD = 0x091,
        SMSG_GUILD_EVENT = 0x092,
        SMSG_GUILD_COMMAND_RESULT = 0x093,
        UMSG_UPDATE_GUILD = 0x094,
        CMSG_MESSAGECHAT = 0x095,
        SMSG_MESSAGECHAT = 0x096,
        CMSG_JOIN_CHANNEL = 0x097,
        CMSG_LEAVE_CHANNEL = 0x098,
        SMSG_CHANNEL_NOTIFY = 0x099,
        CMSG_CHANNEL_LIST = 0x09A,
        SMSG_CHANNEL_LIST = 0x09B,
        CMSG_CHANNEL_PASSWORD = 0x09C,
        CMSG_CHANNEL_SET_OWNER = 0x09D,
        CMSG_CHANNEL_OWNER = 0x09E,
        CMSG_CHANNEL_MODERATOR = 0x09F,
        CMSG_CHANNEL_UNMODERATOR = 0x0A0,
        CMSG_CHANNEL_MUTE = 0x0A1,
        CMSG_CHANNEL_UNMUTE = 0x0A2,
        CMSG_CHANNEL_INVITE = 0x0A3,
        CMSG_CHANNEL_KICK = 0x0A4,
        CMSG_CHANNEL_BAN = 0x0A5,
        CMSG_CHANNEL_UNBAN = 0x0A6,
        CMSG_CHANNEL_ANNOUNCEMENTS = 0x0A7,
        CMSG_CHANNEL_MODERATE = 0x0A8,
        SMSG_UPDATE_OBJECT = 0x0A9,
        SMSG_DESTROY_OBJECT = 0x0AA,
        CMSG_USE_ITEM = 0x0AB,
        CMSG_OPEN_ITEM = 0x0AC,
        CMSG_READ_ITEM = 0x0AD,
        SMSG_READ_ITEM_OK = 0x0AE,
        SMSG_READ_ITEM_FAILED = 0x0AF,
        SMSG_ITEM_COOLDOWN = 0x0B0,
        CMSG_GAMEOBJ_USE = 0x0B1,
        CMSG_GAMEOBJ_CHAIR_USE_OBSOLETE = 0x0B2,
        SMSG_GAMEOBJECT_CUSTOM_ANIM = 0x0B3,
        CMSG_AREATRIGGER = 0x0B4,
        MSG_MOVE_START_FORWARD = 0x0B5,
        MSG_MOVE_START_BACKWARD = 0x0B6,
        MSG_MOVE_STOP = 0x0B7,
        MSG_MOVE_START_STRAFE_LEFT = 0x0B8,
        MSG_MOVE_START_STRAFE_RIGHT = 0x0B9,
        MSG_MOVE_STOP_STRAFE = 0x0BA,
        MSG_MOVE_JUMP = 0x0BB,
        MSG_MOVE_START_TURN_LEFT = 0x0BC,
        MSG_MOVE_START_TURN_RIGHT = 0x0BD,
        MSG_MOVE_STOP_TURN = 0x0BE,
        MSG_MOVE_START_PITCH_UP = 0x0BF,
        MSG_MOVE_START_PITCH_DOWN = 0x0C0,
        MSG_MOVE_STOP_PITCH = 0x0C1,
        MSG_MOVE_SET_RUN_MODE = 0x0C2,
        MSG_MOVE_SET_WALK_MODE = 0x0C3,
        MSG_MOVE_TOGGLE_LOGGING = 0x0C4,
        MSG_MOVE_TELEPORT = 0x0C5,
        MSG_MOVE_TELEPORT_CHEAT = 0x0C6,
        MSG_MOVE_TELEPORT_ACK = 0x0C7,
        MSG_MOVE_TOGGLE_FALL_LOGGING = 0x0C8,
        MSG_MOVE_FALL_LAND = 0x0C9,
        MSG_MOVE_START_SWIM = 0x0CA,
        MSG_MOVE_STOP_SWIM = 0x0CB,
        MSG_MOVE_SET_RUN_SPEED_CHEAT = 0x0CC,
        MSG_MOVE_SET_RUN_SPEED = 0x0CD,
        MSG_MOVE_SET_RUN_BACK_SPEED_CHEAT = 0x0CE,
        MSG_MOVE_SET_RUN_BACK_SPEED = 0x0CF,
        MSG_MOVE_SET_WALK_SPEED_CHEAT = 0x0D0,
        MSG_MOVE_SET_WALK_SPEED = 0x0D1,
        MSG_MOVE_SET_SWIM_SPEED_CHEAT = 0x0D2,
        MSG_MOVE_SET_SWIM_SPEED = 0x0D3,
        MSG_MOVE_SET_SWIM_BACK_SPEED_CHEAT = 0x0D4,
        MSG_MOVE_SET_SWIM_BACK_SPEED = 0x0D5,
        MSG_MOVE_SET_ALL_SPEED_CHEAT = 0x0D6,
        MSG_MOVE_SET_TURN_RATE_CHEAT = 0x0D7,
        MSG_MOVE_SET_TURN_RATE = 0x0D8,
        MSG_MOVE_TOGGLE_COLLISION_CHEAT = 0x0D9,
        MSG_MOVE_SET_FACING = 0x0DA,
        MSG_MOVE_SET_PITCH = 0x0DB,
        MSG_MOVE_WORLDPORT_ACK = 0x0DC,
        SMSG_MONSTER_MOVE = 0x0DD,
        SMSG_MOVE_WATER_WALK = 0x0DE,
        SMSG_MOVE_LAND_WALK = 0x0DF,
        MSG_MOVE_SET_RAW_POSITION_ACK = 0x0E0,
        CMSG_MOVE_SET_RAW_POSITION = 0x0E1,
        SMSG_FORCE_RUN_SPEED_CHANGE = 0x0E2,
        CMSG_FORCE_RUN_SPEED_CHANGE_ACK = 0x0E3,
        SMSG_FORCE_RUN_BACK_SPEED_CHANGE = 0x0E4,
        CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK = 0x0E5,
        SMSG_FORCE_SWIM_SPEED_CHANGE = 0x0E6,
        CMSG_FORCE_SWIM_SPEED_CHANGE_ACK = 0x0E7,
        SMSG_FORCE_MOVE_ROOT = 0x0E8,
        CMSG_FORCE_MOVE_ROOT_ACK = 0x0E9,
        SMSG_FORCE_MOVE_UNROOT = 0x0EA,
        CMSG_FORCE_MOVE_UNROOT_ACK = 0x0EB,
        MSG_MOVE_ROOT = 0x0EC,
        MSG_MOVE_UNROOT = 0x0ED,
        MSG_MOVE_HEARTBEAT = 0x0EE,
        SMSG_MOVE_KNOCK_BACK = 0x0EF,
        CMSG_MOVE_KNOCK_BACK_ACK = 0x0F0,
        MSG_MOVE_KNOCK_BACK = 0x0F1,
        SMSG_MOVE_FEATHER_FALL = 0x0F2,
        SMSG_MOVE_NORMAL_FALL = 0x0F3,
        SMSG_MOVE_SET_HOVER = 0x0F4,
        SMSG_MOVE_UNSET_HOVER = 0x0F5,
        CMSG_MOVE_HOVER_ACK = 0x0F6,
        MSG_MOVE_HOVER = 0x0F7,
        CMSG_TRIGGER_CINEMATIC_CHEAT = 0x0F8,
        CMSG_OPENING_CINEMATIC = 0x0F9,
        SMSG_TRIGGER_CINEMATIC = 0x0FA,
        CMSG_NEXT_CINEMATIC_CAMERA = 0x0FB,
        CMSG_COMPLETE_CINEMATIC = 0x0FC,
        SMSG_TUTORIAL_FLAGS = 0x0FD,
        CMSG_TUTORIAL_FLAG = 0x0FE,
        CMSG_TUTORIAL_CLEAR = 0x0FF,
        CMSG_TUTORIAL_RESET = 0x100,
        CMSG_STANDSTATECHANGE = 0x101,
        CMSG_EMOTE = 0x102,
        SMSG_EMOTE = 0x103,
        CMSG_TEXT_EMOTE = 0x104,
        SMSG_TEXT_EMOTE = 0x105,
        CMSG_AUTOEQUIP_GROUND_ITEM = 0x106,
        CMSG_AUTOSTORE_GROUND_ITEM = 0x107,
        CMSG_AUTOSTORE_LOOT_ITEM = 0x108,
        CMSG_STORE_LOOT_IN_SLOT = 0x109,
        CMSG_AUTOEQUIP_ITEM = 0x10A,
        CMSG_AUTOSTORE_BAG_ITEM = 0x10B,
        CMSG_SWAP_ITEM = 0x10C,
        CMSG_SWAP_INV_ITEM = 0x10D,
        CMSG_SPLIT_ITEM = 0x10E,
        CMSG_AUTOEQUIP_ITEM_SLOT = 0x10F,
        OBSOLETE_DROP_ITEM = 0x110,
        CMSG_DESTROYITEM = 0x111,
        SMSG_INVENTORY_CHANGE_FAILURE = 0x112,
        SMSG_OPEN_CONTAINER = 0x113,
        CMSG_INSPECT = 0x114,
        SMSG_INSPECT = 0x115,
        CMSG_INITIATE_TRADE = 0x116,
        CMSG_BEGIN_TRADE = 0x117,
        CMSG_BUSY_TRADE = 0x118,
        CMSG_IGNORE_TRADE = 0x119,
        CMSG_ACCEPT_TRADE = 0x11A,
        CMSG_UNACCEPT_TRADE = 0x11B,
        CMSG_CANCEL_TRADE = 0x11C,
        CMSG_SET_TRADE_ITEM = 0x11D,
        CMSG_CLEAR_TRADE_ITEM = 0x11E,
        CMSG_SET_TRADE_GOLD = 0x11F,
        SMSG_TRADE_STATUS = 0x120,
        SMSG_TRADE_STATUS_EXTENDED = 0x121,
        SMSG_INITIALIZE_FACTIONS = 0x122,
        SMSG_SET_FACTION_VISIBLE = 0x123,
        SMSG_SET_FACTION_STANDING = 0x124,
        CMSG_SET_FACTION_ATWAR = 0x125,
        CMSG_SET_FACTION_CHEAT = 0x126,
        SMSG_SET_PROFICIENCY = 0x127,
        CMSG_SET_ACTION_BUTTON = 0x128,
        SMSG_ACTION_BUTTONS = 0x129,
        SMSG_INITIAL_SPELLS = 0x12A,
        SMSG_LEARNED_SPELL = 0x12B,
        SMSG_SUPERCEDED_SPELL = 0x12C,
        CMSG_NEW_SPELL_SLOT = 0x12D,
        CMSG_CAST_SPELL = 0x12E,
        CMSG_CANCEL_CAST = 0x12F,
        SMSG_CAST_FAILED = 0x130,
        SMSG_SPELL_START = 0x131,
        SMSG_SPELL_GO = 0x132,
        SMSG_SPELL_FAILURE = 0x133,
        SMSG_SPELL_COOLDOWN = 0x134,
        SMSG_COOLDOWN_EVENT = 0x135,
        CMSG_CANCEL_AURA = 0x136,
        SMSG_UPDATE_AURA_DURATION = 0x137,
        SMSG_PET_CAST_FAILED = 0x138,
        MSG_CHANNEL_START = 0x139,
        MSG_CHANNEL_UPDATE = 0x13A,
        CMSG_CANCEL_CHANNELLING = 0x13B,
        SMSG_AI_REACTION = 0x13C,
        CMSG_SET_SELECTION = 0x13D,
        CMSG_SET_TARGET_OBSOLETE = 0x13E,
        CMSG_UNUSED = 0x13F,
        CMSG_UNUSED2 = 0x140,
        CMSG_ATTACKSWING = 0x141,
        CMSG_ATTACKSTOP = 0x142,
        SMSG_ATTACKSTART = 0x143,
        SMSG_ATTACKSTOP = 0x144,
        SMSG_ATTACKSWING_NOTINRANGE = 0x145,
        SMSG_ATTACKSWING_BADFACING = 0x146,
        SMSG_ATTACKSWING_NOTSTANDING = 0x147,
        SMSG_ATTACKSWING_DEADTARGET = 0x148,
        SMSG_ATTACKSWING_CANT_ATTACK = 0x149,
        SMSG_ATTACKERSTATEUPDATE = 0x14A,
        SMSG_VICTIMSTATEUPDATE_OBSOLETE = 0x14B,
        SMSG_DAMAGE_DONE_OBSOLETE = 0x14C,
        SMSG_DAMAGE_TAKEN_OBSOLETE = 0x14D,
        SMSG_CANCEL_COMBAT = 0x14E,
        SMSG_PLAYER_COMBAT_XP_GAIN_OBSOLETE = 0x14F,
        SMSG_SPELLHEALLOG = 0x150,
        SMSG_SPELLENERGIZELOG = 0x151,
        CMSG_SHEATHE_OBSOLETE = 0x152,
        CMSG_SAVE_PLAYER = 0x153,
        CMSG_SETDEATHBINDPOINT = 0x154,
        SMSG_BINDPOINTUPDATE = 0x155,
        CMSG_GETDEATHBINDZONE = 0x156,
        SMSG_BINDZONEREPLY = 0x157,
        SMSG_PLAYERBOUND = 0x158,
        SMSG_CLIENT_CONTROL_UPDATE = 0x159,
        CMSG_REPOP_REQUEST = 0x15A,
        SMSG_RESURRECT_REQUEST = 0x15B,
        CMSG_RESURRECT_RESPONSE = 0x15C,
        CMSG_LOOT = 0x15D,
        CMSG_LOOT_MONEY = 0x15E,
        CMSG_LOOT_RELEASE = 0x15F,
        SMSG_LOOT_RESPONSE = 0x160,
        SMSG_LOOT_RELEASE_RESPONSE = 0x161,
        SMSG_LOOT_REMOVED = 0x162,
        SMSG_LOOT_MONEY_NOTIFY = 0x163,
        SMSG_LOOT_ITEM_NOTIFY = 0x164,
        SMSG_LOOT_CLEAR_MONEY = 0x165,
        SMSG_ITEM_PUSH_RESULT = 0x166,
        SMSG_DUEL_REQUESTED = 0x167,
        SMSG_DUEL_OUTOFBOUNDS = 0x168,
        SMSG_DUEL_INBOUNDS = 0x169,
        SMSG_DUEL_COMPLETE = 0x16A,
        SMSG_DUEL_WINNER = 0x16B,
        CMSG_DUEL_ACCEPTED = 0x16C,
        CMSG_DUEL_CANCELLED = 0x16D,
        SMSG_MOUNTRESULT = 0x16E,
        SMSG_DISMOUNTRESULT = 0x16F,
        SMSG_PUREMOUNT_CANCELLED_OBSOLETE = 0x170,
        CMSG_MOUNTSPECIAL_ANIM = 0x171,
        SMSG_MOUNTSPECIAL_ANIM = 0x172,
        SMSG_PET_TAME_FAILURE = 0x173,
        CMSG_PET_SET_ACTION = 0x174,
        CMSG_PET_ACTION = 0x175,
        CMSG_PET_ABANDON = 0x176,
        CMSG_PET_RENAME = 0x177,
        SMSG_PET_NAME_INVALID = 0x178,
        SMSG_PET_SPELLS = 0x179,
        SMSG_PET_MODE = 0x17A,
        CMSG_GOSSIP_HELLO = 0x17B,
        CMSG_GOSSIP_SELECT_OPTION = 0x17C,
        SMSG_GOSSIP_MESSAGE = 0x17D,
        SMSG_GOSSIP_COMPLETE = 0x17E,
        CMSG_NPC_TEXT_QUERY = 0x17F,
        SMSG_NPC_TEXT_UPDATE = 0x180,
        SMSG_NPC_WONT_TALK = 0x181,
        CMSG_QUESTGIVER_STATUS_QUERY = 0x182,
        SMSG_QUESTGIVER_STATUS = 0x183,
        CMSG_QUESTGIVER_HELLO = 0x184,
        SMSG_QUESTGIVER_QUEST_LIST = 0x185,
        CMSG_QUESTGIVER_QUERY_QUEST = 0x186,
        CMSG_QUESTGIVER_QUEST_AUTOLAUNCH = 0x187,
        SMSG_QUESTGIVER_QUEST_DETAILS = 0x188,
        CMSG_QUESTGIVER_ACCEPT_QUEST = 0x189,
        CMSG_QUESTGIVER_COMPLETE_QUEST = 0x18A,
        SMSG_QUESTGIVER_REQUEST_ITEMS = 0x18B,
        CMSG_QUESTGIVER_REQUEST_REWARD = 0x18C,
        SMSG_QUESTGIVER_OFFER_REWARD = 0x18D,
        CMSG_QUESTGIVER_CHOOSE_REWARD = 0x18E,
        SMSG_QUESTGIVER_QUEST_INVALID = 0x18F,
        CMSG_QUESTGIVER_CANCEL = 0x190,
        SMSG_QUESTGIVER_QUEST_COMPLETE = 0x191,
        SMSG_QUESTGIVER_QUEST_FAILED = 0x192,
        CMSG_QUESTLOG_SWAP_QUEST = 0x193,
        CMSG_QUESTLOG_REMOVE_QUEST = 0x194,
        SMSG_QUESTLOG_FULL = 0x195,
        SMSG_QUESTUPDATE_FAILED = 0x196,
        SMSG_QUESTUPDATE_FAILEDTIMER = 0x197,
        SMSG_QUESTUPDATE_COMPLETE = 0x198,
        SMSG_QUESTUPDATE_ADD_KILL = 0x199,
        SMSG_QUESTUPDATE_ADD_ITEM = 0x19A,
        CMSG_QUEST_CONFIRM_ACCEPT = 0x19B,
        SMSG_QUEST_CONFIRM_ACCEPT = 0x19C,
        CMSG_PUSHQUESTTOPARTY = 0x19D,
        CMSG_LIST_INVENTORY = 0x19E,
        SMSG_LIST_INVENTORY = 0x19F,
        CMSG_SELL_ITEM = 0x1A0,
        SMSG_SELL_ITEM = 0x1A1,
        CMSG_BUY_ITEM = 0x1A2,
        CMSG_BUY_ITEM_IN_SLOT = 0x1A3,
        SMSG_BUY_ITEM = 0x1A4,
        SMSG_BUY_FAILED = 0x1A5,
        CMSG_TAXICLEARALLNODES = 0x1A6,
        CMSG_TAXIENABLEALLNODES = 0x1A7,
        CMSG_TAXISHOWNODES = 0x1A8,
        SMSG_SHOWTAXINODES = 0x1A9,
        CMSG_TAXINODE_STATUS_QUERY = 0x1AA,
        SMSG_TAXINODE_STATUS = 0x1AB,
        CMSG_TAXIQUERYAVAILABLENODES = 0x1AC,
        CMSG_ACTIVATETAXI = 0x1AD,
        SMSG_ACTIVATETAXIREPLY = 0x1AE,
        SMSG_NEW_TAXI_PATH = 0x1AF,
        CMSG_TRAINER_LIST = 0x1B0,
        SMSG_TRAINER_LIST = 0x1B1,
        CMSG_TRAINER_BUY_SPELL = 0x1B2,
        SMSG_TRAINER_BUY_SUCCEEDED = 0x1B3,
        SMSG_TRAINER_BUY_FAILED = 0x1B4,// uint64, uint32, uint32 (0...2)
        CMSG_BINDER_ACTIVATE = 0x1B5,
        SMSG_PLAYERBINDERROR = 0x1B6,
        CMSG_BANKER_ACTIVATE = 0x1B7,
        SMSG_SHOW_BANK = 0x1B8,
        CMSG_BUY_BANK_SLOT = 0x1B9,
        SMSG_BUY_BANK_SLOT_RESULT = 0x1BA,
        CMSG_PETITION_SHOWLIST = 0x1BB,
        SMSG_PETITION_SHOWLIST = 0x1BC,
        CMSG_PETITION_BUY = 0x1BD,
        CMSG_PETITION_SHOW_SIGNATURES = 0x1BE,
        SMSG_PETITION_SHOW_SIGNATURES = 0x1BF,
        CMSG_PETITION_SIGN = 0x1C0,
        SMSG_PETITION_SIGN_RESULTS = 0x1C1,
        MSG_PETITION_DECLINE = 0x1C2,
        CMSG_OFFER_PETITION = 0x1C3,
        CMSG_TURN_IN_PETITION = 0x1C4,
        SMSG_TURN_IN_PETITION_RESULTS = 0x1C5,
        CMSG_PETITION_QUERY = 0x1C6,
        SMSG_PETITION_QUERY_RESPONSE = 0x1C7,
        SMSG_FISH_NOT_HOOKED = 0x1C8,
        SMSG_FISH_ESCAPED = 0x1C9,
        CMSG_BUG = 0x1CA,
        SMSG_NOTIFICATION = 0x1CB,
        CMSG_PLAYED_TIME = 0x1CC,
        SMSG_PLAYED_TIME = 0x1CD,
        CMSG_QUERY_TIME = 0x1CE,
        SMSG_QUERY_TIME_RESPONSE = 0x1CF,
        SMSG_LOG_XPGAIN = 0x1D0,
        SMSG_AURACASTLOG = 0x1D1,
        CMSG_RECLAIM_CORPSE = 0x1D2,
        CMSG_WRAP_ITEM = 0x1D3,
        SMSG_LEVELUP_INFO = 0x1D4,
        MSG_MINIMAP_PING = 0x1D5,
        SMSG_RESISTLOG = 0x1D6,// GUID, GUID, int32, float, float, int32, int32
        SMSG_ENCHANTMENTLOG = 0x1D7,
        CMSG_SET_SKILL_CHEAT = 0x1D8,
        SMSG_START_MIRROR_TIMER = 0x1D9,
        SMSG_PAUSE_MIRROR_TIMER = 0x1DA,
        SMSG_STOP_MIRROR_TIMER = 0x1DB,
        CMSG_PING = 0x1DC,
        SMSG_PONG = 0x1DD,
        SMSG_CLEAR_COOLDOWN = 0x1DE,
        SMSG_GAMEOBJECT_PAGETEXT = 0x1DF,
        CMSG_SETSHEATHED = 0x1E0,
        SMSG_COOLDOWN_CHEAT = 0x1E1,
        SMSG_SPELL_DELAYED = 0x1E2,
        CMSG_PLAYER_MACRO_OBSOLETE = 0x1E3,
        SMSG_PLAYER_MACRO_OBSOLETE = 0x1E4,
        CMSG_GHOST = 0x1E5,
        CMSG_GM_INVIS = 0x1E6,
        SMSG_INVALID_PROMOTION_CODE = 0x1E7,
        MSG_GM_BIND_OTHER = 0x1E8,
        MSG_GM_SUMMON = 0x1E9,
        SMSG_ITEM_TIME_UPDATE = 0x1EA,
        SMSG_ITEM_ENCHANT_TIME_UPDATE = 0x1EB,
        SMSG_AUTH_CHALLENGE = 0x1EC,
        CMSG_AUTH_SESSION = 0x1ED,
        SMSG_AUTH_RESPONSE = 0x1EE,
        MSG_GM_SHOWLABEL = 0x1EF,
        CMSG_PET_CAST_SPELL = 0x1F0,
        MSG_SAVE_GUILD_EMBLEM = 0x1F1,
        MSG_TABARDVENDOR_ACTIVATE = 0x1F2,
        SMSG_PLAY_SPELL_VISUAL = 0x1F3,
        CMSG_ZONEUPDATE = 0x1F4,
        SMSG_PARTYKILLLOG = 0x1F5,
        SMSG_COMPRESSED_UPDATE_OBJECT = 0x1F6,
        SMSG_PLAY_SPELL_IMPACT = 0x1F7,
        SMSG_EXPLORATION_EXPERIENCE = 0x1F8,
        CMSG_GM_SET_SECURITY_GROUP = 0x1F9,
        CMSG_GM_NUKE = 0x1FA,
        MSG_RANDOM_ROLL = 0x1FB,
        SMSG_ENVIRONMENTALDAMAGELOG = 0x1FC,
        CMSG_RWHOIS_OBSOLETE = 0x1FD,
        SMSG_RWHOIS = 0x1FE,
        MSG_LOOKING_FOR_GROUP = 0x1FF,
        CMSG_SET_LOOKING_FOR_GROUP = 0x200,
        CMSG_UNLEARN_SPELL = 0x201,
        CMSG_UNLEARN_SKILL = 0x202,
        SMSG_REMOVED_SPELL = 0x203,
        CMSG_DECHARGE = 0x204,
        CMSG_GMTICKET_CREATE = 0x205,
        SMSG_GMTICKET_CREATE = 0x206,
        CMSG_GMTICKET_UPDATETEXT = 0x207,
        SMSG_GMTICKET_UPDATETEXT = 0x208,
        SMSG_ACCOUNT_DATA_TIMES = 0x209,
        CMSG_REQUEST_ACCOUNT_DATA = 0x20A,
        CMSG_UPDATE_ACCOUNT_DATA = 0x20B,
        SMSG_UPDATE_ACCOUNT_DATA = 0x20C,
        SMSG_CLEAR_FAR_SIGHT_IMMEDIATE = 0x20D,
        SMSG_POWERGAINLOG_OBSOLETE = 0x20E,
        CMSG_GM_TEACH = 0x20F,
        CMSG_GM_CREATE_ITEM_TARGET = 0x210,
        CMSG_GMTICKET_GETTICKET = 0x211,
        SMSG_GMTICKET_GETTICKET = 0x212,
        CMSG_UNLEARN_TALENTS = 0x213,
        SMSG_GAMEOBJECT_SPAWN_ANIM_OBSOLETE = 0x214,
        SMSG_GAMEOBJECT_DESPAWN_ANIM = 0x215,
        MSG_CORPSE_QUERY = 0x216,
        CMSG_GMTICKET_DELETETICKET = 0x217,
        SMSG_GMTICKET_DELETETICKET = 0x218,
        SMSG_CHAT_WRONG_FACTION = 0x219,
        CMSG_GMTICKET_SYSTEMSTATUS = 0x21A,
        SMSG_GMTICKET_SYSTEMSTATUS = 0x21B,
        CMSG_SPIRIT_HEALER_ACTIVATE = 0x21C,
        CMSG_SET_STAT_CHEAT = 0x21D,
        SMSG_SET_REST_START = 0x21E,
        CMSG_SKILL_BUY_STEP = 0x21F,
        CMSG_SKILL_BUY_RANK = 0x220,
        CMSG_XP_CHEAT = 0x221,
        SMSG_SPIRIT_HEALER_CONFIRM = 0x222,
        CMSG_CHARACTER_POINT_CHEAT = 0x223,
        SMSG_GOSSIP_POI = 0x224,
        CMSG_CHAT_IGNORED = 0x225,
        CMSG_GM_VISION = 0x226,
        CMSG_SERVER_COMMAND = 0x227,
        CMSG_GM_SILENCE = 0x228,
        CMSG_GM_REVEALTO = 0x229,
        CMSG_GM_RESURRECT = 0x22A,
        CMSG_GM_SUMMONMOB = 0x22B,
        CMSG_GM_MOVECORPSE = 0x22C,
        CMSG_GM_FREEZE = 0x22D,
        CMSG_GM_UBERINVIS = 0x22E,
        CMSG_GM_REQUEST_PLAYER_INFO = 0x22F,
        SMSG_GM_PLAYER_INFO = 0x230,
        CMSG_GUILD_RANK = 0x231,
        CMSG_GUILD_ADD_RANK = 0x232,
        CMSG_GUILD_DEL_RANK = 0x233,
        CMSG_GUILD_SET_PUBLIC_NOTE = 0x234,
        CMSG_GUILD_SET_OFFICER_NOTE = 0x235,
        SMSG_LOGIN_VERIFY_WORLD = 0x236,
        CMSG_CLEAR_EXPLORATION = 0x237,
        CMSG_SEND_MAIL = 0x238,
        SMSG_SEND_MAIL_RESULT = 0x239,
        CMSG_GET_MAIL_LIST = 0x23A,
        SMSG_MAIL_LIST_RESULT = 0x23B,
        CMSG_BATTLEFIELD_LIST = 0x23C,
        SMSG_BATTLEFIELD_LIST = 0x23D,
        CMSG_BATTLEFIELD_JOIN = 0x23E,
        SMSG_BATTLEFIELD_WIN_OBSOLETE = 0x23F,
        SMSG_BATTLEFIELD_LOSE_OBSOLETE = 0x240,
        CMSG_TAXICLEARNODE = 0x241,
        CMSG_TAXIENABLENODE = 0x242,
        CMSG_ITEM_TEXT_QUERY = 0x243,
        SMSG_ITEM_TEXT_QUERY_RESPONSE = 0x244,
        CMSG_MAIL_TAKE_MONEY = 0x245,
        CMSG_MAIL_TAKE_ITEM = 0x246,
        CMSG_MAIL_MARK_AS_READ = 0x247,
        CMSG_MAIL_RETURN_TO_SENDER = 0x248,
        CMSG_MAIL_DELETE = 0x249,
        CMSG_MAIL_CREATE_TEXT_ITEM = 0x24A,
        SMSG_SPELLLOGMISS = 0x24B,
        SMSG_SPELLLOGEXECUTE = 0x24C,
        SMSG_DEBUGAURAPROC = 0x24D,
        SMSG_PERIODICAURALOG = 0x24E,
        SMSG_SPELLDAMAGESHIELD = 0x24F,
        SMSG_SPELLNONMELEEDAMAGELOG = 0x250,
        CMSG_LEARN_TALENT = 0x251,
        SMSG_RESURRECT_FAILED = 0x252,
        CMSG_TOGGLE_PVP = 0x253,
        SMSG_ZONE_UNDER_ATTACK = 0x254,
        MSG_AUCTION_HELLO = 0x255,
        CMSG_AUCTION_SELL_ITEM = 0x256,
        CMSG_AUCTION_REMOVE_ITEM = 0x257,
        CMSG_AUCTION_LIST_ITEMS = 0x258,
        CMSG_AUCTION_LIST_OWNER_ITEMS = 0x259,
        CMSG_AUCTION_PLACE_BID = 0x25A,
        SMSG_AUCTION_COMMAND_RESULT = 0x25B,
        SMSG_AUCTION_LIST_RESULT = 0x25C,
        SMSG_AUCTION_OWNER_LIST_RESULT = 0x25D,
        SMSG_AUCTION_BIDDER_NOTIFICATION = 0x25E,
        SMSG_AUCTION_OWNER_NOTIFICATION = 0x25F,
        SMSG_PROCRESIST = 0x260,
        SMSG_STANDSTATE_CHANGE_FAILURE_OBSOLETE = 0x261,
        SMSG_DISPEL_FAILED = 0x262,
        SMSG_SPELLORDAMAGE_IMMUNE = 0x263,
        CMSG_AUCTION_LIST_BIDDER_ITEMS = 0x264,
        SMSG_AUCTION_BIDDER_LIST_RESULT = 0x265,
        SMSG_SET_FLAT_SPELL_MODIFIER = 0x266,
        SMSG_SET_PCT_SPELL_MODIFIER = 0x267,
        CMSG_SET_AMMO = 0x268,
        SMSG_CORPSE_RECLAIM_DELAY = 0x269,
        CMSG_SET_ACTIVE_MOVER = 0x26A,
        CMSG_PET_CANCEL_AURA = 0x26B,
        CMSG_PLAYER_AI_CHEAT = 0x26C,
        CMSG_CANCEL_AUTO_REPEAT_SPELL = 0x26D,
        MSG_GM_ACCOUNT_ONLINE = 0x26E,
        MSG_LIST_STABLED_PETS = 0x26F,
        CMSG_STABLE_PET = 0x270,
        CMSG_UNSTABLE_PET = 0x271,
        CMSG_BUY_STABLE_SLOT = 0x272,
        SMSG_STABLE_RESULT = 0x273,
        CMSG_STABLE_REVIVE_PET = 0x274,
        CMSG_STABLE_SWAP_PET = 0x275,
        MSG_QUEST_PUSH_RESULT = 0x276,
        SMSG_PLAY_MUSIC = 0x277,
        SMSG_PLAY_OBJECT_SOUND = 0x278,
        CMSG_REQUEST_PET_INFO = 0x279,
        CMSG_FAR_SIGHT = 0x27A,
        SMSG_SPELLDISPELLOG = 0x27B,
        SMSG_DAMAGE_CALC_LOG = 0x27C,
        CMSG_ENABLE_DAMAGE_LOG = 0x27D,
        CMSG_GROUP_CHANGE_SUB_GROUP = 0x27E,
        CMSG_REQUEST_PARTY_MEMBER_STATS = 0x27F,
        CMSG_GROUP_SWAP_SUB_GROUP = 0x280,
        CMSG_RESET_FACTION_CHEAT = 0x281,
        CMSG_AUTOSTORE_BANK_ITEM = 0x282,
        CMSG_AUTOBANK_ITEM = 0x283,
        MSG_QUERY_NEXT_MAIL_TIME = 0x284,
        SMSG_RECEIVED_MAIL = 0x285,
        SMSG_RAID_GROUP_ONLY = 0x286,
        CMSG_SET_DURABILITY_CHEAT = 0x287,
        CMSG_SET_PVP_RANK_CHEAT = 0x288,
        CMSG_ADD_PVP_MEDAL_CHEAT = 0x289,
        CMSG_DEL_PVP_MEDAL_CHEAT = 0x28A,
        CMSG_SET_PVP_TITLE = 0x28B,
        SMSG_PVP_CREDIT = 0x28C,
        SMSG_AUCTION_REMOVED_NOTIFICATION = 0x28D,
        CMSG_GROUP_RAID_CONVERT = 0x28E,
        CMSG_GROUP_ASSISTANT_LEADER = 0x28F,
        CMSG_BUYBACK_ITEM = 0x290,
        SMSG_SERVER_MESSAGE = 0x291,
        CMSG_MEETINGSTONE_JOIN = 0x292,// lua: SetSavedInstanceExtend
        CMSG_MEETINGSTONE_LEAVE = 0x293,
        CMSG_MEETINGSTONE_CHEAT = 0x294,
        SMSG_MEETINGSTONE_SETQUEUE = 0x295,
        CMSG_MEETINGSTONE_INFO = 0x296,
        SMSG_MEETINGSTONE_COMPLETE = 0x297,
        SMSG_MEETINGSTONE_IN_PROGRESS = 0x298,
        SMSG_MEETINGSTONE_MEMBER_ADDED = 0x299,
        CMSG_GMTICKETSYSTEM_TOGGLE = 0x29A,
        CMSG_CANCEL_GROWTH_AURA = 0x29B,
        SMSG_CANCEL_AUTO_REPEAT = 0x29C,
        SMSG_STANDSTATE_UPDATE = 0x29D,
        SMSG_LOOT_ALL_PASSED = 0x29E,
        SMSG_LOOT_ROLL_WON = 0x29F,
        CMSG_LOOT_ROLL = 0x2A0,
        SMSG_LOOT_START_ROLL = 0x2A1,
        SMSG_LOOT_ROLL = 0x2A2,
        CMSG_LOOT_MASTER_GIVE = 0x2A3,
        SMSG_LOOT_MASTER_LIST = 0x2A4,
        SMSG_SET_FORCED_REACTIONS = 0x2A5,
        SMSG_SPELL_FAILED_OTHER = 0x2A6,
        SMSG_GAMEOBJECT_RESET_STATE = 0x2A7,
        CMSG_REPAIR_ITEM = 0x2A8,
        SMSG_CHAT_PLAYER_NOT_FOUND = 0x2A9,
        MSG_TALENT_WIPE_CONFIRM = 0x2AA,
        SMSG_SUMMON_REQUEST = 0x2AB,
        CMSG_SUMMON_RESPONSE = 0x2AC,
        MSG_MOVE_TOGGLE_GRAVITY_CHEAT = 0x2AD,
        SMSG_MONSTER_MOVE_TRANSPORT = 0x2AE,
        SMSG_PET_BROKEN = 0x2AF,
        MSG_MOVE_FEATHER_FALL = 0x2B0,
        MSG_MOVE_WATER_WALK = 0x2B1,
        CMSG_SERVER_BROADCAST = 0x2B2,
        CMSG_SELF_RES = 0x2B3,
        SMSG_FEIGN_DEATH_RESISTED = 0x2B4,
        CMSG_RUN_SCRIPT = 0x2B5,
        SMSG_SCRIPT_MESSAGE = 0x2B6,
        SMSG_DUEL_COUNTDOWN = 0x2B7,
        SMSG_AREA_TRIGGER_MESSAGE = 0x2B8,
        CMSG_TOGGLE_HELM = 0x2B9,
        CMSG_TOGGLE_CLOAK = 0x2BA,
        SMSG_MEETINGSTONE_JOINFAILED = 0x2BB,
        SMSG_PLAYER_SKINNED = 0x2BC,
        SMSG_DURABILITY_DAMAGE_DEATH = 0x2BD,
        CMSG_SET_EXPLORATION = 0x2BE,
        CMSG_SET_ACTIONBAR_TOGGLES = 0x2BF,
        UMSG_DELETE_GUILD_CHARTER = 0x2C0,
        MSG_PETITION_RENAME = 0x2C1,
        SMSG_INIT_WORLD_STATES = 0x2C2,
        SMSG_UPDATE_WORLD_STATE = 0x2C3,
        CMSG_ITEM_NAME_QUERY = 0x2C4,
        SMSG_ITEM_NAME_QUERY_RESPONSE = 0x2C5,
        SMSG_PET_ACTION_FEEDBACK = 0x2C6,
        CMSG_CHAR_RENAME = 0x2C7,
        SMSG_CHAR_RENAME = 0x2C8,
        CMSG_MOVE_SPLINE_DONE = 0x2C9,
        CMSG_MOVE_FALL_RESET = 0x2CA,
        SMSG_INSTANCE_SAVE_CREATED = 0x2CB,
        SMSG_RAID_INSTANCE_INFO = 0x2CC,
        CMSG_REQUEST_RAID_INFO = 0x2CD,
        CMSG_MOVE_TIME_SKIPPED = 0x2CE,
        CMSG_MOVE_FEATHER_FALL_ACK = 0x2CF,
        CMSG_MOVE_WATER_WALK_ACK = 0x2D0,
        CMSG_MOVE_NOT_ACTIVE_MOVER = 0x2D1,
        SMSG_PLAY_SOUND = 0x2D2,
        CMSG_BATTLEFIELD_STATUS = 0x2D3,
        SMSG_BATTLEFIELD_STATUS = 0x2D4,
        CMSG_BATTLEFIELD_PORT = 0x2D5,
        MSG_INSPECT_HONOR_STATS = 0x2D6,
        CMSG_BATTLEMASTER_HELLO = 0x2D7,
        CMSG_MOVE_START_SWIM_CHEAT = 0x2D8,
        CMSG_MOVE_STOP_SWIM_CHEAT = 0x2D9,
        SMSG_FORCE_WALK_SPEED_CHANGE = 0x2DA,
        CMSG_FORCE_WALK_SPEED_CHANGE_ACK = 0x2DB,
        SMSG_FORCE_SWIM_BACK_SPEED_CHANGE = 0x2DC,
        CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK = 0x2DD,
        SMSG_FORCE_TURN_RATE_CHANGE = 0x2DE,
        CMSG_FORCE_TURN_RATE_CHANGE_ACK = 0x2DF,
        MSG_PVP_LOG_DATA = 0x2E0,
        CMSG_LEAVE_BATTLEFIELD = 0x2E1,
        CMSG_AREA_SPIRIT_HEALER_QUERY = 0x2E2,
        CMSG_AREA_SPIRIT_HEALER_QUEUE = 0x2E3,
        SMSG_AREA_SPIRIT_HEALER_TIME = 0x2E4,
        CMSG_GM_UNTEACH = 0x2E5,
        SMSG_WARDEN_DATA = 0x2E6,
        CMSG_WARDEN_DATA = 0x2E7,
        SMSG_GROUP_JOINED_BATTLEGROUND = 0x2E8,
        MSG_BATTLEGROUND_PLAYER_POSITIONS = 0x2E9,
        CMSG_PET_STOP_ATTACK = 0x2EA,
        SMSG_BINDER_CONFIRM = 0x2EB,
        SMSG_BATTLEGROUND_PLAYER_JOINED = 0x2EC,
        SMSG_BATTLEGROUND_PLAYER_LEFT = 0x2ED,
        CMSG_BATTLEMASTER_JOIN = 0x2EE,
        SMSG_ADDON_INFO = 0x2EF,
        CMSG_PET_UNLEARN = 0x2F0,
        SMSG_PET_UNLEARN_CONFIRM = 0x2F1,
        SMSG_PARTY_MEMBER_STATS_FULL = 0x2F2,
        CMSG_PET_SPELL_AUTOCAST = 0x2F3,
        SMSG_WEATHER = 0x2F4,
        SMSG_PLAY_TIME_WARNING = 0x2F5,
        SMSG_MINIGAME_SETUP = 0x2F6,
        SMSG_MINIGAME_STATE = 0x2F7,
        CMSG_MINIGAME_MOVE = 0x2F8,
        SMSG_MINIGAME_MOVE_FAILED = 0x2F9,
        SMSG_RAID_INSTANCE_MESSAGE = 0x2FA,
        SMSG_COMPRESSED_MOVES = 0x2FB,
        CMSG_GUILD_INFO_TEXT = 0x2FC,
        SMSG_CHAT_RESTRICTED = 0x2FD,
        SMSG_SPLINE_SET_RUN_SPEED = 0x2FE,
        SMSG_SPLINE_SET_RUN_BACK_SPEED = 0x2FF,
        SMSG_SPLINE_SET_SWIM_SPEED = 0x300,
        SMSG_SPLINE_SET_WALK_SPEED = 0x301,
        SMSG_SPLINE_SET_SWIM_BACK_SPEED = 0x302,
        SMSG_SPLINE_SET_TURN_RATE = 0x303,
        SMSG_SPLINE_MOVE_UNROOT = 0x304,
        SMSG_SPLINE_MOVE_FEATHER_FALL = 0x305,
        SMSG_SPLINE_MOVE_NORMAL_FALL = 0x306,
        SMSG_SPLINE_MOVE_SET_HOVER = 0x307,
        SMSG_SPLINE_MOVE_UNSET_HOVER = 0x308,
        SMSG_SPLINE_MOVE_WATER_WALK = 0x309,
        SMSG_SPLINE_MOVE_LAND_WALK = 0x30A,
        SMSG_SPLINE_MOVE_START_SWIM = 0x30B,
        SMSG_SPLINE_MOVE_STOP_SWIM = 0x30C,
        SMSG_SPLINE_MOVE_SET_RUN_MODE = 0x30D,
        SMSG_SPLINE_MOVE_SET_WALK_MODE = 0x30E,
        CMSG_GM_NUKE_ACCOUNT = 0x30F,
        MSG_GM_DESTROY_CORPSE = 0x310,
        CMSG_GM_DESTROY_ONLINE_CORPSE = 0x311,
        CMSG_ACTIVATETAXIEXPRESS = 0x312,
        SMSG_SET_FACTION_ATWAR = 0x313,
        SMSG_GAMETIMEBIAS_SET = 0x314,
        CMSG_DEBUG_ACTIONS_START = 0x315,
        CMSG_DEBUG_ACTIONS_STOP = 0x316,
        CMSG_SET_FACTION_INACTIVE = 0x317,
        CMSG_SET_WATCHED_FACTION = 0x318,
        MSG_MOVE_TIME_SKIPPED = 0x319,
        SMSG_SPLINE_MOVE_ROOT = 0x31A,
        CMSG_SET_EXPLORATION_ALL = 0x31B,
        SMSG_INVALIDATE_PLAYER = 0x31C,
        CMSG_RESET_INSTANCES = 0x31D,
        SMSG_INSTANCE_RESET = 0x31E,
        SMSG_INSTANCE_RESET_FAILED = 0x31F,
        SMSG_UPDATE_LAST_INSTANCE = 0x320,
        MSG_RAID_TARGET_UPDATE = 0x321,
        MSG_RAID_READY_CHECK = 0x322,
        CMSG_LUA_USAGE = 0x323,
        SMSG_PET_ACTION_SOUND = 0x324,
        SMSG_PET_DISMISS_SOUND = 0x325,
        SMSG_GHOSTEE_GONE = 0x326,
        CMSG_GM_UPDATE_TICKET_STATUS = 0x327,
        SMSG_GM_TICKET_STATUS_UPDATE = 0x328,
        CMSG_GMSURVEY_SUBMIT = 0x32A,
        SMSG_UPDATE_INSTANCE_OWNERSHIP = 0x32B,
        CMSG_IGNORE_KNOCKBACK_CHEAT = 0x32C,
        SMSG_CHAT_PLAYER_AMBIGUOUS = 0x32D,
        MSG_DELAY_GHOST_TELEPORT = 0x32E,
        SMSG_SPELLINSTAKILLLOG = 0x32F,
        SMSG_SPELL_UPDATE_CHAIN_TARGETS = 0x330,
        CMSG_CHAT_FILTERED = 0x331,
        SMSG_EXPECTED_SPAM_RECORDS = 0x332,
        SMSG_SPELLSTEALLOG = 0x333,
        CMSG_LOTTERY_QUERY_OBSOLETE = 0x334,
        SMSG_LOTTERY_QUERY_RESULT_OBSOLETE = 0x335,
        CMSG_BUY_LOTTERY_TICKET_OBSOLETE = 0x336,
        SMSG_LOTTERY_RESULT_OBSOLETE = 0x337,
        SMSG_CHARACTER_PROFILE = 0x338,
        SMSG_CHARACTER_PROFILE_REALM_CONNECTED = 0x339,
        SMSG_DEFENSE_MESSAGE = 0x33A,
        MSG_GM_RESETINSTANCELIMIT = 0x33C,
        SMSG_MOTD = 0x33D,
        SMSG_MOVE_SET_FLIGHT = 0x33E,
        SMSG_MOVE_UNSET_FLIGHT = 0x33F,
        CMSG_MOVE_FLIGHT_ACK = 0x340,
        MSG_MOVE_START_SWIM_CHEAT = 0x341,
        MSG_MOVE_STOP_SWIM_CHEAT = 0x342,
        // [-ZERO] Last existed in 1.12.1 opcode, maybe some renumbering from other side
        CMSG_CANCEL_MOUNT_AURA = 0x375,
        CMSG_CANCEL_TEMP_ENCHANTMENT = 0x379,
        CMSG_MAELSTROM_INVALIDATE_CACHE = 0x387,
        CMSG_SET_TAXI_BENCHMARK_MODE = 0x389,
        CMSG_MOVE_CHNG_TRANSPORT = 0x38D,
        MSG_PARTY_ASSIGNMENT = 0x38E,
        SMSG_OFFER_PETITION_ERROR = 0x38F,
        SMSG_RESET_FAILED_NOTIFY = 0x396,
        SMSG_REAL_GROUP_UPDATE = 0x397,
        SMSG_INIT_EXTRA_AURA_INFO = 0x3A3,
        SMSG_SET_EXTRA_AURA_INFO = 0x3A4,
        SMSG_SET_EXTRA_AURA_INFO_NEED_UPDATE = 0x3A5,
        SMSG_SPELL_CHANCE_PROC_LOG = 0x3AA,
        CMSG_MOVE_SET_RUN_SPEED = 0x3AB,
        SMSG_DISMOUNT = 0x3AC,
        MSG_RAID_READY_CHECK_CONFIRM = 0x3AE,
        SMSG_CLEAR_TARGET = 0x3BE,
        CMSG_BOT_DETECTED = 0x3BF,
        SMSG_KICK_REASON = 0x3C4,
        MSG_RAID_READY_CHECK_FINISHED = 0x3C5,
        CMSG_TARGET_CAST = 0x3CF,
        CMSG_TARGET_SCRIPT_CAST = 0x3D0,
        CMSG_CHANNEL_DISPLAY_LIST = 0x3D1,
        CMSG_GET_CHANNEL_MEMBER_COUNT = 0x3D3,
        SMSG_CHANNEL_MEMBER_COUNT = 0x3D4,
        CMSG_DEBUG_LIST_TARGETS = 0x3D7,
        SMSG_DEBUG_LIST_TARGETS = 0x3D8,
        CMSG_PARTY_SILENCE = 0x3DC,
        CMSG_PARTY_UNSILENCE = 0x3DD,
        MSG_NOTIFY_PARTY_SQUELCH = 0x3DE,
        SMSG_COMSAT_RECONNECT_TRY = 0x3DF,
        SMSG_COMSAT_DISCONNECT = 0x3E0,
        SMSG_COMSAT_CONNECT_FAIL = 0x3E1,
        CMSG_SET_CHANNEL_WATCH = 0x3EE,
        SMSG_USERLIST_ADD = 0x3EF,
        SMSG_USERLIST_REMOVE = 0x3F0,
        SMSG_USERLIST_UPDATE = 0x3F1,
        CMSG_CLEAR_CHANNEL_WATCH = 0x3F2,
        SMSG_GOGOGO_OBSOLETE = 0x3F4,
        SMSG_ECHO_PARTY_SQUELCH = 0x3F5,
        CMSG_SPELLCLICK = 0x3F7,
        SMSG_LOOT_LIST = 0x3F8,
        MSG_GUILD_PERMISSIONS = 0x3FC,
        MSG_GUILD_EVENT_LOG_QUERY = 0x3FE,
        CMSG_MAELSTROM_RENAME_GUILD = 0x3FF,
        CMSG_GET_MIRRORIMAGE_DATA = 0x400,
        SMSG_MIRRORIMAGE_DATA = 0x401,
        SMSG_FORCE_DISPLAY_UPDATE = 0x402,
        SMSG_SPELL_CHANCE_RESIST_PUSHBACK = 0x403,
        CMSG_IGNORE_DIMINISHING_RETURNS_CHEAT = 0x404,
        SMSG_IGNORE_DIMINISHING_RETURNS_CHEAT = 0x405,
        CMSG_KEEP_ALIVE = 0x406,
        SMSG_RAID_READY_CHECK_ERROR = 0x407,
        CMSG_OPT_OUT_OF_LOOT = 0x408,
        CMSG_SET_GRANTABLE_LEVELS = 0x40B,
        CMSG_GRANT_LEVEL = 0x40C,
        CMSG_DECLINE_CHANNEL_INVITE = 0x40F,
        CMSG_GROUPACTION_THROTTLED = 0x410,
        SMSG_OVERRIDE_LIGHT = 0x411,
        SMSG_TOTEM_CREATED = 0x412,
        CMSG_TOTEM_DESTROYED = 0x413,
        CMSG_EXPIRE_RAID_INSTANCE = 0x414,
        CMSG_NO_SPELL_VARIANCE = 0x415,
        CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY = 0x416,
        SMSG_QUESTGIVER_STATUS_MULTIPLE = 0x417,
        CMSG_QUERY_SERVER_BUCK_DATA = 0x41A,
        CMSG_CLEAR_SERVER_BUCK_DATA = 0x41B,
        SMSG_SERVER_BUCK_DATA = 0x41C,
        SMSG_SEND_UNLEARN_SPELLS = 0x41D,
        SMSG_PROPOSE_LEVEL_GRANT = 0x41E,
        CMSG_ACCEPT_LEVEL_GRANT = 0x41F,
        SMSG_REFER_A_FRIEND_FAILURE = 0x420,
        SMSG_SUMMON_CANCEL = 0x423
    }
    public enum ResponseCode
    {
        RESPONSE_SUCCESS = 0x00,
        RESPONSE_FAILURE = 0x01,
        RESPONSE_CANCELLED = 0x02,
        RESPONSE_DISCONNECTED = 0x03,
        RESPONSE_FAILED_TO_CONNECT = 0x04,
        RESPONSE_CONNECTED = 0x05,
        RESPONSE_VERSION_MISMATCH = 0x06,
        CSTATUS_CONNECTING = 0x07,
        CSTATUS_NEGOTIATING_SECURITY = 0x08,
        CSTATUS_NEGOTIATION_COMPLETE = 0x09,
        CSTATUS_NEGOTIATION_FAILED = 0x0A,
        CSTATUS_AUTHENTICATING = 0x0B,
        AUTH_OK = 0x0C,
        AUTH_FAILED = 0x0D,
        AUTH_REJECT = 0x0E,
        AUTH_BAD_SERVER_PROOF = 0x0F,
        AUTH_UNAVAILABLE = 0x10,
        AUTH_SYSTEM_ERROR = 0x11,
        AUTH_BILLING_ERROR = 0x12,
        AUTH_BILLING_EXPIRED = 0x13,
        AUTH_VERSION_MISMATCH = 0x14,
        AUTH_UNKNOWN_ACCOUNT = 0x15,
        AUTH_INCORRECT_PASSWORD = 0x16,
        AUTH_SESSION_EXPIRED = 0x17,
        AUTH_SERVER_SHUTTING_DOWN = 0x18,
        AUTH_ALREADY_LOGGING_IN = 0x19,
        AUTH_LOGIN_SERVER_NOT_FOUND = 0x1A,
        AUTH_WAIT_QUEUE = 0x1B,
        AUTH_BANNED = 0x1C,
        AUTH_ALREADY_ONLINE = 0x1D,
        AUTH_NO_TIME = 0x1E,
        AUTH_DB_BUSY = 0x1F,
        AUTH_SUSPENDED = 0x20,
        AUTH_PARENTAL_CONTROL = 0x21,
        REALM_LIST_IN_PROGRESS = 0x22,
        REALM_LIST_SUCCESS = 0x23,
        REALM_LIST_FAILED = 0x24,
        REALM_LIST_INVALID = 0x25,
        REALM_LIST_REALM_NOT_FOUND = 0x26,
        ACCOUNT_CREATE_IN_PROGRESS = 0x27,
        ACCOUNT_CREATE_SUCCESS = 0x28,
        ACCOUNT_CREATE_FAILED = 0x29,
        CHAR_LIST_RETRIEVING = 0x2A,
        CHAR_LIST_RETRIEVED = 0x2B,
        CHAR_LIST_FAILED = 0x2C,
        CHAR_CREATE_IN_PROGRESS = 0x2D,
        CHAR_CREATE_SUCCESS = 0x2E,
        CHAR_CREATE_ERROR = 0x2F,
        CHAR_CREATE_FAILED = 0x30,
        CHAR_CREATE_NAME_IN_USE = 0x31,
        CHAR_CREATE_DISABLED = 0x32,
        CHAR_CREATE_PVP_TEAMS_VIOLATION = 0x33,
        CHAR_CREATE_SERVER_LIMIT = 0x34,
        CHAR_CREATE_ACCOUNT_LIMIT = 0x35,
        CHAR_CREATE_SERVER_QUEUE = 0x36,
        CHAR_CREATE_ONLY_EXISTING = 0x37,
        CHAR_DELETE_IN_PROGRESS = 0x38,
        CHAR_DELETE_SUCCESS = 0x39,
        CHAR_DELETE_FAILED = 0x3A,
        CHAR_DELETE_FAILED_LOCKED_FOR_TRANSFER = 0x3B,
        CHAR_LOGIN_IN_PROGRESS = 0x3C,
        CHAR_LOGIN_SUCCESS = 0x3D,
        CHAR_LOGIN_NO_WORLD = 0x3E,
        CHAR_LOGIN_DUPLICATE_CHARACTER = 0x3F,
        CHAR_LOGIN_NO_INSTANCES = 0x40,
        CHAR_LOGIN_FAILED = 0x41,
        CHAR_LOGIN_DISABLED = 0x42,
        CHAR_LOGIN_NO_CHARACTER = 0x43,
        CHAR_LOGIN_LOCKED_FOR_TRANSFER = 0x44,
        CHAR_NAME_NO_NAME = 0x45,
        CHAR_NAME_TOO_SHORT = 0x46,
        CHAR_NAME_TOO_LONG = 0x47,
        CHAR_NAME_INVALID_CHARACTER = 0x48,
        CHAR_NAME_MIXED_LANGUAGES = 0x49,
        CHAR_NAME_PROFANE = 0x4A,
        CHAR_NAME_RESERVED = 0x4B,
        CHAR_NAME_INVALID_APOSTROPHE = 0x4C,
        CHAR_NAME_MULTIPLE_APOSTROPHES = 0x4D,
        CHAR_NAME_THREE_CONSECUTIVE = 0x4E,
        CHAR_NAME_INVALID_SPACE = 0x4F,
        CHAR_NAME_CONSECUTIVE_SPACES = 0x50,
        CHAR_NAME_FAILURE = 0x51,
        CHAR_NAME_SUCCESS = 0x52,
    }
    public enum ObjectUpdateType
    {
        PARTIAL = 0,
        MOVEMENT = 1,
        CREATE_OBJECT = 2,
        CREATE_OBJECT2 = 3,
        OUT_OF_RANGE_OBJECTS = 4,
        NEAR_OBJECTS = 5
    };
    [Flags]
    public enum ObjectUpdateFlags
    {
        UPDATEFLAG_NONE = 0x0000,
        UPDATEFLAG_SELF = 0x0001,
        UPDATEFLAG_TRANSPORT = 0x0002,
        UPDATEFLAG_FULLGUID = 0x0004,
        UPDATEFLAG_HIGHGUID = 0x0008,
        UPDATEFLAG_ALL = 0x0010,
        UPDATEFLAG_LIVING = 0x0020,
        UPDATEFLAG_HAS_POSITION = 0x0040
    }
    public enum ChatMsg
    {
        CHAT_MSG_SAY = 0x00,
        CHAT_MSG_PARTY = 0x01,
        CHAT_MSG_RAID = 0x02,
        CHAT_MSG_GUILD = 0x03,
        CHAT_MSG_OFFICER = 0x04,
        CHAT_MSG_YELL = 0x05,
        CHAT_MSG_WHISPER = 0x06,
        CHAT_MSG_WHISPER_INFORM = 0x07,
        CHAT_MSG_EMOTE = 0x08,
        CHAT_MSG_TEXT_EMOTE = 0x09,
        CHAT_MSG_SYSTEM = 0x0A,
        CHAT_MSG_MONSTER_SAY = 0x0B,
        CHAT_MSG_MONSTER_YELL = 0x0C,
        CHAT_MSG_MONSTER_EMOTE = 0x0D,
        CHAT_MSG_CHANNEL = 0x0E,
        CHAT_MSG_CHANNEL_JOIN = 0x0F,
        CHAT_MSG_CHANNEL_LEAVE = 0x10,
        CHAT_MSG_CHANNEL_LIST = 0x11,
        CHAT_MSG_CHANNEL_NOTICE = 0x12,
        CHAT_MSG_CHANNEL_NOTICE_USER = 0x13,
        CHAT_MSG_AFK = 0x14,
        CHAT_MSG_DND = 0x15,
        CHAT_MSG_IGNORED = 0x16,
        CHAT_MSG_SKILL = 0x17,
        CHAT_MSG_LOOT = 0x18,
        CHAT_MSG_MONSTER_WHISPER = 0x1A,
        CHAT_MSG_BG_SYSTEM_NEUTRAL = 0x52,
        CHAT_MSG_BG_SYSTEM_ALLIANCE = 0x53,
        CHAT_MSG_BG_SYSTEM_HORDE = 0x54,
        CHAT_MSG_RAID_LEADER = 0x57,
        CHAT_MSG_RAID_WARNING = 0x58,
        CHAT_MSG_RAID_BOSS_WHISPER = 0x59,
        CHAT_MSG_RAID_BOSS_EMOTE = 0x5A,
        CHAT_MSG_BATTLEGROUND = 0x5C,
        CHAT_MSG_BATTLEGROUND_LEADER = 0x5D,
        CHAT_MSG_MONSTER_PARTY = 0x30, // Arbitrary value to avoid conflicts
    }

    [Flags]
    public enum CharacterFlags : uint
    {
        CHARACTER_FLAG_NONE = 0x00000000,
        CHARACTER_FLAG_UNK1 = 0x00000001,
        CHARACTER_FLAG_UNK2 = 0x00000002,
        CHARACTER_LOCKED_FOR_TRANSFER = 0x00000004,
        CHARACTER_FLAG_UNK4 = 0x00000008,
        CHARACTER_FLAG_UNK5 = 0x00000010,
        CHARACTER_FLAG_UNK6 = 0x00000020,
        CHARACTER_FLAG_UNK7 = 0x00000040,
        CHARACTER_FLAG_UNK8 = 0x00000080,
        CHARACTER_FLAG_UNK9 = 0x00000100,
        CHARACTER_FLAG_UNK10 = 0x00000200,
        CHARACTER_FLAG_HIDE_HELM = 0x00000400,
        CHARACTER_FLAG_HIDE_CLOAK = 0x00000800,
        CHARACTER_FLAG_UNK13 = 0x00001000,
        CHARACTER_FLAG_GHOST = 0x00002000,
        CHARACTER_FLAG_RENAME = 0x00004000,
        CHARACTER_FLAG_UNK16 = 0x00008000,
        CHARACTER_FLAG_UNK17 = 0x00010000,
        CHARACTER_FLAG_UNK18 = 0x00020000,
        CHARACTER_FLAG_UNK19 = 0x00040000,
        CHARACTER_FLAG_UNK20 = 0x00080000,
        CHARACTER_FLAG_UNK21 = 0x00100000,
        CHARACTER_FLAG_UNK22 = 0x00200000,
        CHARACTER_FLAG_UNK23 = 0x00400000,
        CHARACTER_FLAG_UNK24 = 0x00800000,
        CHARACTER_FLAG_LOCKED_BY_BILLING = 0x01000000,
        CHARACTER_FLAG_DECLINED = 0x02000000,
        CHARACTER_FLAG_UNK27 = 0x04000000,
        CHARACTER_FLAG_UNK28 = 0x08000000,
        CHARACTER_FLAG_UNK29 = 0x10000000,
        CHARACTER_FLAG_UNK30 = 0x20000000,
        CHARACTER_FLAG_UNK31 = 0x40000000,
        CHARACTER_FLAG_UNK32 = 0x80000000
    }

    [Flags]
    public enum AtLoginFlags
    {
        AT_LOGIN_NONE = 0x00,
        AT_LOGIN_RENAME = 0x01,
        AT_LOGIN_RESET_SPELLS = 0x02,
        AT_LOGIN_RESET_TALENTS = 0x04,
        // AT_LOGIN_CUSTOMIZE         = 0x08, -- used in post-3.x
        // AT_LOGIN_RESET_PET_TALENTS = 0x10, -- used in post-3.x
        AT_LOGIN_FIRST = 0x20,
    }
    public enum Language : int
    {
        Universal = 0,
        Orcish = 1,
        Darnassian = 2,
        Taurahe = 3,
        Dwarvish = 6,
        Common = 7,
        DemonTongue = 8,
        Titan = 9,
        Thalassian = 10,
        Draconic = 11,
        Kalimag = 12,
        Gnomish = 13,
        Troll = 14,
        Gutterspeak = 33
    }
    public enum PlayerChatTag
    {
        CHAT_TAG_NONE = 0,
        CHAT_TAG_AFK = 1,
        CHAT_TAG_DND = 2,
        CHAT_TAG_GM = 3,
    }
    public enum LuaTarget : byte
    {
        Player,
        Target
    }
    public enum Skills : short
    {
        FROST = 6,
        FIRE = 8,
        ARMS = 26,
        COMBAT = 38,
        SUBTLETY = 39,
        POISONS = 40,
        SWORDS = 43,
        AXES = 44,
        BOWS = 45,
        GUNS = 46,
        BEAST_MASTERY = 50,
        SURVIVAL = 51,
        MACES = 54,
        TWOHAND_SWORDS = 55,
        HOLY = 56,
        SHADOW = 78,
        DEFENSE = 95,
        LANG_COMMON = 98,
        RACIAL_DWARVEN = 101,
        LANG_ORCISH = 109,
        LANG_DWARVEN = 111,
        LANG_DARNASSIAN = 113,
        LANG_TAURAHE = 115,
        DUAL_WIELD = 118,
        RACIAL_TAUREN = 124,
        ORC_RACIAL = 125,
        RACIAL_NIGHT_ELF = 126,
        FIRST_AID = 129,
        FERAL_COMBAT = 134,
        LANG_THALASSIAN = 137,
        STAVES = 136,
        LANG_DRACONIC = 138,
        LANG_DEMON_TONGUE = 139,
        LANG_TITAN = 140,
        LANG_OLD_TONGUE = 141,
        SURVIVAL2 = 142,
        RIDING_HORSE = 148,
        RIDING_WOLF = 149,
        RIDING_RAM = 152,
        RIDING_TIGER = 150,
        SWIMING = 155,
        TWOHAND_MACES = 160,
        UNARMED = 162,
        MARKSMANSHIP = 163,
        BLACKSMITHING = 164,
        LEATHERWORKING = 165,
        ALCHEMY = 171,
        TWOHAND_AXES = 172,
        DAGGERS = 173,
        THROWN = 176,
        HERBALISM = 182,
        GENERIC_DND = 183,
        RETRIBUTION = 184,
        COOKING = 185,
        MINING = 186,
        PET_IMP = 188,
        PET_FELHUNTER = 189,
        TAILORING = 197,
        ENGINERING = 202,
        PET_SPIDER = 203,
        PET_VOIDWALKER = 204,
        PET_SUCCUBUS = 205,
        PET_INFERNAL = 206,
        PET_DOOMGUARD = 207,
        PET_WOLF = 208,
        PET_CAT = 209,
        PET_BEAR = 210,
        PET_BOAR = 211,
        PET_CROCILISK = 212,
        PET_CARRION_BIRD = 213,
        PET_GORILLA = 215,
        PET_CRAB = 214,
        PET_RAPTOR = 217,
        PET_TALLSTRIDER = 218,
        RACIAL_UNDED = 220,
        CROSSBOWS = 226,
        SPEARS = 227,
        WANDS = 228,
        POLEARMS = 229,
        ATTRIBUTE_ENCHANCEMENTS = 230,
        SLAYER_TALENTS = 231,
        MAGIC_TALENTS = 233,
        DEFENSIVE_TALENTS = 234,
        PET_SCORPID = 236,
        ARCANE = 237,
        PET_TURTLE = 251,
        FURY = 256,
        PROTECTION = 257,
        BEAST_TRAINING = 261,
        PROTECTION2 = 267,
        PET_TALENTS = 270,
        PLATE_MAIL = 293,
        ASSASSINATION = 253,
        LANG_GNOMISH = 313,
        LANG_TROLL = 315,
        ENCHANTING = 333,
        DEMONOLOGY = 354,
        AFFLICTION = 355,
        FISHING = 356,
        ENHANCEMENT = 373,
        RESTORATION = 374,
        ELEMENTAL_COMBAT = 375,
        SKINNING = 393,
        LEATHER = 414,
        CLOTH = 415,
        MAIL = 413,
        SHIELD = 433,
        FIST_WEAPONS = 473,
        TRACKING_BEAST = 513,
        TRACKING_HUMANOID = 514,
        TRACKING_DEMON = 516,
        TRACKING_UNDEAD = 517,
        TRACKING_DRAGON = 518,
        TRACKING_ELEMENTAL = 519,
        RIDING_RAPTOR = 533,
        RIDING_MECHANOSTRIDER = 553,
        RIDING_UNDEAD_HORSE = 554,
        RESTORATION2 = 573,
        BALANCE = 574,
        DESTRUCTION = 593,
        HOLY2 = 594,
        DISCIPLINE = 613,
        LOCKPICKING = 633,
        PET_BAT = 653,
        PET_HYENA = 654,
        PET_OWL = 655,
        PET_WIND_SERPENT = 656,
        LANG_GUTTERSPEAK = 673,
        RIDING_KODO = 713,
        RACIAL_TROLL = 733,
        RACIAL_GNOME = 753,
        RACIAL_HUMAN = 754,
        JEWELCRAFTING = 755,
        RACIAL_BLOODELF = 756,
        PET_EVENT_REMOTECONTROL = 758,
        LANG_DRAENEI = 759,
        DRAENEI_RACIAL = 760,
        PET_FELGUARD = 761,
        RIDING = 762,
        PET_DRAGONHAWK = 763,
        PET_NETHER_RAY = 764,
        PET_SPOREBAT = 765,
        PET_WARP_STALKER = 766,
        PET_RAVAGER = 767,
        PET_SERPENT = 768,
        INTERNAL = 769,
    }
    public enum ItemQuality
    {
        Poor = 0,
        Common = 1,
        Uncommon = 2,
        Rare = 3,
        Epic = 4,
        Legendary = 5,
    }
    public enum MerchantState
    {
        SHOW = 1,
        CLOSE = 2
    }
    public enum LootState
    {
        SHOW = 1,
        CLOSE = 2
    }
    public enum Class : byte
    {
        Warrior = 1,
        Paladin = 2,
        Hunter = 3,
        Rogue = 4,
        Priest = 5,
        Shaman = 7,
        Mage = 8,
        Warlock = 9,
        Druid = 11
    }
    public enum Gender : byte
    {
        Male = 0,
        Female = 1,
        None = 2
    }
    public enum Race
    {
        [Description("None")]
        None,
        [Description("Human")]
        Human,
        [Description("Orc")]
        Orc,
        [Description("Dwarf")]
        Dwarf,
        [Description("Night Elf")]
        NightElf,
        [Description("Undead")]
        Undead,
        [Description("Tauren")]
        Tauren,
        [Description("Gnome")]
        Gnome,
        [Description("Troll")]
        Troll,
    }
    public enum Role
    {
        Tank,
        Healer,
        DPS
    }
    public enum TargetMarker : byte
    {
        [Description("None")]
        None,
        [Description("Star")]
        Star,
        [Description("Circle")]
        Circle,
        [Description("Diamond")]
        Diamond,
        [Description("Triangle")]
        Triangle,
        [Description("Moon")]
        Moon,
        [Description("Square")]
        Square,
        [Description("Cross")]
        Cross,
        [Description("Skull")]
        Skull
    }
    public enum ItemClass
    {
        Consumable,
        Bag,
        SoulBag,
        HerbBag,
        EnchantingBag,
        EngineeringBag,
        AxeOneHand,
        AxeTwoHand,
        Bow,
        Gun,
        MaceOneHand,
        MaceTwoHand,
        Polearm,
        SwordOneHand,
        SwordTwoHand,
        Staff,
        Fist,
        MiscWeapon,
        Dagger,
        Thrown,
        Spear,
        Crossbow,
        Wand,
        FishingPole,
        MiscArmor,
        Cloth,
        Leather,
        Mail,
        Plate,
        Shield,
        Libram,
        Idol,
        Totem,
        Reagent,
        Arrow,
        Bullet,
        TradeGood,
        Parts,
        Explosives,
        Devices,
        ClassBook,
        LeatherworkingRecipe,
        TailoringRecipe,
        EngineeringRecipe,
        BlacksmithingRecipe,
        CookingRecipe,
        AlchemyRecipe,
        FirstAidRecipe,
        EnchantingRecipe,
        FishingRecipe,
        Quiver,
        AmmoPouch,
        Quest,
        Key,
        Lockpick,
        Junk
    }
    public enum StatType
    {
        NoStats = 0,
        Health = 1,
        Agility = 3,
        Strength = 4,
        Intellect = 5,
        Spirit = 6,
        Stamina = 7,
    }
    public enum DamageType
    {
        Physical = 0,
        Holy = 1,
        Fire = 2,
        Nature = 3,
        Frost = 4,
        Shadow = 5,
        Arcane = 6
    }
    public enum SpellTrigger
    {
        OnUse = 0,
        OnEquip = 1,
        ChanceOnHit = 2,
        Soulstone = 4,
        OnUseWithoutDelay = 5
    }
    public enum Bonding
    {
        NoBinding = 0,
        BindOnPickup = 1,
        BindOnEquip = 2,
        BindOnUse = 3,
        QuestItem = 4
    }
    public enum InventoryType : byte
    {
        NonEquippable = 0,
        Head = 1,
        Neck = 2,
        Shoulders = 3,
        Shirt = 4,
        Chest = 5,
        Waist = 6,
        Legs = 7,
        Feet = 8,
        Wrists = 9,
        Hands = 10,
        Finger = 11,
        Trinket = 12,
        Weapon = 13,
        Shield = 14,
        Ranged = 15,
        Cloak = 16,
        TwoHander = 17,
        Bag = 18,
        Tabard = 19,
        Robe = 20,
        MainHand = 21,
        Offhand = 22,
        Holdable = 23,
        Ammo = 24,
        Thrown = 25,
        RangedRight = 26,
        Quiver = 27,
        Relic = 28,
    }
    public enum EffectType
    {
        None,
        Magic,
        Poison,
        Curse,
        Disease
    }
    [Flags]
    public enum ControlBits
    {
        Nothing = 0x00000000,
        CtmWalk = 0x00001000,
        Front = 0x00000010,
        Back = 0x00000020,
        Jump = 0x00002000,
        Left = 0x00000100,
        Right = 0x00000200,
        MovingFrontOrBack = 0x00010000,
        StrafeLeft = 0x00000040,
        StrafeRight = 0x00000080,
        Strafing = 0x00020000,
        Turning = 0x00040000
    }
    public enum CreatureRank
    {
        Normal = 0,
        Elite = 1,
        RareElite = 2,
        Boss = 3,
        Rare = 4
    }
    public enum CreatureType
    {
        Beast = 1,
        Dragonkin = 2,
        Demon = 3,
        Elemental = 4,
        Giant = 5,
        Undead = 6,
        Humanoid = 7,
        Critter = 8,
        Mechanical = 9,
        NotSpecified = 10,
        Totem = 11,
    }
    public enum EquipSlot
    {
        Ammo = 0,
        Head = 1,
        Neck = 2,
        Shoulders = 3,
        Shirt = 4,
        Chest = 5,
        Waist = 6,
        Legs = 7,
        Feet = 8,
        Wrist = 9,
        Hands = 10,
        Finger1 = 11,
        Finger2 = 12,
        Trinket1 = 13,
        Trinket2 = 14,
        Back = 15,
        MainHand = 16,
        OffHand = 17,
        Ranged = 18,
        Tabard = 19,
        Bag0 = 20,
        Bag1 = 21,
        Bag2 = 22,
        Bag3 = 23,
    }
    public enum LoginStates
    {
        login,
        charselect
    }
    public enum CreateCharacterResult : byte
    {
        Success,
        ErrorNameInUse,
        ErrorCreationFailed
    }
    public enum DeleteCharacterResult : byte
    {
        Success,
        ErrorCharacterNotFound,
        ErrorDeletionFailed
    }
    public enum ItemSubclass
    {
        Consumable,
        Potion,
        Elixir,
        Flask,
        Scroll,
        FoodAndDrink,
        ItemEnhancement,
        Bandage,
        Other,
        Container,
        SoulBag,
        HerbBag,
        EnchantingBag,
        EngineeringBag,
        GemBag,
        MiningBag,
        LeatherworkingBag,
        InscriptionBag,
        OneHandedAxe,
        TwoHandedAxe,
        Bow,
        Gun,
        OneHandedMace,
        TwoHandedMace,
        Polearm,
        OneHandedSword,
        TwoHandedSword,
        Obsolete,
        Staff,
        OneHandedExotic,
        TwoHandedExotic,
        FistWeapon,
        MiscellaneousWeapon,
        Dagger,
        Thrown,
        Spear,
        Crossbow,
        Wand,
        FishingPole,
        RedJewel,
        BlueJewel,
        YellowJewel,
        PurpleJewel,
        GreenJewel,
        OrangeJewel,
        MetaJewel,
        SimpleJewel,
        PrismaticJewel,
        MiscellaneousArmor,
        Cloth,
        Leather,
        Mail,
        Plate,
        BucklerOBSOLETE,
        Shield,
        Libram,
        Idol,
        Totem,
        Sigil,
        Reagent,
        WandOBSOLETE,
        BoltOBSOLETE,
        Arrow,
        Bullet,
        ThrownOBSOLETE,
        TradeGood,
        Parts,
        Explosives,
        Devices,
        CraftingJewelcrafting,
        CraftingCloth,
        CraftingLeather,
        CraftingMetalAndStone,
        CraftingMeat,
        CraftingHerb,
        CraftingElemental,
        CraftingOther,
        CraftingEnchanting,
        CraftingMaterials,
        CraftingArmorEnchantment,
        CraftingWeaponEnchantment,
        GenericOBSOLETE,
        RecipeBook,
        RecipeLeatherworking,
        RecipeTailoring,
        RecipeEngineering,
        RecipeBlacksmithing,
        RecipeCooking,
        RecipeAlchemy,
        RecipeFirstAid,
        RecipeEnchanting,
        RecipeFishing,
        RecipeJewelcrafting,
        MoneyOBSOLETE,
        Quiver1OBSOLETE,
        Quiver2OBSOLETE,
        Quiver,
        AmmoPouch,
        Quest,
        Key,
        Lockpick,
        Permanent,
        MiscJunk,
        MiscReagent,
        MiscPet,
        MiscHoliday,
        MiscOther,
        MiscMount
    }
    public enum TextEmote
    {
        TEXTEMOTE_AGREE = 1,
        TEXTEMOTE_AMAZE = 2,
        TEXTEMOTE_ANGRY = 3,
        TEXTEMOTE_APOLOGIZE = 4,
        TEXTEMOTE_APPLAUD = 5,
        TEXTEMOTE_BASHFUL = 6,
        TEXTEMOTE_BECKON = 7,
        TEXTEMOTE_BEG = 8,
        TEXTEMOTE_BITE = 9,
        TEXTEMOTE_BLEED = 10,
        TEXTEMOTE_BLINK = 11,
        TEXTEMOTE_BLUSH = 12,
        TEXTEMOTE_BONK = 13,
        TEXTEMOTE_BORED = 14,
        TEXTEMOTE_BOUNCE = 15,
        TEXTEMOTE_BRB = 16,
        TEXTEMOTE_BOW = 17,
        TEXTEMOTE_BURP = 18,
        TEXTEMOTE_BYE = 19,
        TEXTEMOTE_CACKLE = 20,
        TEXTEMOTE_CHEER = 21,
        TEXTEMOTE_CHICKEN = 22,
        TEXTEMOTE_CHUCKLE = 23,
        TEXTEMOTE_CLAP = 24,
        TEXTEMOTE_CONFUSED = 25,
        TEXTEMOTE_CONGRATULATE = 26,
        TEXTEMOTE_COUGH = 27,
        TEXTEMOTE_COWER = 28,
        TEXTEMOTE_CRACK = 29,
        TEXTEMOTE_CRINGE = 30,
        TEXTEMOTE_CRY = 31,
        TEXTEMOTE_CURIOUS = 32,
        TEXTEMOTE_CURTSEY = 33,
        TEXTEMOTE_DANCE = 34,
        TEXTEMOTE_DRINK = 35,
        TEXTEMOTE_DROOL = 36,
        TEXTEMOTE_EAT = 37,
        TEXTEMOTE_EYE = 38,
        TEXTEMOTE_FART = 39,
        TEXTEMOTE_FIDGET = 40,
        TEXTEMOTE_FLEX = 41,
        TEXTEMOTE_FROWN = 42,
        TEXTEMOTE_GASP = 43,
        TEXTEMOTE_GAZE = 44,
        TEXTEMOTE_GIGGLE = 45,
        TEXTEMOTE_GLARE = 46,
        TEXTEMOTE_GLOAT = 47,
        TEXTEMOTE_GREET = 48,
        TEXTEMOTE_GRIN = 49,
        TEXTEMOTE_GROAN = 50,
        TEXTEMOTE_GROVEL = 51,
        TEXTEMOTE_GUFFAW = 52,
        TEXTEMOTE_HAIL = 53,
        TEXTEMOTE_HAPPY = 54,
        TEXTEMOTE_HELLO = 55,
        TEXTEMOTE_HUG = 56,
        TEXTEMOTE_HUNGRY = 57,
        TEXTEMOTE_KISS = 58,
        TEXTEMOTE_KNEEL = 59,
        TEXTEMOTE_LAUGH = 60,
        TEXTEMOTE_LAYDOWN = 61,
        TEXTEMOTE_MESSAGE = 62,
        TEXTEMOTE_MOAN = 63,
        TEXTEMOTE_MOON = 64,
        TEXTEMOTE_MOURN = 65,
        TEXTEMOTE_NO = 66,
        TEXTEMOTE_NOD = 67,
        TEXTEMOTE_NOSEPICK = 68,
        TEXTEMOTE_PANIC = 69,
        TEXTEMOTE_PEER = 70,
        TEXTEMOTE_PLEAD = 71,
        TEXTEMOTE_POINT = 72,
        TEXTEMOTE_POKE = 73,
        TEXTEMOTE_PRAY = 74,
        TEXTEMOTE_ROAR = 75,
        TEXTEMOTE_ROFL = 76,
        TEXTEMOTE_RUDE = 77,
        TEXTEMOTE_SALUTE = 78,
        TEXTEMOTE_SCRATCH = 79,
        TEXTEMOTE_SEXY = 80,
        TEXTEMOTE_SHAKE = 81,
        TEXTEMOTE_SHOUT = 82,
        TEXTEMOTE_SHRUG = 83,
        TEXTEMOTE_SHY = 84,
        TEXTEMOTE_SIGH = 85,
        TEXTEMOTE_SIT = 86,
        TEXTEMOTE_SLEEP = 87,
        TEXTEMOTE_SNARL = 88,
        TEXTEMOTE_SPIT = 89,
        TEXTEMOTE_STARE = 90,
        TEXTEMOTE_SURPRISED = 91,
        TEXTEMOTE_SURRENDER = 92,
        TEXTEMOTE_TALK = 93,
        TEXTEMOTE_TALKEX = 94,
        TEXTEMOTE_TALKQ = 95,
        TEXTEMOTE_TAP = 96,
        TEXTEMOTE_THANK = 97,
        TEXTEMOTE_THREATEN = 98,
        TEXTEMOTE_TIRED = 99,
        TEXTEMOTE_VICTORY = 100,
        TEXTEMOTE_WAVE = 101,
        TEXTEMOTE_WELCOME = 102,
        TEXTEMOTE_WHINE = 103,
        TEXTEMOTE_WHISTLE = 104,
        TEXTEMOTE_WORK = 105,
        TEXTEMOTE_YAWN = 106,
        TEXTEMOTE_BOGGLE = 107,
        TEXTEMOTE_CALM = 108,
        TEXTEMOTE_COLD = 109,
        TEXTEMOTE_COMFORT = 110,
        TEXTEMOTE_CUDDLE = 111,
        TEXTEMOTE_DUCK = 112,
        TEXTEMOTE_INSULT = 113,
        TEXTEMOTE_INTRODUCE = 114,
        TEXTEMOTE_JK = 115,
        TEXTEMOTE_LICK = 116,
        TEXTEMOTE_LISTEN = 117,
        TEXTEMOTE_LOST = 118,
        TEXTEMOTE_MOCK = 119,
        TEXTEMOTE_PONDER = 120,
        TEXTEMOTE_POUNCE = 121,
        TEXTEMOTE_PRAISE = 122,
        TEXTEMOTE_PURR = 123,
        TEXTEMOTE_PUZZLE = 124,
        TEXTEMOTE_RAISE = 125,
        TEXTEMOTE_READY = 126,
        TEXTEMOTE_SHIMMY = 127,
        TEXTEMOTE_SHIVER = 128,
        TEXTEMOTE_SHOO = 129,
        TEXTEMOTE_SLAP = 130,
        TEXTEMOTE_SMIRK = 131,
        TEXTEMOTE_SNIFF = 132,
        TEXTEMOTE_SNUB = 133,
        TEXTEMOTE_SOOTHE = 134,
        TEXTEMOTE_STINK = 135,
        TEXTEMOTE_TAUNT = 136,
        TEXTEMOTE_TEASE = 137,
        TEXTEMOTE_THIRSTY = 138,
        TEXTEMOTE_VETO = 139,
        TEXTEMOTE_SNICKER = 140,
        TEXTEMOTE_STAND = 141,
        TEXTEMOTE_TICKLE = 142,
        TEXTEMOTE_VIOLIN = 143,
        TEXTEMOTE_SMILE = 163,
        TEXTEMOTE_RASP = 183,
        TEXTEMOTE_PITY = 203,
        TEXTEMOTE_GROWL = 204,
        TEXTEMOTE_BARK = 205,
        TEXTEMOTE_SCARED = 223,
        TEXTEMOTE_FLOP = 224,
        TEXTEMOTE_LOVE = 225,
        TEXTEMOTE_MOO = 226,
        TEXTEMOTE_OPENFIRE = 327,
        TEXTEMOTE_FLIRT = 328,
        TEXTEMOTE_JOKE = 329,
        TEXTEMOTE_COMMEND = 243,
        TEXTEMOTE_WINK = 363,
        TEXTEMOTE_PAT = 364,
        TEXTEMOTE_SERIOUS = 365,
        TEXTEMOTE_MOUNTSPECIAL = 366,
        TEXTEMOTE_GOODLUCK = 367,
        TEXTEMOTE_BLAME = 368,
        TEXTEMOTE_BLANK = 369,
        TEXTEMOTE_BRANDISH = 370,
        TEXTEMOTE_BREATH = 371,
        TEXTEMOTE_DISAGREE = 372,
        TEXTEMOTE_DOUBT = 373,
        TEXTEMOTE_EMBARRASS = 374,
        TEXTEMOTE_ENCOURAGE = 375,
        TEXTEMOTE_ENEMY = 376,
        TEXTEMOTE_EYEBROW = 377,
        TEXTEMOTE_TOAST = 378
    }
    public enum Emote
    {
        EMOTE_ONESHOT_NONE = 0,
        EMOTE_ONESHOT_TALK = 1,
        EMOTE_ONESHOT_BOW = 2,
        EMOTE_ONESHOT_WAVE = 3,
        EMOTE_ONESHOT_CHEER = 4,
        EMOTE_ONESHOT_EXCLAMATION = 5,
        EMOTE_ONESHOT_QUESTION = 6,
        EMOTE_ONESHOT_EAT = 7,
        EMOTE_STATE_DANCE = 10,
        EMOTE_ONESHOT_LAUGH = 11,
        EMOTE_STATE_SLEEP = 12,
        EMOTE_STATE_SIT = 13,
        EMOTE_ONESHOT_RUDE = 14,
        EMOTE_ONESHOT_ROAR = 15,
        EMOTE_ONESHOT_KNEEL = 16,
        EMOTE_ONESHOT_KISS = 17,
        EMOTE_ONESHOT_CRY = 18,
        EMOTE_ONESHOT_CHICKEN = 19,
        EMOTE_ONESHOT_BEG = 20,
        EMOTE_ONESHOT_APPLAUD = 21,
        EMOTE_ONESHOT_SHOUT = 22,
        EMOTE_ONESHOT_FLEX = 23,
        EMOTE_ONESHOT_SHY = 24,
        EMOTE_ONESHOT_POINT = 25,
        EMOTE_STATE_STAND = 26,
        EMOTE_STATE_READYUNARMED = 27,
        EMOTE_STATE_WORK_SHEATHED = 28,
        EMOTE_STATE_POINT = 29,
        EMOTE_STATE_NONE = 30,
        EMOTE_ONESHOT_WOUND = 33,
        EMOTE_ONESHOT_WOUNDCRITICAL = 34,
        EMOTE_ONESHOT_ATTACKUNARMED = 35,
        EMOTE_ONESHOT_ATTACK1H = 36,
        EMOTE_ONESHOT_ATTACK2HTIGHT = 37,
        EMOTE_ONESHOT_ATTACK2HLOOSE = 38,
        EMOTE_ONESHOT_PARRYUNARMED = 39,
        EMOTE_ONESHOT_PARRYSHIELD = 43,
        EMOTE_ONESHOT_READYUNARMED = 44,
        EMOTE_ONESHOT_READY1H = 45,
        EMOTE_ONESHOT_READYBOW = 48,
        EMOTE_ONESHOT_SPELLPRECAST = 50,
        EMOTE_ONESHOT_SPELLCAST = 51,
        EMOTE_ONESHOT_BATTLEROAR = 53,
        EMOTE_ONESHOT_SPECIALATTACK1H = 54,
        EMOTE_ONESHOT_KICK = 60,
        EMOTE_ONESHOT_ATTACKTHROWN = 61,
        EMOTE_STATE_STUN = 64,
        EMOTE_STATE_DEAD = 65,
        EMOTE_ONESHOT_SALUTE = 66,
        EMOTE_STATE_KNEEL = 68,
        EMOTE_STATE_USESTANDING = 69,
        EMOTE_ONESHOT_WAVE_NOSHEATHE = 70,
        EMOTE_ONESHOT_CHEER_NOSHEATHE = 71,
        EMOTE_ONESHOT_EAT_NOSHEATHE = 92,
        EMOTE_STATE_STUN_NOSHEATHE = 93,
        EMOTE_ONESHOT_DANCE = 94,
        EMOTE_ONESHOT_SALUTE_NOSHEATH = 113,
        EMOTE_STATE_USESTANDING_NOSHEATHE = 133,
        EMOTE_ONESHOT_LAUGH_NOSHEATHE = 153,
        EMOTE_STATE_WORK = 173,
        EMOTE_STATE_SPELLPRECAST = 193,
        EMOTE_ONESHOT_READYRIFLE = 213,
        EMOTE_STATE_READYRIFLE = 214,
        EMOTE_STATE_WORK_MINING = 233,
        EMOTE_STATE_WORK_CHOPWOOD = 234,
        EMOTE_STATE_APPLAUD = 253,
        EMOTE_ONESHOT_LIFTOFF = 254,
        EMOTE_ONESHOT_YES = 273,
        EMOTE_ONESHOT_NO = 274,
        EMOTE_ONESHOT_TRAIN = 275,
        EMOTE_ONESHOT_LAND = 293,
        EMOTE_STATE_AT_EASE = 313,
        EMOTE_STATE_READY1H = 333,
        EMOTE_STATE_SPELLKNEELSTART = 353,
        EMOTE_STATE_SUBMERGED = 373,
        EMOTE_ONESHOT_SUBMERGE = 374,
        EMOTE_STATE_READY2H = 375,
        EMOTE_STATE_READYBOW = 376,
        EMOTE_ONESHOT_MOUNTSPECIAL = 377,
        EMOTE_STATE_TALK = 378,
        EMOTE_STATE_FISHING = 379,
        EMOTE_ONESHOT_FISHING = 380,
        EMOTE_ONESHOT_LOOT = 381,
        EMOTE_STATE_WHIRLWIND = 382,
        EMOTE_STATE_DROWNED = 383,
        EMOTE_STATE_HOLD_BOW = 384,
        EMOTE_STATE_HOLD_RIFLE = 385,
        EMOTE_STATE_HOLD_THROWN = 386,
        EMOTE_ONESHOT_DROWN = 387,
        EMOTE_ONESHOT_STOMP = 388,
        EMOTE_ONESHOT_ATTACKOFF = 389,
        EMOTE_ONESHOT_ATTACKOFFPIERCE = 390,
        EMOTE_STATE_ROAR = 391,
        EMOTE_STATE_LAUGH = 392,
        EMOTE_ONESHOT_CREATURE_SPECIAL = 393,
        EMOTE_ONESHOT_JUMPLANDRUN = 394,
        EMOTE_ONESHOT_JUMPEND = 395,
        EMOTE_ONESHOT_TALK_NOSHEATHE = 396,
        EMOTE_ONESHOT_POINT_NOSHEATHE = 397,
        EMOTE_STATE_CANNIBALIZE = 398,
        EMOTE_ONESHOT_JUMPSTART = 399,
        EMOTE_STATE_DANCESPECIAL = 400,
        EMOTE_ONESHOT_DANCESPECIAL = 401,
        EMOTE_ONESHOT_CUSTOMSPELL01 = 402,
        EMOTE_ONESHOT_CUSTOMSPELL02 = 403,
        EMOTE_ONESHOT_CUSTOMSPELL03 = 404,
        EMOTE_ONESHOT_CUSTOMSPELL04 = 405,
        EMOTE_ONESHOT_CUSTOMSPELL05 = 406,
        EMOTE_ONESHOT_CUSTOMSPELL06 = 407,
        EMOTE_ONESHOT_CUSTOMSPELL07 = 408,
        EMOTE_ONESHOT_CUSTOMSPELL08 = 409,
        EMOTE_ONESHOT_CUSTOMSPELL09 = 410,
        EMOTE_ONESHOT_CUSTOMSPELL10 = 411,
        EMOTE_STATE_EXCLAIM = 412,
        EMOTE_STATE_SIT_CHAIR_MED = 415,
        EMOTE_STATE_SPELLEFFECT_HOLD = 422,
        EMOTE_STATE_EAT_NO_SHEATHE = 423
    }
    public enum BuyBankSlotResult
    {
        ERR_BANKSLOT_FAILED_TOO_MANY = 0,
        ERR_BANKSLOT_INSUFFICIENT_FUNDS = 1,
        ERR_BANKSLOT_NOTBANKER = 2,
        ERR_BANKSLOT_OK = 3
    }
    public enum PlayerSpellState
    {
        PLAYERSPELL_UNCHANGED = 0,
        PLAYERSPELL_CHANGED = 1,
        PLAYERSPELL_NEW = 2,
        PLAYERSPELL_REMOVED = 3
    }
    public enum RaidGroupError
    {
        ERR_RAID_GROUP_REQUIRED = 1,
        ERR_RAID_GROUP_FULL = 2
    }
    public enum DrunkenState
    {
        DRUNKEN_SOBER = 0,
        DRUNKEN_TIPSY = 1,
        DRUNKEN_DRUNK = 2,
        DRUNKEN_SMASHED = 3
    }
    public enum TYPE_OF_HONOR
    {
        HONORABLE = 1,
        DISHONORABLE = 2,
    }
    public enum HonorKillState
    {
        HK_NEW = 0,
        HK_OLD = 1,
        HK_DELETED = 2,
        HK_UNCHANGED = 3
    }
    public enum PlayerFlags
    {
        PLAYER_FLAGS_NONE = 0x00000000,
        PLAYER_FLAGS_GROUP_LEADER = 0x00000001,
        PLAYER_FLAGS_AFK = 0x00000002,
        PLAYER_FLAGS_DND = 0x00000004,
        PLAYER_FLAGS_GM = 0x00000008,
        PLAYER_FLAGS_GHOST = 0x00000010,
        PLAYER_FLAGS_RESTING = 0x00000020,
        PLAYER_FLAGS_UNK7 = 0x00000040,       // admin?
        PLAYER_FLAGS_FFA_PVP = 0x00000080,
        PLAYER_FLAGS_CONTESTED_PVP = 0x00000100,       // Player has been involved in a PvP combat and will be attacked by contested guards
        PLAYER_FLAGS_IN_PVP = 0x00000200,
        PLAYER_FLAGS_HIDE_HELM = 0x00000400,
        PLAYER_FLAGS_HIDE_CLOAK = 0x00000800,
        PLAYER_FLAGS_PARTIAL_PLAY_TIME = 0x00001000,       // played long time
        PLAYER_FLAGS_NO_PLAY_TIME = 0x00002000,       // played too long time
        PLAYER_FLAGS_UNK15 = 0x00004000,
        PLAYER_FLAGS_UNK16 = 0x00008000,       // strange visual effect (2.0.1), looks like PLAYER_FLAGS_GHOST flag
        PLAYER_FLAGS_SANCTUARY = 0x00010000,       // player entered sanctuary
        PLAYER_FLAGS_TAXI_BENCHMARK = 0x00020000,       // taxi benchmark mode (on/off) (2.0.1)
        PLAYER_FLAGS_PVP_TIMER = 0x00040000,       // 3.0.2, pvp timer active (after you disable pvp manually)
        PLAYER_FLAGS_XP_USER_DISABLED = 0x02000000,
    }
    public enum PlayerFieldByteFlags
    {
        PLAYER_FIELD_BYTE_TRACK_STEALTHED = 0x02,
        PLAYER_FIELD_BYTE_RELEASE_TIMER = 0x08,             // Display time till auto release spirit
        PLAYER_FIELD_BYTE_NO_RELEASE_WINDOW = 0x10              // Display no "release spirit" window at all
    }
    public enum PlayerFieldByte2Flags
    {
        PLAYER_FIELD_BYTE2_NONE = 0x00,
        PLAYER_FIELD_BYTE2_DETECT_AMORE_0 = 0x02,            // SPELL_AURA_DETECT_AMORE, not used as value and maybe not relcted to, but used in code as base for mask apply
        PLAYER_FIELD_BYTE2_DETECT_AMORE_1 = 0x04,            // SPELL_AURA_DETECT_AMORE value 1
        PLAYER_FIELD_BYTE2_DETECT_AMORE_2 = 0x08,            // SPELL_AURA_DETECT_AMORE value 2
        PLAYER_FIELD_BYTE2_DETECT_AMORE_3 = 0x10,            // SPELL_AURA_DETECT_AMORE value 3
        PLAYER_FIELD_BYTE2_STEALTH = 0x20,
        PLAYER_FIELD_BYTE2_INVISIBILITY_GLOW = 0x40
    }
    public enum MirrorTimerType
    {
        FATIGUE_TIMER = 0,
        BREATH_TIMER = 1,
        FIRE_TIMER = 2     // probably mistake. More like to FEIGN_DEATH_TIMER
    }
    public enum PlayerExtraFlags
    {
        // gm abilities
        PLAYER_EXTRA_GM_ON = 0x0001,
        PLAYER_EXTRA_GM_ACCEPT_TICKETS = 0x0002,
        PLAYER_EXTRA_ACCEPT_WHISPERS = 0x0004,
        PLAYER_EXTRA_TAXICHEAT = 0x0008,
        PLAYER_EXTRA_GM_INVISIBLE = 0x0010,
        PLAYER_EXTRA_GM_CHAT = 0x0020,               // Show GM badge in chat messages
        PLAYER_EXTRA_AUCTION_NEUTRAL = 0x0040,
        PLAYER_EXTRA_AUCTION_ENEMY = 0x0080,               // overwrite PLAYER_EXTRA_AUCTION_NEUTRAL

        // other states
        PLAYER_EXTRA_PVP_DEATH = 0x0100                // store PvP death status until corpse creating.
    }
    public enum QuestSlotOffsets
    {
        QUEST_ID_OFFSET = 0,
        QUEST_COUNT_STATE_OFFSET = 1,                        // including counters 6bits+6bits+6bits+6bits + state 8bits
        QUEST_TIME_OFFSET = 2
    }
    public enum QuestSlotStateMask
    {
        QUEST_STATE_NONE = 0x0000,
        QUEST_STATE_COMPLETE = 0x0001,
        QUEST_STATE_FAIL = 0x0002
    }
    public enum SkillUpdateState
    {
        SKILL_UNCHANGED = 0,
        SKILL_CHANGED = 1,
        SKILL_NEW = 2,
        SKILL_DELETED = 3
    }
    public enum PlayerSlots
    {
        // first slot for item stored (in any way in player m_items data)
        PLAYER_SLOT_START = 0,
        // last+1 slot for item stored (in any way in player m_items data)
        PLAYER_SLOT_END = 118,
        PLAYER_SLOTS_COUNT = PLAYER_SLOT_END - PLAYER_SLOT_START
    }
    public enum EquipmentSlots                                         // 19 slots
    {
        EQUIPMENT_SLOT_START = 0,
        EQUIPMENT_SLOT_HEAD = EQUIPMENT_SLOT_START,
        EQUIPMENT_SLOT_NECK = 1,
        EQUIPMENT_SLOT_SHOULDERS = 2,
        EQUIPMENT_SLOT_BODY = 3,
        EQUIPMENT_SLOT_CHEST = 4,
        EQUIPMENT_SLOT_WAIST = 5,
        EQUIPMENT_SLOT_LEGS = 6,
        EQUIPMENT_SLOT_FEET = 7,
        EQUIPMENT_SLOT_WRISTS = 8,
        EQUIPMENT_SLOT_HANDS = 9,
        EQUIPMENT_SLOT_FINGER1 = 10,
        EQUIPMENT_SLOT_FINGER2 = 11,
        EQUIPMENT_SLOT_TRINKET1 = 12,
        EQUIPMENT_SLOT_TRINKET2 = 13,
        EQUIPMENT_SLOT_BACK = 14,
        EQUIPMENT_SLOT_MAINHAND = 15,
        EQUIPMENT_SLOT_OFFHAND = 16,
        EQUIPMENT_SLOT_RANGED = 17,
        EQUIPMENT_SLOT_TABARD = 18,
        EQUIPMENT_SLOT_END = 19
    }
    public enum InventorySlots                                         // 4 slots
    {
        INVENTORY_SLOT_BAG_START = 19,
        INVENTORY_SLOT_BAG_END = 23
    }
    public enum InventoryPackSlots                                     // 16 slots
    {
        INVENTORY_SLOT_ITEM_START = 23,
        INVENTORY_SLOT_ITEM_END = 39
    }
    public enum BankItemSlots                                          // 28 slots
    {
        BANK_SLOT_ITEM_START = 39,
        BANK_SLOT_ITEM_END = 63
    }
    public enum BankBagSlots                                           // 7 slots
    {
        BANK_SLOT_BAG_START = 63,
        BANK_SLOT_BAG_END = 69
    }
    public enum BuyBackSlots                                           // 12 slots
    {
        // stored in m_buybackitems
        BUYBACK_SLOT_START = 69,
        BUYBACK_SLOT_END = 81
    }
    public enum KeyRingSlots                                           // 32 slots
    {
        KEYRING_SLOT_START = 81,
        KEYRING_SLOT_END = 97
    }
    public enum TradeSlots
    {
        TRADE_SLOT_COUNT = 7,
        TRADE_SLOT_TRADED_COUNT = 6,
        TRADE_SLOT_NONTRADED = 6
    }
    public enum TransferAbortReason
    {
        TRANSFER_ABORT_MAX_PLAYERS = 0x01,     // Transfer Aborted: instance is full
        TRANSFER_ABORT_NOT_FOUND = 0x02,     // Transfer Aborted: instance not found
        TRANSFER_ABORT_TOO_MANY_INSTANCES = 0x03,     // You have entered too many instances recently.
        TRANSFER_ABORT_SILENTLY = 0x04,     // no message shown the same effect give values above 5
        TRANSFER_ABORT_ZONE_IN_COMBAT = 0x05,     // Unable to zone in while an encounter is in progress.
    }
    public enum InstanceResetWarningType
    {
        RAID_INSTANCE_WARNING_HOURS = 1,                    // WARNING! %s is scheduled to reset in %d hour(s).
        RAID_INSTANCE_WARNING_MIN = 2,                    // WARNING! %s is scheduled to reset in %d minute(s)!
        RAID_INSTANCE_WARNING_MIN_SOON = 3,                    // WARNING! %s is scheduled to reset in %d minute(s). Please exit the zone or you will be returned to your bind location!
        RAID_INSTANCE_WELCOME = 4                     // Welcome to %s. This raid instance is scheduled to reset in %s.
    }
    public enum RestType
    {
        REST_TYPE_NO = 0,
        REST_TYPE_IN_TAVERN = 1,
        REST_TYPE_IN_CITY = 2
    }
    public enum DuelCompleteType
    {
        DUEL_INTERRUPTED = 0,
        DUEL_WON = 1,
        DUEL_FLED = 2
    }
    public enum TeleportToOptions
    {
        TELE_TO_GM_MODE = 0x01,
        TELE_TO_NOT_LEAVE_TRANSPORT = 0x02,
        TELE_TO_NOT_LEAVE_COMBAT = 0x04,
        TELE_TO_NOT_UNSUMMON_PET = 0x08,
        TELE_TO_SPELL = 0x10,
    }
    public enum EnvironmentalDamageType
    {
        DAMAGE_EXHAUSTED = 0,
        DAMAGE_DROWNING = 1,
        DAMAGE_FALL = 2,
        DAMAGE_LAVA = 3,
        DAMAGE_SLIME = 4,
        DAMAGE_FIRE = 5,
        DAMAGE_FALL_TO_VOID = 6                         // custom case for fall without durability loss
    }
    public enum PlayedTimeIndex
    {
        PLAYED_TIME_TOTAL = 0,
        PLAYED_TIME_LEVEL = 1
    }
    public enum PlayerLoginQueryIndex
    {
        PLAYER_LOGIN_QUERY_LOADFROM,
        PLAYER_LOGIN_QUERY_LOADGROUP,
        PLAYER_LOGIN_QUERY_LOADBOUNDINSTANCES,
        PLAYER_LOGIN_QUERY_LOADAURAS,
        PLAYER_LOGIN_QUERY_LOADSPELLS,
        PLAYER_LOGIN_QUERY_LOADQUESTSTATUS,
        PLAYER_LOGIN_QUERY_LOADHONORCP,
        PLAYER_LOGIN_QUERY_LOADREPUTATION,
        PLAYER_LOGIN_QUERY_LOADINVENTORY,
        PLAYER_LOGIN_QUERY_LOADITEMLOOT,
        PLAYER_LOGIN_QUERY_LOADACTIONS,
        PLAYER_LOGIN_QUERY_LOADSOCIALLIST,
        PLAYER_LOGIN_QUERY_LOADHOMEBIND,
        PLAYER_LOGIN_QUERY_LOADSPELLCOOLDOWNS,
        PLAYER_LOGIN_QUERY_LOADGUILD,
        PLAYER_LOGIN_QUERY_LOADBGDATA,
        PLAYER_LOGIN_QUERY_LOADSKILLS,
        PLAYER_LOGIN_QUERY_LOADMAILS,
        PLAYER_LOGIN_QUERY_LOADMAILEDITEMS,

        MAX_PLAYER_LOGIN_QUERY
    }
    public enum PlayerDelayedOperations
    {
        DELAYED_SAVE_PLAYER = 0x01,
        DELAYED_RESURRECT_PLAYER = 0x02,
        DELAYED_SPELL_CAST_DESERTER = 0x04,
        DELAYED_END
    }
    public enum ReputationSource
    {
        REPUTATION_SOURCE_KILL,
        REPUTATION_SOURCE_QUEST,
        REPUTATION_SOURCE_SPELL
    }
    public enum PlayerRestState
    {
        REST_STATE_RESTED = 0x01,
        REST_STATE_NORMAL = 0x02,
        REST_STATE_RAF_LINKED = 0x04                      // Exact use unknown
    }
    public enum PlayerMountResult
    {
        MOUNTRESULT_INVALIDMOUNTEE = 0,    // You can't mount that unit!
        MOUNTRESULT_TOOFARAWAY = 1,    // That mount is too far away!
        MOUNTRESULT_ALREADYMOUNTED = 2,    // You're already mounted!
        MOUNTRESULT_NOTMOUNTABLE = 3,    // That unit can't be mounted!
        MOUNTRESULT_NOTYOURPET = 4,    // That mount isn't your pet!
        MOUNTRESULT_OTHER = 5,    // internal
        MOUNTRESULT_LOOTING = 6,    // You can't mount while looting!
        MOUNTRESULT_RACECANTMOUNT = 7,    // You can't mount because of your race!
        MOUNTRESULT_SHAPESHIFTED = 8,    // You can't mount while shapeshifted!
        MOUNTRESULT_FORCEDDISMOUNT = 9,    // You dismount before continuing.
        MOUNTRESULT_OK = 10    // no error
    }
    public enum PlayerDismountResult
    {
        DISMOUNTRESULT_NOPET = 0,    // internal
        DISMOUNTRESULT_NOTMOUNTED = 1,    // You're not mounted!
        DISMOUNTRESULT_NOTYOURPET = 2,    // internal
        DISMOUNTRESULT_OK = 3     // no error
    }
    public enum CharacterAction
    {
        Wait,               // Do nothing until a trigger changes state.
        GoTo,               // Move to a specified location.
        InteractWith,       // Interact with an NPC, object, or other elements.

        SelectGossip,       // Select a gossip option in a dialog.
        SelectTaxiNode,     // Select a taxi node to fly to.

        AcceptQuest,        // Accept a quest from an NPC.
        DeclineQuest,       // Decline a quest from an NPC.
        AbandonQuest,       // Abandon a quest from the quest log.
        SelectReward,       // Choose a reward upon completing a quest.
        CompleteQuest,      // Turn in a quest to an NPC.

        TrainSkill,         // Train a skill from a trainer.
        TrainTalent,        // Train a talent from a trainer.

        OfferTrade,         // Offer a trade with another player.
        OfferGold,          // Offer a certain amount of gold in a trade.
        OfferItem,          // Offer an item in a trade window.
        AcceptTrade,        // Accept the current trade offer.
        DeclineTrade,       // Decline the current trade offer.
        EnchantTrade,       // Enchant an item in a trade window.
        LockpickTrade,      // Picks a lock in a trade window.

        PromoteLeader,      // Promote a group member to leader.
        PromoteAssistant,   // Promote a group member to assistant.
        PromoteLootManager, // Promote a group member to loot manager.
        SetGroupLoot,       // Set the loot distribution method for a group.
        AssignLoot,         // Assign loot to a player in a group.
        LootRollNeed,       // Roll "Need" on a loot item.
        LootRollGreed,      // Roll "Greed" on a loot item.
        LootPass,           // Pass on a loot item.

        SendGroupInvite,    // Send an invitation to join a group.
        AcceptGroupInvite,  // Accept an invitation to join a group.
        DeclineGroupInvite, // Decline an invitation to join a group.
        KickPlayer,         // Kick a player from the group.
        LeaveGroup,         // Leave the current group.
        DisbandGroup,       // Disband the current group.

        StopAttack,         // Cease any ongoing attack.
        CastSpell,          // Cast or channel a spell on a target or location.
        StopCast,           // Stop casting a spell.

        UseItem,            // Use an item from inventory.
        EquipItem,          // Equip an item from the inventory.
        UnequipItem,        // Unequip an item from the character.
        DestroyItem,        // Destroy an item from the character.
        MoveItem,           // Move an item within the inventory.
        SplitStack,         // Unequip an item from the character.

        BuyItem,            // Purchase an item from a vendor.
        BuybackItem,        // Purchase a previously sold item from a vendor.
        SellItem,           // Sell an item to a vendor.
        RepairItem,         // Repair an item with a vendor.
        RepairAllItems,     // Repair all items with a vendor.

        DismissBuff,        // Dismiss a buff from the character.

        Resurrect,          // Accept a resurrection from another player or near corpse.

        Craft,              // Perform a crafting action.

        Login,              // Log in to the game world.
        Logout,             // Log out of the game world.
        CreateCharacter,    // Create a new character.
        DeleteCharacter,    // Delete an existing character.
        EnterWorld,         // Enter the game world with a character.
    }
    public enum GroupLootSetting
    {
        Default = 0,
        MasterLooterCommon = 1,
        MasterLooterRare = 2,
        MasterLooterEpic = 3,
        MasterLooterLegendary = 4,
    }

    public enum WoWObjectType
    {
        None,
        Item,
        Container,
        Unit,
        Player,
        GameObj,
        DynamicObj,
        Corpse
    }

    public enum DynamicObjectType
    {
        Portal = 0x0,          // unused
        AreaSpell = 0x1,
        FarsightFocus = 0x2,
    }

    enum InventoryResult
    {
        EQUIP_ERR_OK = 0,
        EQUIP_ERR_CANT_EQUIP_LEVEL_I = 1,       // ERR_CANT_EQUIP_LEVEL_I
        EQUIP_ERR_CANT_EQUIP_SKILL = 2,       // ERR_CANT_EQUIP_SKILL
        EQUIP_ERR_ITEM_DOESNT_GO_TO_SLOT = 3,       // ERR_WRONG_SLOT
        EQUIP_ERR_BAG_FULL = 4,       // ERR_BAG_FULL
        EQUIP_ERR_NONEMPTY_BAG_OVER_OTHER_BAG = 5,       // ERR_BAG_IN_BAG
        EQUIP_ERR_CANT_TRADE_EQUIP_BAGS = 6,       // ERR_TRADE_EQUIPPED_BAG
        EQUIP_ERR_ONLY_AMMO_CAN_GO_HERE = 7,       // ERR_AMMO_ONLY
        EQUIP_ERR_NO_REQUIRED_PROFICIENCY = 8,       // ERR_PROFICIENCY_NEEDED
        EQUIP_ERR_NO_EQUIPMENT_SLOT_AVAILABLE = 9,       // ERR_NO_SLOT_AVAILABLE
        EQUIP_ERR_YOU_CAN_NEVER_USE_THAT_ITEM = 10,      // ERR_CANT_EQUIP_EVER
        EQUIP_ERR_YOU_CAN_NEVER_USE_THAT_ITEM2 = 11,      // ERR_CANT_EQUIP_EVER
        EQUIP_ERR_NO_EQUIPMENT_SLOT_AVAILABLE2 = 12,      // ERR_NO_SLOT_AVAILABLE
        EQUIP_ERR_CANT_EQUIP_WITH_TWOHANDED = 13,      // ERR_2HANDED_EQUIPPED
        EQUIP_ERR_CANT_DUAL_WIELD = 14,      // ERR_2HSKILLNOTFOUND
        EQUIP_ERR_ITEM_DOESNT_GO_INTO_BAG = 15,      // ERR_WRONG_BAG_TYPE
        EQUIP_ERR_ITEM_DOESNT_GO_INTO_BAG2 = 16,      // ERR_WRONG_BAG_TYPE
        EQUIP_ERR_CANT_CARRY_MORE_OF_THIS = 17,      // ERR_ITEM_MAX_COUNT
        EQUIP_ERR_NO_EQUIPMENT_SLOT_AVAILABLE3 = 18,      // ERR_NO_SLOT_AVAILABLE
        EQUIP_ERR_ITEM_CANT_STACK = 19,      // ERR_CANT_STACK
        EQUIP_ERR_ITEM_CANT_BE_EQUIPPED = 20,      // ERR_NOT_EQUIPPABLE
        EQUIP_ERR_ITEMS_CANT_BE_SWAPPED = 21,      // ERR_CANT_SWAP
        EQUIP_ERR_SLOT_IS_EMPTY = 22,      // ERR_SLOT_EMPTY
        EQUIP_ERR_ITEM_NOT_FOUND = 23,      // ERR_ITEM_NOT_FOUND
        EQUIP_ERR_CANT_DROP_SOULBOUND = 24,      // ERR_DROP_BOUND_ITEM
        EQUIP_ERR_OUT_OF_RANGE = 25,      // ERR_OUT_OF_RANGE
        EQUIP_ERR_TRIED_TO_SPLIT_MORE_THAN_COUNT = 26,      // ERR_TOO_FEW_TO_SPLIT
        EQUIP_ERR_COULDNT_SPLIT_ITEMS = 27,      // ERR_SPLIT_FAILED
        EQUIP_ERR_MISSING_REAGENT = 28,      // ERR_SPELL_FAILED_REAGENTS_GENERIC
        EQUIP_ERR_NOT_ENOUGH_MONEY = 29,      // ERR_NOT_ENOUGH_MONEY
        EQUIP_ERR_NOT_A_BAG = 30,      // ERR_NOT_A_BAG
        EQUIP_ERR_CAN_ONLY_DO_WITH_EMPTY_BAGS = 31,      // ERR_DESTROY_NONEMPTY_BAG
        EQUIP_ERR_DONT_OWN_THAT_ITEM = 32,      // ERR_NOT_OWNER
        EQUIP_ERR_CAN_EQUIP_ONLY1_QUIVER = 33,      // ERR_ONLY_ONE_QUIVER
        EQUIP_ERR_MUST_PURCHASE_THAT_BAG_SLOT = 34,      // ERR_NO_BANK_SLOT
        EQUIP_ERR_TOO_FAR_AWAY_FROM_BANK = 35,      // ERR_NO_BANK_HERE
        EQUIP_ERR_ITEM_LOCKED = 36,      // ERR_ITEM_LOCKED
        EQUIP_ERR_YOU_ARE_STUNNED = 37,      // ERR_GENERIC_STUNNED
        EQUIP_ERR_YOU_ARE_DEAD = 38,      // ERR_PLAYER_DEAD
        EQUIP_ERR_CANT_DO_RIGHT_NOW = 39,      // ERR_CLIENT_LOCKED_OUT
        EQUIP_ERR_INT_BAG_ERROR = 40,      // ERR_INTERNAL_BAG_ERROR
        EQUIP_ERR_CAN_EQUIP_ONLY1_BOLT = 41,      // ERR_ONLY_ONE_BOLT
        EQUIP_ERR_CAN_EQUIP_ONLY1_AMMOPOUCH = 42,      // ERR_ONLY_ONE_AMMO
        EQUIP_ERR_STACKABLE_CANT_BE_WRAPPED = 43,      // ERR_CANT_WRAP_STACKABLE
        EQUIP_ERR_EQUIPPED_CANT_BE_WRAPPED = 44,      // ERR_CANT_WRAP_EQUIPPED
        EQUIP_ERR_WRAPPED_CANT_BE_WRAPPED = 45,      // ERR_CANT_WRAP_WRAPPED
        EQUIP_ERR_BOUND_CANT_BE_WRAPPED = 46,      // ERR_CANT_WRAP_BOUND
        EQUIP_ERR_UNIQUE_CANT_BE_WRAPPED = 47,      // ERR_CANT_WRAP_UNIQUE
        EQUIP_ERR_BAGS_CANT_BE_WRAPPED = 48,      // ERR_CANT_WRAP_BAGS
        EQUIP_ERR_ALREADY_LOOTED = 49,      // ERR_LOOT_GONE
        EQUIP_ERR_INVENTORY_FULL = 50,      // ERR_INV_FULL
        EQUIP_ERR_BANK_FULL = 51,      // ERR_BAG_FULL
        EQUIP_ERR_ITEM_IS_CURRENTLY_SOLD_OUT = 52,      // ERR_VENDOR_SOLD_OUT
        EQUIP_ERR_BAG_FULL3 = 53,      // ERR_BAG_FULL
        EQUIP_ERR_ITEM_NOT_FOUND2 = 54,      // ERR_ITEM_NOT_FOUND
        EQUIP_ERR_ITEM_CANT_STACK2 = 55,      // ERR_CANT_STACK
        EQUIP_ERR_BAG_FULL4 = 56,      // ERR_BAG_FULL
        EQUIP_ERR_ITEM_SOLD_OUT = 57,      // ERR_VENDOR_SOLD_OUT
        EQUIP_ERR_OBJECT_IS_BUSY = 58,      // ERR_OBJECT_IS_BUSY
        EQUIP_ERR_NONE = 59,      // ERR_CANT_BE_DISENCHANTED
        EQUIP_ERR_NOT_IN_COMBAT = 60,      // ERR_NOT_IN_COMBAT
        EQUIP_ERR_NOT_WHILE_DISARMED = 61,      // ERR_NOT_WHILE_DISARMED
        EQUIP_ERR_BAG_FULL6 = 62,      // ERR_BAG_FULL
        EQUIP_ERR_CANT_EQUIP_RANK = 63,      // ERR_CANT_EQUIP_RANK
        EQUIP_ERR_CANT_EQUIP_REPUTATION = 64,      // ERR_CANT_EQUIP_REPUTATION
        EQUIP_ERR_TOO_MANY_SPECIAL_BAGS = 65,      // ERR_TOO_MANY_SPECIAL_BAGS
        EQUIP_ERR_LOOT_CANT_LOOT_THAT_NOW = 66,      // ERR_LOOT_CANT_LOOT_THAT_NOW
                                                     // any greater values show as "bag full"
    }

    enum BuyResult
    {
        BUY_ERR_CANT_FIND_ITEM = 0,
        BUY_ERR_ITEM_ALREADY_SOLD = 1,
        BUY_ERR_NOT_ENOUGHT_MONEY = 2,
        BUY_ERR_SELLER_DONT_LIKE_YOU = 4,
        BUY_ERR_DISTANCE_TOO_FAR = 5,
        BUY_ERR_ITEM_SOLD_OUT = 7,
        BUY_ERR_CANT_CARRY_MORE = 8,
        BUY_ERR_RANK_REQUIRE = 11,
        BUY_ERR_REPUTATION_REQUIRE = 12
    }

    enum SellResult
    {
        SELL_ERR_CANT_FIND_ITEM = 1,
        SELL_ERR_CANT_SELL_ITEM = 2,       // merchant doesn't like that item
        SELL_ERR_CANT_FIND_VENDOR = 3,       // merchant doesn't like you
        SELL_ERR_YOU_DONT_OWN_THAT_ITEM = 4,       // you don't own that item
        SELL_ERR_UNK = 5,       // nothing appears...
        SELL_ERR_ONLY_EMPTY_BAG = 6        // can only do with empty bags
    }

    // -1 from client enchantment slot number
    enum EnchantmentSlot
    {
        PERM_ENCHANTMENT_SLOT = 0,
        TEMP_ENCHANTMENT_SLOT = 1,
        MAX_INSPECTED_ENCHANTMENT_SLOT = 2,

        PROP_ENCHANTMENT_SLOT_0 = 3,                        // used with RandomSuffix
        PROP_ENCHANTMENT_SLOT_1 = 4,                        // used with RandomSuffix
        PROP_ENCHANTMENT_SLOT_2 = 5,                        // used with RandomSuffix
        PROP_ENCHANTMENT_SLOT_3 = 6,
        MAX_ENCHANTMENT_SLOT = 7
    }


    enum EnchantmentOffset
    {
        ENCHANTMENT_ID_OFFSET = 0,
        ENCHANTMENT_DURATION_OFFSET = 1,
        ENCHANTMENT_CHARGES_OFFSET = 2                         // now here not only charges, but something new in wotlk
    }

    [Flags]
    enum EnchantmentSlotMask
    {
        ENCHANTMENT_CAN_SOULBOUND = 0x01,
        ENCHANTMENT_UNK1 = 0x02,
        ENCHANTMENT_UNK2 = 0x04,
        ENCHANTMENT_UNK3 = 0x08
    }

    enum ItemUpdateState
    {
        ITEM_UNCHANGED = 0,
        ITEM_CHANGED = 1,
        ITEM_NEW = 2,
        ITEM_REMOVED = 3
    }

    enum ItemLootUpdateState
    {
        ITEM_LOOT_NONE = 0,      // loot not generated
        ITEM_LOOT_TEMPORARY = 1,      // generated loot is temporary (will deleted at loot window close)
        ITEM_LOOT_UNCHANGED = 2,
        ITEM_LOOT_CHANGED = 3,
        ITEM_LOOT_NEW = 4,
        ITEM_LOOT_REMOVED = 5
    }

    // masks for ITEM_FIELD_FLAGS field
    [Flags]
    public enum ItemDynFlags
    {
        ITEM_DYNFLAG_BINDED = 0x00000001, // set in game at binding
        ITEM_DYNFLAG_UNK1 = 0x00000002,
        ITEM_DYNFLAG_UNLOCKED = 0x00000004, // have meaning only for item with proto->LockId, if not set show as "Locked, req. lockpicking N"
        ITEM_DYNFLAG_WRAPPED = 0x00000008, // mark item as wrapped into wrapper container
        ITEM_DYNFLAG_UNK4 = 0x00000010, // can't repeat old note: appears red icon (like when item durability==0)
        ITEM_DYNFLAG_UNK5 = 0x00000020,
        ITEM_DYNFLAG_UNK6 = 0x00000040, // ? old note: usable
        ITEM_DYNFLAG_UNK7 = 0x00000080,
        ITEM_DYNFLAG_UNK8 = 0x00000100,
        ITEM_DYNFLAG_READABLE = 0x00000200, // can be open for read, it or item proto pagetText make show "Right click to read"
        ITEM_DYNFLAG_UNK10 = 0x00000400,
        ITEM_DYNFLAG_UNK11 = 0x00000800,
        ITEM_DYNFLAG_UNK12 = 0x00001000,
        ITEM_DYNFLAG_UNK13 = 0x00002000,
        ITEM_DYNFLAG_UNK14 = 0x00004000,
        ITEM_DYNFLAG_UNK15 = 0x00008000,
        ITEM_DYNFLAG_UNK16 = 0x00010000,
        ITEM_DYNFLAG_UNK17 = 0x00020000,
    }

    enum ItemRequiredTargetType
    {
        ITEM_TARGET_TYPE_CREATURE = 1,
        ITEM_TARGET_TYPE_DEAD = 2
    }

    public enum UnitReaction
    {
        Hated,
        Hostile,
        Unfriendly,
        Neutral,
        Friendly,
        Honored,
        Revered,
        Exalted
    }
    public enum Powers
    {
        MANA,
        RAGE,
        FOCUS,
        ENERGY,
        HAPPINESS
    }
    [Flags]
    public enum NPCFlags
    {
        UNIT_NPC_FLAG_NONE = 0x00000000,
        UNIT_NPC_FLAG_GOSSIP = 0x00000001,       ///< 100%
        UNIT_NPC_FLAG_QUESTGIVER = 0x00000002,       ///< 100%
        UNIT_NPC_FLAG_VENDOR = 0x00000004,       ///< 100%
        UNIT_NPC_FLAG_FLIGHTMASTER = 0x00000008,       ///< 100%
        UNIT_NPC_FLAG_TRAINER = 0x00000010,       ///< 100%
        UNIT_NPC_FLAG_SPIRITHEALER = 0x00000020,       ///< guessed
        UNIT_NPC_FLAG_SPIRITGUIDE = 0x00000040,       ///< guessed
        UNIT_NPC_FLAG_INNKEEPER = 0x00000080,       ///< 100%
        UNIT_NPC_FLAG_BANKER = 0x00000100,       ///< 100%
        UNIT_NPC_FLAG_PETITIONER = 0x00000200,       ///< 100% 0xC0000 = guild petitions
        UNIT_NPC_FLAG_TABARDDESIGNER = 0x00000400,       ///< 100%
        UNIT_NPC_FLAG_BATTLEMASTER = 0x00000800,       ///< 100%
        UNIT_NPC_FLAG_AUCTIONEER = 0x00001000,       ///< 100%
        UNIT_NPC_FLAG_STABLEMASTER = 0x00002000,       ///< 100%
        UNIT_NPC_FLAG_REPAIR = 0x00004000,       ///< 100%
        UNIT_NPC_FLAG_SPELLCLICK = 0x01000000,       // cause client to send 1015 opcode (spell click), dynamic, set at loading and don't must be set in DB
        UNIT_NPC_FLAG_OUTDOORPVP = 0x20000000        ///< custom flag for outdoor pvp creatures || Custom flag
    }
    [Flags]
    public enum DynamicFlags
    {
        None = 0x00,
        CanBeLooted = 0x01,
        Tapped = 0x02,
        TappedByMe = 0x04
    }

    [Flags]
    public enum MovementFlags
    {
        // Byte 1 (Resets on Movement Key Press)
        MOVEFLAG_NONE = 0x00000000,
        MOVEFLAG_FORWARD = 0x00000001,
        MOVEFLAG_BACKWARD = 0x00000002,
        MOVEFLAG_STRAFE_LEFT = 0x00000004,
        MOVEFLAG_STRAFE_RIGHT = 0x00000008,
        MOVEFLAG_TURN_LEFT = 0x00000010,
        MOVEFLAG_TURN_RIGHT = 0x00000020,
        MOVEFLAG_PITCH_UP = 0x00000040,
        MOVEFLAG_PITCH_DOWN = 0x00000080,

        // Byte 2 (Resets on Situation Change)
        MOVEFLAG_WALK_MODE = 0x00000100,               // Walking

        MOVEFLAG_LEVITATING = 0x00000400,
        MOVEFLAG_FLYING = 0x00000800,               // [-ZERO] is it really need and correct value
        MOVEFLAG_FALLING = 0x00002000,
        MOVEFLAG_FALLINGFAR = 0x00004000,
        MOVEFLAG_SWIMMING = 0x00200000,               // appears with fly flag also
        MOVEFLAG_SPLINE_ENABLED = 0x00400000,
        MOVEFLAG_CAN_FLY = 0x00800000,               // [-ZERO] is it really need and correct value
        MOVEFLAG_FLYING_OLD = 0x01000000,               // [-ZERO] is it really need and correct value

        MOVEFLAG_ONTRANSPORT = 0x02000000,               // Used for flying on some creatures
        MOVEFLAG_SPLINE_ELEVATION = 0x04000000,               // used for flight paths
        MOVEFLAG_ROOT = 0x08000000,               // used for flight paths
        MOVEFLAG_WATERWALKING = 0x10000000,               // prevent unit from falling through water
        MOVEFLAG_SAFE_FALL = 0x20000000,               // active rogue safe fall spell (passive)
        MOVEFLAG_HOVER = 0x40000000,
        
        // Masks (not transmitted, just logical helpers)
        MOVEFLAG_MASK_MOVING =
            MOVEFLAG_FORWARD |
            MOVEFLAG_BACKWARD |
            MOVEFLAG_STRAFE_LEFT |
            MOVEFLAG_STRAFE_RIGHT |
            MOVEFLAG_PITCH_UP |
            MOVEFLAG_PITCH_DOWN |
            MOVEFLAG_FALLING |
            MOVEFLAG_FALLINGFAR |
            MOVEFLAG_SPLINE_ELEVATION,

        MOVEFLAG_MASK_XZ =
            MOVEFLAG_FORWARD |
            MOVEFLAG_BACKWARD |
            MOVEFLAG_STRAFE_LEFT |
            MOVEFLAG_STRAFE_RIGHT,

        MOVEFLAG_MASK_MOVING_OR_TURN =
            MOVEFLAG_MASK_MOVING |
            MOVEFLAG_TURN_LEFT |
            MOVEFLAG_TURN_RIGHT
    }
    [Flags]
    public enum MovementFlags2 : ushort
    {
        None = 0x0000,
        Unknown1 = 0x0001,
        Unknown2 = 0x0002,
        Unknown3 = 0x0004,
        FullSpeedTurning = 0x0008,
        FullSpeedPitching = 0x0010,
        AlwaysAllowPitching = 0x0020,
        Unknown4 = 0x0040,
        Unknown5 = 0x0080,
        Unknown6 = 0x0100,
        Unknown7 = 0x0200,
        InterpolatedPlayerMovement = 0x0400,
        InterpolatedPlayerTurning = 0x0800,
        InterpolatedPlayerPitching = 0x1000,
        Unknown8 = 0x2000,
        Unknown9 = 0x4000,
        Unknown10 = 0x8000
    };

    [Flags]
    public enum SpellInterruptFlags
    {
        SPELL_INTERRUPT_FLAG_MOVEMENT = 0x01,
        SPELL_INTERRUPT_FLAG_DAMAGE = 0x02,
        SPELL_INTERRUPT_FLAG_INTERRUPT = 0x04,
        SPELL_INTERRUPT_FLAG_AUTOATTACK = 0x08,
        SPELL_INTERRUPT_FLAG_ABORT_ON_DMG = 0x10               // _complete_ interrupt on direct damage
                                                               // SPELL_INTERRUPT_UNK               = 0x20               // unk, 564 of 727 spells having this spell start with "Glyph"
    }
    [Flags]
    public enum SpellChannelInterruptFlags
    {
        CHANNEL_FLAG_DAMAGE = 0x0002,
        CHANNEL_FLAG_MOVEMENT = 0x0008,
        CHANNEL_FLAG_TURNING = 0x0010,
        CHANNEL_FLAG_DAMAGE2 = 0x0080,
        CHANNEL_FLAG_DELAY = 0x4000
    }
    [Flags]
    public enum SpellAuraInterruptFlags
    {
        AURA_INTERRUPT_FLAG_UNK0 = 0x00000001,   // 0    removed when getting hit by a negative spell?
        AURA_INTERRUPT_FLAG_DAMAGE = 0x00000002,   // 1    removed by any damage
        AURA_INTERRUPT_FLAG_UNK2 = 0x00000004,   // 2
        AURA_INTERRUPT_FLAG_MOVE = 0x00000008,   // 3    removed by any movement
        AURA_INTERRUPT_FLAG_TURNING = 0x00000010,   // 4    removed by any turning
        AURA_INTERRUPT_FLAG_ENTER_COMBAT = 0x00000020,   // 5    removed by entering combat
        AURA_INTERRUPT_FLAG_NOT_MOUNTED = 0x00000040,   // 6    removed by unmounting
        AURA_INTERRUPT_FLAG_NOT_ABOVEWATER = 0x00000080,   // 7    removed by entering water
        AURA_INTERRUPT_FLAG_NOT_UNDERWATER = 0x00000100,   // 8    removed by leaving water
        AURA_INTERRUPT_FLAG_NOT_SHEATHED = 0x00000200,   // 9    removed by unsheathing
        AURA_INTERRUPT_FLAG_UNK10 = 0x00000400,   // 10
        AURA_INTERRUPT_FLAG_UNK11 = 0x00000800,   // 11
        AURA_INTERRUPT_FLAG_MELEE_ATTACK = 0x00001000,   // 12   removed by melee attacks
        AURA_INTERRUPT_FLAG_UNK13 = 0x00002000,   // 13
        AURA_INTERRUPT_FLAG_UNK14 = 0x00004000,   // 14
        AURA_INTERRUPT_FLAG_UNK15 = 0x00008000,   // 15   removed by casting a spell?
        AURA_INTERRUPT_FLAG_UNK16 = 0x00010000,   // 16
        AURA_INTERRUPT_FLAG_MOUNTING = 0x00020000,   // 17   removed by mounting
        AURA_INTERRUPT_FLAG_NOT_SEATED = 0x00040000,   // 18   removed by standing up (used by food and drink mostly and sleep/Fake Death like)
        AURA_INTERRUPT_FLAG_CHANGE_MAP = 0x00080000,   // 19   leaving map/getting teleported
        AURA_INTERRUPT_FLAG_IMMUNE_OR_LOST_SELECTION = 0x00100000,   // 20   removed by auras that make you invulnerable, or make other to loose selection on you
        AURA_INTERRUPT_FLAG_UNK21 = 0x00200000,   // 21
        AURA_INTERRUPT_FLAG_UNK22 = 0x00400000,   // 22
        AURA_INTERRUPT_FLAG_ENTER_PVP_COMBAT = 0x00800000,   // 23   removed by entering pvp combat
        AURA_INTERRUPT_FLAG_DIRECT_DAMAGE = 0x01000000    // 24   removed by any direct damage
    };

    public enum SpellModOp
    {
        SPELLMOD_DAMAGE = 0,
        SPELLMOD_DURATION = 1,
        SPELLMOD_THREAT = 2,
        SPELLMOD_ATTACK_POWER = 3,
        SPELLMOD_CHARGES = 4,
        SPELLMOD_RANGE = 5,
        SPELLMOD_RADIUS = 6,
        SPELLMOD_CRITICAL_CHANCE = 7,
        SPELLMOD_ALL_EFFECTS = 8,
        SPELLMOD_NOT_LOSE_CASTING_TIME = 9,
        SPELLMOD_CASTING_TIME = 10,
        SPELLMOD_COOLDOWN = 11,
        SPELLMOD_SPEED = 12,
        // spellmod 13 unused
        SPELLMOD_COST = 14,
        SPELLMOD_CRIT_DAMAGE_BONUS = 15,
        SPELLMOD_RESIST_MISS_CHANCE = 16,
        SPELLMOD_JUMP_TARGETS = 17,
        SPELLMOD_CHANCE_OF_SUCCESS = 18,                   // Only used with SPELL_AURA_ADD_FLAT_MODIFIER and affects proc spells
        SPELLMOD_ACTIVATION_TIME = 19,
        SPELLMOD_EFFECT_PAST_FIRST = 20,
        SPELLMOD_CASTING_TIME_OLD = 21,
        SPELLMOD_DOT = 22,
        SPELLMOD_HASTE = 23,
        SPELLMOD_SPELL_BONUS_DAMAGE = 24,
        // spellmod 25 unused
        // SPELLMOD_FREQUENCY_OF_SUCCESS   = 26,
        SPELLMOD_MULTIPLE_VALUE = 27,
        SPELLMOD_RESIST_DISPEL_CHANCE = 28
    }
    public enum SpellFacingFlags
    {
        SPELL_FACING_FLAG_INFRONT = 0x0001
    }
    public enum UnitStandStateType
    {
        UNIT_STAND_STATE_STAND = 0,
        UNIT_STAND_STATE_SIT = 1,
        UNIT_STAND_STATE_SIT_CHAIR = 2,
        UNIT_STAND_STATE_SLEEP = 3,
        UNIT_STAND_STATE_SIT_LOW_CHAIR = 4,
        UNIT_STAND_STATE_SIT_MEDIUM_CHAIR = 5,
        UNIT_STAND_STATE_SIT_HIGH_CHAIR = 6,
        UNIT_STAND_STATE_DEAD = 7,
        UNIT_STAND_STATE_KNEEL = 8,
    }
    [Flags]
    public enum UnitBytes1_Flags
    {
        UNIT_BYTE1_FLAG_ALWAYS_STAND = 0x01,
        UNIT_BYTE1_FLAGS_CREEP = 0x02,
        UNIT_BYTE1_FLAG_UNTRACKABLE = 0x04,
        UNIT_BYTE1_FLAG_ALL = 0xFF
    }
    public enum SheathState
    {
        /// non prepared weapon
        SHEATH_STATE_UNARMED = 0,
        /// prepared melee weapon
        SHEATH_STATE_MELEE = 1,
        /// prepared ranged weapon
        SHEATH_STATE_RANGED = 2
    }
    [Flags]
    public enum UnitBytes2_Flags
    {
        UNIT_BYTE2_FLAG_UNK0 = 0x01,
        UNIT_BYTE2_FLAG_UNK1 = 0x02,
        UNIT_BYTE2_FLAG_UNK2 = 0x04,
        UNIT_BYTE2_FLAG_UNK3 = 0x08,
        UNIT_BYTE2_FLAG_AURAS = 0x10,                     // show positive auras as positive, and allow its dispel
        UNIT_BYTE2_FLAG_UNK5 = 0x20,
        UNIT_BYTE2_FLAG_UNK6 = 0x40,
        UNIT_BYTE2_FLAG_UNK7 = 0x80
    }
    public enum Swing
    {
        NOSWING = 0,
        SINGLEHANDEDSWING = 1,
        TWOHANDEDSWING = 2
    }
    public enum VictimState
    {
        VICTIMSTATE_UNAFFECTED = 0,                         // seen in relation with HITINFO_MISS
        VICTIMSTATE_NORMAL = 1,
        VICTIMSTATE_DODGE = 2,
        VICTIMSTATE_PARRY = 3,
        VICTIMSTATE_INTERRUPT = 4,
        VICTIMSTATE_BLOCKS = 5,
        VICTIMSTATE_EVADES = 6,
        VICTIMSTATE_IS_IMMUNE = 7,
        VICTIMSTATE_DEFLECTS = 8
    }
    [Flags]
    public enum HitInfo
    {
        HITINFO_NORMALSWING = 0x00000000,
        HITINFO_UNK0 = 0x00000001,               // req correct packet structure
        HITINFO_NORMALSWING2 = 0x00000002,
        HITINFO_LEFTSWING = 0x00000004,
        HITINFO_UNK3 = 0x00000008,
        HITINFO_MISS = 0x00000010,
        HITINFO_ABSORB = 0x00000020,               // plays absorb sound
        HITINFO_RESIST = 0x00000040,               // resisted atleast some damage
        HITINFO_CRITICALHIT = 0x00000080,
        HITINFO_UNK8 = 0x00000100,               // wotlk?
        HITINFO_BLOCK = 0x00000800,               // [ZERO]
        HITINFO_UNK9 = 0x00002000,               // wotlk?
        HITINFO_GLANCING = 0x00004000,
        HITINFO_CRUSHING = 0x00008000,
        HITINFO_NOACTION = 0x00010000,
        HITINFO_SWINGNOHITSOUND = 0x00080000
    }
    public enum InventorySlot
    {
        NULL_BAG = 0,
        NULL_SLOT = 255
    }
    public enum UnitModifierType
    {
        BASE_VALUE = 0,
        BASE_PCT = 1,
        TOTAL_VALUE = 2,
        TOTAL_PCT = 3,
        MODIFIER_TYPE_END = 4
    }
    public enum WeaponDamageRange
    {
        MINDAMAGE,
        MAXDAMAGE
    }
    public enum DamageTypeToSchool
    {
        RESISTANCE,
        DAMAGE_DEALT,
        DAMAGE_TAKEN
    }
    public enum AuraRemoveMode
    {
        AURA_REMOVE_BY_DEFAULT,
        AURA_REMOVE_BY_STACK,           ///< at replace by similar aura
        AURA_REMOVE_BY_CANCEL,          ///< It was cancelled by the user (needs confirmation)
        AURA_REMOVE_BY_DISPEL,          ///< It was dispelled by ie Remove Magic
        AURA_REMOVE_BY_DEATH,           ///< The \ref Unit died and there for it was removed
        AURA_REMOVE_BY_DELETE,          ///< use for speedup and prevent unexpected effects at player logout/pet unsummon (must be used _only_ after save), delete.
        AURA_REMOVE_BY_SHIELD_BREAK,    ///< when absorb shield is removed by damage
        AURA_REMOVE_BY_EXPIRE,          ///< at duration end
        AURA_REMOVE_BY_TRACKING         ///< aura is removed because of a conflicting tracked aura
    };

    public enum UnitMods
    {
        UNIT_MOD_STAT_STRENGTH,                                 // UNIT_MOD_STAT_STRENGTH..UNIT_MOD_STAT_SPIRIT must be in existing order, it's accessed by index values of Stats enum.
        UNIT_MOD_STAT_AGILITY,
        UNIT_MOD_STAT_STAMINA,
        UNIT_MOD_STAT_INTELLECT,
        UNIT_MOD_STAT_SPIRIT,
        UNIT_MOD_HEALTH,
        UNIT_MOD_MANA,                                          // UNIT_MOD_MANA..UNIT_MOD_HAPPINESS must be in existing order, it's accessed by index values of Powers enum.
        UNIT_MOD_RAGE,
        UNIT_MOD_FOCUS,
        UNIT_MOD_ENERGY,
        UNIT_MOD_HAPPINESS,
        UNIT_MOD_ARMOR,                                         // UNIT_MOD_ARMOR..UNIT_MOD_RESISTANCE_ARCANE must be in existing order, it's accessed by index values of SpellSchools enum.
        UNIT_MOD_RESISTANCE_HOLY,
        UNIT_MOD_RESISTANCE_FIRE,
        UNIT_MOD_RESISTANCE_NATURE,
        UNIT_MOD_RESISTANCE_FROST,
        UNIT_MOD_RESISTANCE_SHADOW,
        UNIT_MOD_RESISTANCE_ARCANE,
        UNIT_MOD_ATTACK_POWER,
        UNIT_MOD_ATTACK_POWER_RANGED,
        UNIT_MOD_DAMAGE_MAINHAND,
        UNIT_MOD_DAMAGE_OFFHAND,
        UNIT_MOD_DAMAGE_RANGED,
        UNIT_MOD_END,
        // synonyms
        UNIT_MOD_STAT_START = UNIT_MOD_STAT_STRENGTH,
        UNIT_MOD_STAT_END = UNIT_MOD_STAT_SPIRIT + 1,
        UNIT_MOD_RESISTANCE_START = UNIT_MOD_ARMOR,
        UNIT_MOD_RESISTANCE_END = UNIT_MOD_RESISTANCE_ARCANE + 1,
        UNIT_MOD_POWER_START = UNIT_MOD_MANA,
        UNIT_MOD_POWER_END = UNIT_MOD_HAPPINESS + 1
    };

    public enum BaseModGroup
    {
        CRIT_PERCENTAGE,
        RANGED_CRIT_PERCENTAGE,
        OFFHAND_CRIT_PERCENTAGE,
        SHIELD_BLOCK_VALUE,
        BASEMOD_END
    };

    public enum BaseModType
    {
        FLAT_MOD,
        PCT_MOD,
        MOD_END,
    };

    public enum DeathState
    {
        ALIVE = 0,     ///< show as alive
        JUST_DIED = 1,     ///< temporary state at die, for creature auto converted to CORPSE, for player at next update call
        CORPSE = 2,     ///< corpse state, for player this also meaning that player not leave corpse
        DEAD = 3,     ///< for creature despawned state (corpse despawned), for player CORPSE/DEAD not clear way switches (FIXME), and use m_deathtimer > 0 check for real corpse state
        JUST_ALIVED = 4      ///< temporary state at resurrection, for creature auto converted to ALIVE, for player at next update call
    };

    /**
     * internal state flags for some auras and movement generators, other. (Taken from comment)
     */
    [Flags]
    public enum UnitState : uint
    {
        // persistent state (applied by aura/etc until expire)
        UNIT_STATE_MELEE_ATTACKING = 0x00000001,                 // unit is melee attacking someone Unit::Attack
        UNIT_STATE_ATTACK_PLAYER = 0x00000002,                 // unit attack player or player's controlled unit and have contested pvpv timer setup, until timer expire, combat end and etc
        UNIT_STATE_DIED = 0x00000004,                 // Unit::SetFeignDeath
        UNIT_STATE_STUNNED = 0x00000008,                 // Aura::HandleAuraModStun
        UNIT_STATE_ROOT = 0x00000010,                 // Aura::HandleAuraModRoot
        UNIT_STATE_ISOLATED = 0x00000020,                 // area auras do not affect other players, Aura::HandleAuraModSchoolImmunity
        UNIT_STATE_CONTROLLED = 0x00000040,                 // Aura::HandleAuraModPossess

        // persistent movement generator state (all time while movement generator applied to unit (independent from top state of movegen)
        UNIT_STATE_TAXI_FLIGHT = 0x00000080,                 // player is in flight mode (in fact interrupted at far teleport until next map telport landing)
        UNIT_STATE_DISTRACTED = 0x00000100,                 // DistractedMovementGenerator active

        // persistent movement generator state with non-persistent mirror states for stop support
        // (can be removed temporary by stop command or another movement generator apply)
        // not use _MOVE versions for generic movegen state, it can be removed temporary for unit stop and etc
        UNIT_STATE_CONFUSED = 0x00000200,                 // ConfusedMovementGenerator active/onstack
        UNIT_STATE_CONFUSED_MOVE = 0x00000400,
        UNIT_STATE_ROAMING = 0x00000800,                 // RandomMovementGenerator/PointMovementGenerator/WaypointMovementGenerator active (now always set)
        UNIT_STATE_ROAMING_MOVE = 0x00001000,
        UNIT_STATE_CHASE = 0x00002000,                 // ChaseMovementGenerator active
        UNIT_STATE_CHASE_MOVE = 0x00004000,
        UNIT_STATE_FOLLOW = 0x00008000,                 // FollowMovementGenerator active
        UNIT_STATE_FOLLOW_MOVE = 0x00010000,
        UNIT_STATE_FLEEING = 0x00020000,                 // FleeMovementGenerator/TimedFleeingMovementGenerator active/onstack
        UNIT_STATE_FLEEING_MOVE = 0x00040000,
        // More room for other MMGens

        // High-Level states (usually only with Creatures)
        UNIT_STATE_NO_COMBAT_MOVEMENT = 0x01000000,           // Combat Movement for MoveChase stopped
        UNIT_STATE_RUNNING = 0x02000000,           // SetRun for waypoints and such
        UNIT_STATE_WAYPOINT_PAUSED = 0x04000000,           // Waypoint-Movement paused genericly (ie by script)

        UNIT_STATE_IGNORE_PATHFINDING = 0x10000000,           // do not use pathfinding in any MovementGenerator

        // masks (only for check)

        // can't move currently
        UNIT_STATE_CAN_NOT_MOVE = UNIT_STATE_ROOT | UNIT_STATE_STUNNED | UNIT_STATE_DIED,

        // stay by different reasons
        UNIT_STATE_NOT_MOVE = UNIT_STATE_ROOT | UNIT_STATE_STUNNED | UNIT_STATE_DIED |
        UNIT_STATE_DISTRACTED,

        // stay or scripted movement for effect( = in player case you can't move by client command)
        UNIT_STATE_NO_FREE_MOVE = UNIT_STATE_ROOT | UNIT_STATE_STUNNED | UNIT_STATE_DIED |
        UNIT_STATE_TAXI_FLIGHT |
        UNIT_STATE_CONFUSED | UNIT_STATE_FLEEING,

        // not react at move in sight or other
        UNIT_STATE_CAN_NOT_REACT = UNIT_STATE_STUNNED | UNIT_STATE_DIED |
        UNIT_STATE_CONFUSED | UNIT_STATE_FLEEING,

        // AI disabled by some reason
        UNIT_STATE_LOST_CONTROL = UNIT_STATE_CONFUSED | UNIT_STATE_FLEEING | UNIT_STATE_CONTROLLED,

        // above 2 state cases
        UNIT_STATE_CAN_NOT_REACT_OR_LOST_CONTROL = UNIT_STATE_CAN_NOT_REACT | UNIT_STATE_LOST_CONTROL,

        // masks (for check or reset)

        // for real move using movegen check and stop (except unstoppable flight)
        UNIT_STATE_MOVING = UNIT_STATE_ROAMING_MOVE | UNIT_STATE_CHASE_MOVE | UNIT_STATE_FOLLOW_MOVE | UNIT_STATE_FLEEING_MOVE,

        UNIT_STATE_RUNNING_STATE = UNIT_STATE_CHASE_MOVE | UNIT_STATE_FLEEING_MOVE | UNIT_STATE_RUNNING,

        UNIT_STATE_ALL_STATE = 0xFFFFFFFF,
        UNIT_STATE_ALL_DYN_STATES = UNIT_STATE_ALL_STATE & ~(UNIT_STATE_NO_COMBAT_MOVEMENT | UNIT_STATE_RUNNING | UNIT_STATE_WAYPOINT_PAUSED | UNIT_STATE_IGNORE_PATHFINDING)
    };

    public enum UnitMoveType
    {
        MOVE_WALK = 0,
        MOVE_RUN = 1,
        MOVE_RUN_BACK = 2,
        MOVE_SWIM = 3,
        MOVE_SWIM_BACK = 4,
        MOVE_TURN_RATE = 5
    };

    public enum UnitAuraFlags
    {
        UNIT_AURAFLAG_ALIVE_INVISIBLE = 0x1,                  // aura which makes unit invisible for alive
    };

    public enum UnitVisibility
    {
        VISIBILITY_OFF = 0,                      // absolute, not detectable, GM-like, can see all other
        VISIBILITY_ON = 1,
        VISIBILITY_GROUP_STEALTH = 2,                      // detect chance, seen and can see group members
        VISIBILITY_GROUP_INVISIBILITY = 3,                      // invisibility, can see and can be seen only another invisible unit or invisible detection unit, set only if not stealthed, and in checks not used (mask used instead)
        VISIBILITY_GROUP_NO_DETECT = 4,                      // state just at stealth apply for update Grid state. Don't remove, otherwise stealth spells will break
        VISIBILITY_REMOVE_CORPSE = 5                       // special totally not detectable visibility for force delete object while removing a corpse
    };

    /**
     * [-ZERO] Need recheck values
     * Value masks for UNIT_FIELD_FLAGS (Taken from source)
     * \todo Document all the flags, not just the ones already commented
     */
    [Flags]
    public enum UnitFlags
    {
        UNIT_FLAG_NONE = 0x00000000,
        UNIT_FLAG_UNK_0 = 0x00000001,
        UNIT_FLAG_NON_ATTACKABLE = 0x00000002,           ///< not attackable
        UNIT_FLAG_CLIENT_CONTROL_LOST = 0x00000004,           // Generic unspecified loss of control initiated by server script, movement checks disabled, paired with loss of client control packet.
        UNIT_FLAG_PVP_ATTACKABLE = 0x00000008,           ///< allow apply pvp rules to attackable state in addition to faction dependent state, UNIT_FLAG_UNKNOWN1 in pre-bc mangos
        UNIT_FLAG_RENAME = 0x00000010,           ///< rename creature
        UNIT_FLAG_RESTING = 0x00000020,
        UNIT_FLAG_UNK_6 = 0x00000040,
        UNIT_FLAG_OOC_NOT_ATTACKABLE = 0x00000100,           ///< (OOC Out Of Combat) Can not be attacked when not in combat. Removed if unit for some reason enter combat (flag probably removed for the attacked and it's party/group only) \todo Needs more documentation
        UNIT_FLAG_PASSIVE = 0x00000200,           ///< makes you unable to attack everything. Almost identical to our "civilian"-term. Will ignore it's surroundings and not engage in combat unless "called upon" or engaged by another unit.
        UNIT_FLAG_PVP = 0x00001000,
        UNIT_FLAG_SILENCED = 0x00002000,           ///< silenced, 2.1.1
        UNIT_FLAG_UNK_14 = 0x00004000,           ///< 2.0.8
        UNIT_FLAG_UNK_15 = 0x00008000,           ///< related to jerky movement in water?
        UNIT_FLAG_UNK_16 = 0x00010000,           ///< removes attackable icon
        UNIT_FLAG_PACIFIED = 0x00020000,
        UNIT_FLAG_DISABLE_ROTATE = 0x00040000,
        UNIT_FLAG_IN_COMBAT = 0x00080000,
        UNIT_FLAG_NOT_SELECTABLE = 0x02000000,
        UNIT_FLAG_SKINNABLE = 0x04000000,
        UNIT_FLAG_AURAS_VISIBLE = 0x08000000,           ///< magic detect
        UNIT_FLAG_SHEATHE = 0x40000000,
        // UNIT_FLAG_UNK_31              = 0x80000000           // no affect in 1.12.1

        UNIT_FLAG_NOT_ATTACKABLE_1 = 0x00000080,           ///< ?? (UNIT_FLAG_PVP_ATTACKABLE | UNIT_FLAG_NOT_ATTACKABLE_1) is NON_PVP_ATTACKABLE
        UNIT_FLAG_LOOTING = 0x00000400,           ///< loot animation
        UNIT_FLAG_PET_IN_COMBAT = 0x00000800,           ///< in combat?, 2.0.8
        UNIT_FLAG_STUNNED = 0x00040000,           ///< stunned, 2.1.1
        UNIT_FLAG_TAXI_FLIGHT = 0x00100000,           ///< disable casting at client side spell not allowed by taxi flight (mounted?), probably used with 0x4 flag
        UNIT_FLAG_DISARMED = 0x00200000,           ///< disable melee spells casting..., "Required melee weapon" added to melee spells tooltip.
        UNIT_FLAG_CONFUSED = 0x00400000,
        UNIT_FLAG_FLEEING = 0x00800000,
        UNIT_FLAG_POSSESSED = 0x01000000,           ///< used in spell Eyes of the Beast for pet... let attack by controlled creature |// Unit is under remote control by another unit, movement checks disabled, paired with loss of client control packet. New master is allowed to use melee attack and can't select this unit via mouse in the world (as if it was own character).
        UNIT_FLAG_UNK_28 = 0x10000000,
        UNIT_FLAG_UNK_29 = 0x20000000            ///< used in Feign Death spell
    }
    public enum DiminishingLevels
    {
        DIMINISHING_LEVEL_1 = 0,         ///<Won't make a difference to stun duration
        DIMINISHING_LEVEL_2 = 1,         ///<Reduces stun time by 50%
        DIMINISHING_LEVEL_3 = 2,         ///<Reduces stun time by 75%
        DIMINISHING_LEVEL_IMMUNE = 3          ///<The target is immune to the DiminishingGrouop
    }
    public enum MeleeHitOutcome
    {
        MELEE_HIT_EVADE = 0,
        MELEE_HIT_MISS = 1,
        MELEE_HIT_DODGE = 2,     ///< used as misc in SPELL_AURA_IGNORE_COMBAT_RESULT
        MELEE_HIT_BLOCK = 3,     ///< used as misc in SPELL_AURA_IGNORE_COMBAT_RESULT
        MELEE_HIT_PARRY = 4,     ///< used as misc in SPELL_AURA_IGNORE_COMBAT_RESULT
        MELEE_HIT_GLANCING = 5,
        MELEE_HIT_CRIT = 6,
        MELEE_HIT_CRUSHING = 7,
        MELEE_HIT_NORMAL = 8,
        MELEE_HIT_BLOCK_CRIT = 9,
    }

    public enum SpellAuraProcResult
    {
        SPELL_AURA_PROC_OK = 0,                    // proc was processed, will remove charges
        SPELL_AURA_PROC_FAILED = 1,                    // proc failed - if at least one aura failed the proc, charges won't be taken
        SPELL_AURA_PROC_CANT_TRIGGER = 2                     // aura can't trigger - skip charges taking, move to next aura if exists
    }

    public enum CurrentSpellTypes
    {
        CURRENT_MELEE_SPELL = 0,
        CURRENT_GENERIC_SPELL = 1,
        CURRENT_AUTOREPEAT_SPELL = 2,
        CURRENT_CHANNELED_SPELL = 3
    }
    public enum ActiveStates
    {
        ACT_PASSIVE = 0x01,                                    // 0x01 - passive
        ACT_DISABLED = 0x81,                                    // 0x80 - castable
        ACT_ENABLED = 0xC1,                                    // 0x40 | 0x80 - auto cast + castable
        ACT_COMMAND = 0x07,                                    // 0x01 | 0x02 | 0x04
        ACT_REACTION = 0x06,                                    // 0x02 | 0x04
        ACT_DECIDE = 0x00                                     // custom
    }
    public enum ReactStates
    {
        REACT_PASSIVE = 0,
        REACT_DEFENSIVE = 1,
        REACT_AGGRESSIVE = 2
    }
    public enum CommandStates
    {
        COMMAND_STAY = 0,
        COMMAND_FOLLOW = 1,
        COMMAND_ATTACK = 2,
        COMMAND_ABANDON = 3
    }
    public enum ControlledUnitMask
    {
        CONTROLLED_PET = 0x01,
        CONTROLLED_MINIPET = 0x02,
        CONTROLLED_GUARDIANS = 0x04,                            // including PROTECTOR_PET
        CONTROLLED_CHARM = 0x08,
        CONTROLLED_TOTEMS = 0x10,
    }
    public enum ReactiveType
    {
        REACTIVE_DEFENSE = 1,
        REACTIVE_HUNTER_PARRY = 2,
        REACTIVE_OVERPOWER = 5
    }
    public enum PowerDefaults
    {
        POWER_RAGE_DEFAULT = 1000,
        POWER_FOCUS_DEFAULT = 100,
        POWER_ENERGY_DEFAULT = 100,
        POWER_HAPPINESS_DEFAULT = 1000000,
    }

    public enum GOState
    {
        Active,
        Ready,
        ActiveAlternative
    }
    public enum SpellModType
    {
        SPELLMOD_FLAT = 107,                      // SPELL_AURA_ADD_FLAT_MODIFIER
        SPELLMOD_PCT = 108                       // SPELL_AURA_ADD_PCT_MODIFIER
    }
    public enum CorpseType
    {
        CORPSE_BONES = 0,
        CORPSE_RESURRECTABLE_PVE = 1,
        CORPSE_RESURRECTABLE_PVP = 2
    }
    public enum CorpseFlags
    {
        CORPSE_FLAG_NONE = 0x00,
        CORPSE_FLAG_BONES = 0x01,
        CORPSE_FLAG_UNK1 = 0x02,
        CORPSE_FLAG_UNK2 = 0x04,
        CORPSE_FLAG_HIDE_HELM = 0x08,
        CORPSE_FLAG_HIDE_CLOAK = 0x10,
        CORPSE_FLAG_LOOTABLE = 0x20
    }

    [Flags]
    public enum HighGuidFlag : uint
    {
        HIGHGUID_ITEM = 0x4000,                       // blizz 4000
        HIGHGUID_CONTAINER = HIGHGUID_ITEM,            // blizz 4000
        HIGHGUID_PLAYER = 0x0000,                       // blizz 0000
        HIGHGUID_GAMEOBJECT = 0xF110,                       // blizz F110
        HIGHGUID_TRANSPORT = 0xF120,                       // blizz F120 (for GAMEOBJECT_TYPE_TRANSPORT)
        HIGHGUID_UNIT = 0xF130,                       // blizz F130
        HIGHGUID_PET = 0xF140,                       // blizz F140
        HIGHGUID_DYNAMICOBJECT = 0xF100,                       // blizz F100
        HIGHGUID_CORPSE = 0xF101,                       // blizz F100
        HIGHGUID_MO_TRANSPORT = 0x1FC0,                       // blizz 1FC0 (for GAMEOBJECT_TYPE_MO_TRANSPORT)
    }

    /// <summary>
    ///     The different types of Gossip Options in WoW
    /// </summary>
    public enum GossipTypes
    {
        Gossip = 0,
        Vendor = 1,
        Taxi = 2,
        Trainer = 3,
        Healer = 4,
        Binder = 5,
        Banker = 6,
        Petition = 7,
        Tabard = 8,
        Battlemaster = 9,
        Auctioneer = 10
    }

    public enum DialogType
    {
        gossip = 0,
        vendor = 1,
        taxi = 2,
        trainer = 3,
        healer = 4,
        binder = 5,
        banker = 6,
        petition = 7,
        tabard = 8,
        battlemaster = 9,
        auctioneer = 10
    }

    /// <summary>
    ///     Types of Quest-Frames (Accept, Continue, Complete, None)
    /// </summary>
    public enum QuestFrameState
    {
        Accept = 1,
        Continue = 2,
        Complete = 3,
        Greeting = 0
    }

    enum PetType
    {
        SUMMON_PET = 0,
        HUNTER_PET = 1,
        GUARDIAN_PET = 2,
        MINI_PET = 3,
        MAX_PET_TYPE = 4
    };

    // stored in character_pet.slot
    enum PetSaveMode
    {
        PET_SAVE_AS_DELETED = -1,                        // not saved in fact
        PET_SAVE_AS_CURRENT = 0,                        // in current slot (with player)
        PET_SAVE_FIRST_STABLE_SLOT = 1,
        PET_SAVE_LAST_STABLE_SLOT = 2,          // last in DB stable slot index (including), all higher have same meaning as PET_SAVE_NOT_IN_SLOT
        PET_SAVE_NOT_IN_SLOT = 100,                      // for avoid conflict with stable size grow will use 100
        PET_SAVE_REAGENTS = 101                       // PET_SAVE_NOT_IN_SLOT with reagents return
    };

    enum PetDatabaseStatus
    {
        PET_DB_NO_PET = 0,
        PET_DB_DEAD = 1,
        PET_DB_ALIVE = 2,
    }

    // There might be a lot more
    enum PetModeFlags
    {
        PET_MODE_UNKNOWN_0 = 0x0000001,
        PET_MODE_UNKNOWN_2 = 0x0000100,
        PET_MODE_DISABLE_ACTIONS = 0x8000000,

        // autoset in client at summon
        PET_MODE_DEFAULT = PET_MODE_UNKNOWN_0 | PET_MODE_UNKNOWN_2,
    }

    enum HappinessState
    {
        UNHAPPY = 1,
        CONTENT = 2,
        HAPPY = 3
    }

    enum LoyaltyLevel
    {
        REBELLIOUS = 1,
        UNRULY = 2,
        SUBMISSIVE = 3,
        DEPENDABLE = 4,
        FAITHFUL = 5,
        BEST_FRIEND = 6
    }

    enum PetSpellState
    {
        PETSPELL_UNCHANGED = 0,
        PETSPELL_CHANGED = 1,
        PETSPELL_NEW = 2,
        PETSPELL_REMOVED = 3
    }

    enum PetSpellType
    {
        PETSPELL_NORMAL = 0,
        PETSPELL_FAMILY = 1,
    }

    enum ActionFeedback
    {
        FEEDBACK_PET_NONE = 0,   // custom, not to be sent
        FEEDBACK_PET_DEAD = 1,
        FEEDBACK_NOTHING_TO_ATT = 2,
        FEEDBACK_CANT_ATT_TARGET = 3,
        FEEDBACK_NO_PATH_TO = 4
    }

    enum PetTalk
    {
        PET_TALK_SPECIAL_SPELL = 0,
        PET_TALK_ATTACK = 1
    }

    enum PetNameInvalidReason
    {
        // custom, not send
        PET_NAME_SUCCESS = 0,

        PET_NAME_INVALID = 1,
        PET_NAME_NO_NAME = 2,
        PET_NAME_TOO_SHORT = 3,
        PET_NAME_TOO_LONG = 4,
        PET_NAME_MIXED_LANGUAGES = 6,
        PET_NAME_PROFANE = 7,
        PET_NAME_RESERVED = 8,
        PET_NAME_THREE_CONSECUTIVE = 11,
        PET_NAME_INVALID_SPACE = 12,
        PET_NAME_CONSECUTIVE_SPACES = 13,
        PET_NAME_RUSSIAN_CONSECUTIVE_SILENT_CHARACTERS = 14,
        PET_NAME_RUSSIAN_SILENT_CHARACTER_AT_BEGINNING_OR_END = 15,
        PET_NAME_DECLENSION_DOESNT_MATCH_BASE_NAME = 16
    }

    [Flags]
    public enum SplineFlags : uint
    {
        None = 0x00000000,
        Done = 0x00000001,
        Falling = 0x00000002,           // Affects elevation computation
        Unknown3 = 0x00000004,
        Unknown4 = 0x00000008,
        Unknown5 = 0x00000010,
        Unknown6 = 0x00000020,
        Unknown7 = 0x00000040,
        Unknown8 = 0x00000080,
        Runmode = 0x00000100,
        Flying = 0x00000200,           // Smooth movement(Catmullrom interpolation mode), flying animation
        NoSpline = 0x00000400,
        Unknown12 = 0x00000800,
        Unknown13 = 0x00001000,
        Unknown14 = 0x00002000,
        Unknown15 = 0x00004000,
        Unknown16 = 0x00008000,
        FinalPoint = 0x00010000,
        FinalTarget = 0x00020000,
        FinalOrientation = 0x00040000,
        Unknown19 = 0x00080000,           // exists, but unknown what it does
        Cyclic = 0x00100000,           // Movement by cycled spline
        EnterCycle = 0x00200000,           // Everytimes appears with cyclic flag in monster move packet, erases first spline vertex after first cycle done
        Frozen = 0x00400000,           // Will never arrive
        Unknown23 = 0x00800000,
        Unknown24 = 0x01000000,
        Unknown25 = 0x02000000,           // exists, but unknown what it does
        Unknown26 = 0x04000000,
        Unknown27 = 0x08000000,
        Unknown28 = 0x10000000,
        Unknown29 = 0x20000000,
        Unknown30 = 0x40000000,
        Unknown31 = 0x80000000,
    }
    public enum SplineMode : byte
    {
        Linear = 0,
        CatmullRom = 1,
        Bezier3 = 2
    }

    public enum SplineType : byte
    {
        Normal = 0,
        Stop = 1,
        FacingSpot = 2,
        FacingTarget = 3,
        FacingAngle = 4
    }
}

public static class EnumCustomAttributeHelper
{
    public static string GetDescription(this Enum value)
    {
        Type type = value.GetType();
        string name = Enum.GetName(type, value);
        if (name != null)
        {
            FieldInfo field = type.GetField(name);
            if (field != null)
            {
                DescriptionAttribute attr =
                       Attribute.GetCustomAttribute(field,
                         typeof(DescriptionAttribute)) as DescriptionAttribute;
                if (attr != null)
                {
                    return attr.Description;
                }
            }
        }
        return null;
    }
}
