// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_communication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_communication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_communication_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_communication_2eproto;
namespace communication {
class ControlMessage;
struct ControlMessageDefaultTypeInternal;
extern ControlMessageDefaultTypeInternal _ControlMessage_default_instance_;
class DataMessage;
struct DataMessageDefaultTypeInternal;
extern DataMessageDefaultTypeInternal _DataMessage_default_instance_;
class UniversalMessage;
struct UniversalMessageDefaultTypeInternal;
extern UniversalMessageDefaultTypeInternal _UniversalMessage_default_instance_;
}  // namespace communication
PROTOBUF_NAMESPACE_OPEN
template<> ::communication::ControlMessage* Arena::CreateMaybeMessage<::communication::ControlMessage>(Arena*);
template<> ::communication::DataMessage* Arena::CreateMaybeMessage<::communication::DataMessage>(Arena*);
template<> ::communication::UniversalMessage* Arena::CreateMaybeMessage<::communication::UniversalMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace communication {

// ===================================================================

class DataMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.DataMessage) */ {
 public:
  inline DataMessage() : DataMessage(nullptr) {}
  ~DataMessage() override;
  explicit PROTOBUF_CONSTEXPR DataMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataMessage(const DataMessage& from);
  DataMessage(DataMessage&& from) noexcept
    : DataMessage() {
    *this = ::std::move(from);
  }

  inline DataMessage& operator=(const DataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMessage& operator=(DataMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataMessage* internal_default_instance() {
    return reinterpret_cast<const DataMessage*>(
               &_DataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataMessage& a, DataMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataMessage& from) {
    DataMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.DataMessage";
  }
  protected:
  explicit DataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // bytes payload = 1;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:communication.DataMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class ControlMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.ControlMessage) */ {
 public:
  inline ControlMessage() : ControlMessage(nullptr) {}
  ~ControlMessage() override;
  explicit PROTOBUF_CONSTEXPR ControlMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlMessage(const ControlMessage& from);
  ControlMessage(ControlMessage&& from) noexcept
    : ControlMessage() {
    *this = ::std::move(from);
  }

  inline ControlMessage& operator=(const ControlMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlMessage& operator=(ControlMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlMessage* internal_default_instance() {
    return reinterpret_cast<const ControlMessage*>(
               &_ControlMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlMessage& a, ControlMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControlMessage& from) {
    ControlMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.ControlMessage";
  }
  protected:
  explicit ControlMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorDescriptionFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string error_description = 2;
  void clear_error_description();
  const std::string& error_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_description();
  PROTOBUF_NODISCARD std::string* release_error_description();
  void set_allocated_error_description(std::string* error_description);
  private:
  const std::string& _internal_error_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_description(const std::string& value);
  std::string* _internal_mutable_error_description();
  public:

  // int32 error_code = 1;
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:communication.ControlMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_description_;
    int32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class UniversalMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.UniversalMessage) */ {
 public:
  inline UniversalMessage() : UniversalMessage(nullptr) {}
  ~UniversalMessage() override;
  explicit PROTOBUF_CONSTEXPR UniversalMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UniversalMessage(const UniversalMessage& from);
  UniversalMessage(UniversalMessage&& from) noexcept
    : UniversalMessage() {
    *this = ::std::move(from);
  }

  inline UniversalMessage& operator=(const UniversalMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniversalMessage& operator=(UniversalMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UniversalMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MessageContentCase {
    kData = 1,
    kControl = 2,
    MESSAGE_CONTENT_NOT_SET = 0,
  };

  static inline const UniversalMessage* internal_default_instance() {
    return reinterpret_cast<const UniversalMessage*>(
               &_UniversalMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UniversalMessage& a, UniversalMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UniversalMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniversalMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UniversalMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UniversalMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UniversalMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UniversalMessage& from) {
    UniversalMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniversalMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.UniversalMessage";
  }
  protected:
  explicit UniversalMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kControlFieldNumber = 2,
  };
  // .communication.DataMessage data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::communication::DataMessage& data() const;
  PROTOBUF_NODISCARD ::communication::DataMessage* release_data();
  ::communication::DataMessage* mutable_data();
  void set_allocated_data(::communication::DataMessage* data);
  private:
  const ::communication::DataMessage& _internal_data() const;
  ::communication::DataMessage* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::communication::DataMessage* data);
  ::communication::DataMessage* unsafe_arena_release_data();

  // .communication.ControlMessage control = 2;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  const ::communication::ControlMessage& control() const;
  PROTOBUF_NODISCARD ::communication::ControlMessage* release_control();
  ::communication::ControlMessage* mutable_control();
  void set_allocated_control(::communication::ControlMessage* control);
  private:
  const ::communication::ControlMessage& _internal_control() const;
  ::communication::ControlMessage* _internal_mutable_control();
  public:
  void unsafe_arena_set_allocated_control(
      ::communication::ControlMessage* control);
  ::communication::ControlMessage* unsafe_arena_release_control();

  void clear_message_content();
  MessageContentCase message_content_case() const;
  // @@protoc_insertion_point(class_scope:communication.UniversalMessage)
 private:
  class _Internal;
  void set_has_data();
  void set_has_control();

  inline bool has_message_content() const;
  inline void clear_has_message_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageContentUnion {
      constexpr MessageContentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::communication::DataMessage* data_;
      ::communication::ControlMessage* control_;
    } message_content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataMessage

// bytes payload = 1;
inline void DataMessage::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& DataMessage::payload() const {
  // @@protoc_insertion_point(field_get:communication.DataMessage.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataMessage::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:communication.DataMessage.payload)
}
inline std::string* DataMessage::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:communication.DataMessage.payload)
  return _s;
}
inline const std::string& DataMessage::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void DataMessage::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* DataMessage::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* DataMessage::release_payload() {
  // @@protoc_insertion_point(field_release:communication.DataMessage.payload)
  return _impl_.payload_.Release();
}
inline void DataMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:communication.DataMessage.payload)
}

// -------------------------------------------------------------------

// ControlMessage

// int32 error_code = 1;
inline void ControlMessage::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline int32_t ControlMessage::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t ControlMessage::error_code() const {
  // @@protoc_insertion_point(field_get:communication.ControlMessage.error_code)
  return _internal_error_code();
}
inline void ControlMessage::_internal_set_error_code(int32_t value) {
  
  _impl_.error_code_ = value;
}
inline void ControlMessage::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:communication.ControlMessage.error_code)
}

// string error_description = 2;
inline void ControlMessage::clear_error_description() {
  _impl_.error_description_.ClearToEmpty();
}
inline const std::string& ControlMessage::error_description() const {
  // @@protoc_insertion_point(field_get:communication.ControlMessage.error_description)
  return _internal_error_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControlMessage::set_error_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:communication.ControlMessage.error_description)
}
inline std::string* ControlMessage::mutable_error_description() {
  std::string* _s = _internal_mutable_error_description();
  // @@protoc_insertion_point(field_mutable:communication.ControlMessage.error_description)
  return _s;
}
inline const std::string& ControlMessage::_internal_error_description() const {
  return _impl_.error_description_.Get();
}
inline void ControlMessage::_internal_set_error_description(const std::string& value) {
  
  _impl_.error_description_.Set(value, GetArenaForAllocation());
}
inline std::string* ControlMessage::_internal_mutable_error_description() {
  
  return _impl_.error_description_.Mutable(GetArenaForAllocation());
}
inline std::string* ControlMessage::release_error_description() {
  // @@protoc_insertion_point(field_release:communication.ControlMessage.error_description)
  return _impl_.error_description_.Release();
}
inline void ControlMessage::set_allocated_error_description(std::string* error_description) {
  if (error_description != nullptr) {
    
  } else {
    
  }
  _impl_.error_description_.SetAllocated(error_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_description_.IsDefault()) {
    _impl_.error_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:communication.ControlMessage.error_description)
}

// -------------------------------------------------------------------

// UniversalMessage

// .communication.DataMessage data = 1;
inline bool UniversalMessage::_internal_has_data() const {
  return message_content_case() == kData;
}
inline bool UniversalMessage::has_data() const {
  return _internal_has_data();
}
inline void UniversalMessage::set_has_data() {
  _impl_._oneof_case_[0] = kData;
}
inline void UniversalMessage::clear_data() {
  if (_internal_has_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_content_.data_;
    }
    clear_has_message_content();
  }
}
inline ::communication::DataMessage* UniversalMessage::release_data() {
  // @@protoc_insertion_point(field_release:communication.UniversalMessage.data)
  if (_internal_has_data()) {
    clear_has_message_content();
    ::communication::DataMessage* temp = _impl_.message_content_.data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_content_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::communication::DataMessage& UniversalMessage::_internal_data() const {
  return _internal_has_data()
      ? *_impl_.message_content_.data_
      : reinterpret_cast< ::communication::DataMessage&>(::communication::_DataMessage_default_instance_);
}
inline const ::communication::DataMessage& UniversalMessage::data() const {
  // @@protoc_insertion_point(field_get:communication.UniversalMessage.data)
  return _internal_data();
}
inline ::communication::DataMessage* UniversalMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:communication.UniversalMessage.data)
  if (_internal_has_data()) {
    clear_has_message_content();
    ::communication::DataMessage* temp = _impl_.message_content_.data_;
    _impl_.message_content_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UniversalMessage::unsafe_arena_set_allocated_data(::communication::DataMessage* data) {
  clear_message_content();
  if (data) {
    set_has_data();
    _impl_.message_content_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:communication.UniversalMessage.data)
}
inline ::communication::DataMessage* UniversalMessage::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_message_content();
    set_has_data();
    _impl_.message_content_.data_ = CreateMaybeMessage< ::communication::DataMessage >(GetArenaForAllocation());
  }
  return _impl_.message_content_.data_;
}
inline ::communication::DataMessage* UniversalMessage::mutable_data() {
  ::communication::DataMessage* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:communication.UniversalMessage.data)
  return _msg;
}

// .communication.ControlMessage control = 2;
inline bool UniversalMessage::_internal_has_control() const {
  return message_content_case() == kControl;
}
inline bool UniversalMessage::has_control() const {
  return _internal_has_control();
}
inline void UniversalMessage::set_has_control() {
  _impl_._oneof_case_[0] = kControl;
}
inline void UniversalMessage::clear_control() {
  if (_internal_has_control()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_content_.control_;
    }
    clear_has_message_content();
  }
}
inline ::communication::ControlMessage* UniversalMessage::release_control() {
  // @@protoc_insertion_point(field_release:communication.UniversalMessage.control)
  if (_internal_has_control()) {
    clear_has_message_content();
    ::communication::ControlMessage* temp = _impl_.message_content_.control_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_content_.control_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::communication::ControlMessage& UniversalMessage::_internal_control() const {
  return _internal_has_control()
      ? *_impl_.message_content_.control_
      : reinterpret_cast< ::communication::ControlMessage&>(::communication::_ControlMessage_default_instance_);
}
inline const ::communication::ControlMessage& UniversalMessage::control() const {
  // @@protoc_insertion_point(field_get:communication.UniversalMessage.control)
  return _internal_control();
}
inline ::communication::ControlMessage* UniversalMessage::unsafe_arena_release_control() {
  // @@protoc_insertion_point(field_unsafe_arena_release:communication.UniversalMessage.control)
  if (_internal_has_control()) {
    clear_has_message_content();
    ::communication::ControlMessage* temp = _impl_.message_content_.control_;
    _impl_.message_content_.control_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UniversalMessage::unsafe_arena_set_allocated_control(::communication::ControlMessage* control) {
  clear_message_content();
  if (control) {
    set_has_control();
    _impl_.message_content_.control_ = control;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:communication.UniversalMessage.control)
}
inline ::communication::ControlMessage* UniversalMessage::_internal_mutable_control() {
  if (!_internal_has_control()) {
    clear_message_content();
    set_has_control();
    _impl_.message_content_.control_ = CreateMaybeMessage< ::communication::ControlMessage >(GetArenaForAllocation());
  }
  return _impl_.message_content_.control_;
}
inline ::communication::ControlMessage* UniversalMessage::mutable_control() {
  ::communication::ControlMessage* _msg = _internal_mutable_control();
  // @@protoc_insertion_point(field_mutable:communication.UniversalMessage.control)
  return _msg;
}

inline bool UniversalMessage::has_message_content() const {
  return message_content_case() != MESSAGE_CONTENT_NOT_SET;
}
inline void UniversalMessage::clear_has_message_content() {
  _impl_._oneof_case_[0] = MESSAGE_CONTENT_NOT_SET;
}
inline UniversalMessage::MessageContentCase UniversalMessage::message_content_case() const {
  return UniversalMessage::MessageContentCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
